/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : ShellWin.cs
 * File Description : The shell window
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/30/2013
 * Comment          : 
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading;
using System.Windows;
using System.Windows.Input;

namespace PersianEditor.Windows
{
    public partial class ShellWin : Window, IDisposable
    {
        #region Fields & Properties
        
        public bool IsInDesignMode
        {
            get
            {
                return DesignerProperties.GetIsInDesignMode(this);
            }
        }

        bool isDisposed;
        SynchronizationContext synchronizationContext; 
        public static bool isBusy = false;
        private static event EventHandler<NotifyEventArgs> Notifying;
        //This event used for sending command from wpf to xna
        public static event EventHandler<CmdToXnaEventArgs> CmdToXnaEvent;

        #endregion

        #region Constructor/Destructor

        public ShellWin()
        {
            InitializeComponent();
            if (!IsInDesignMode)
            {
                InitializeFields();
                InitializeEvents();
                synchronizationContext = SynchronizationContext.Current;
                GC.Collect();
                GC.WaitForPendingFinalizers();
                Logger.WriteLine(String.Format("{0} Initialized", this.GetType().Name));
            }
        }

        ~ShellWin()
        {
            Dispose(false);
        }

        #endregion

        #region Initialize

        private void InitializeFields()
        {
            this.isDisposed = false;
            this.EngineContentTree.Root = Persian.EngineContentDir;
        }

        private void InitializeEvents()
        {
            XNA.ShellXna.CmdToGDIEvent += new EventHandler<CmdToGDIEventArgs>(OnCmdToGDI);
            this.ribbonBarUC.OnButtonClicked += new EventHandler<CmdToXnaEventArgs>(OnRibbonBarClicked);
            Notifying += new EventHandler<NotifyEventArgs>(OnNotifying);
        }
                
        #endregion

        #region Events

        private void OnNotifying(object sender, NotifyEventArgs e)
        {
            string Message = string.Empty;
            string From = sender.GetType() == typeof(string) ? sender.ToString() : sender.GetType().Name;
            if (e.notifyType == NotifyType.Error)
            {
                if (e.action == NotifyAction.Clear)
                {
                    this.Errors.Clear();
                }
                else if (e.action == NotifyAction.Add)
                {
                    Message = String.Concat(e.Data.ToString(), String.Format(" ( Error from {0} )", From));
                    this.Errors.Add(Message);
                    Logger.WriteError(Message);
                }
                else if (e.action == NotifyAction.ClearThenAdd)
                {
                    Message = String.Concat(e.Data.ToString(), String.Format(" ( Error from {0} )", From));
                    this.Errors.ClearThenAdd(Message);
                    Logger.WriteError(Message);
                }
            }
            else if (e.notifyType == NotifyType.Warning)
            {
                if (e.action == NotifyAction.Clear)
                {
                    this.Errors.Clear();
                }
                else if (e.action == NotifyAction.Add)
                {
                    Message = String.Concat(e.Data.ToString(), String.Format(" ( Error from {0} )", From));
                    this.Errors.Add(Message);
                    Logger.WriteWarning(Message);
                }
                else if (e.action == NotifyAction.ClearThenAdd)
                {
                    Message = String.Concat(e.Data.ToString(), String.Format(" ( Error from {0} )", From));
                    this.Errors.ClearThenAdd(Message);
                    Logger.WriteWarning(Message);
                }
            }
            this.ErrorPanel.Focus();
        }

        private void OnCmdToGDI(object sender, CmdToGDIEventArgs e)
        {
            if (e.Cmd == CmdToGDI.SetProperty)
            {
                if (this.propertyGrid.SelectedObject == null || !this.propertyGrid.SelectedObject.Equals(e.Data))
                {
                    this.propertyGrid.SelectedObject = e.Data;
                    this.TexturesManager.Refresh();
                }
            }
            else if (e.Cmd == CmdToGDI.Settings)
            {
                this.Width = Persian.GDevice.DisplayMode.Width;
                this.Height = Persian.GDevice.DisplayMode.Height;
                this.MaxWidth = Width;
                this.MaxHeight = Height;
            }
            else if (e.Cmd == CmdToGDI.FocusOnRender)
            {
                Render_OnMouseEnter(sender, new EventArgs());
            }
            else if (e.Cmd == CmdToGDI.Save)
            {
                SaveCurrentScene((bool)e.Data);
            }
            else if (e.Cmd == CmdToGDI.BindToTreeTag)
            {
                var Objs = e.Data as List<object>;
                this.EngineContentTree.RefreshTreeView(Objs);
            }
            else if (e.Cmd == CmdToGDI.BindToAnimationEditor)
            {
                this.ribbonBarUC.BindToAnimationEditor(e.Data);
            }
            else if (e.Cmd == CmdToGDI.RemoveAllAnimationEditorBindings)
            {
                this.ribbonBarUC.ClearBinding();
            }
            else if (e.Cmd == CmdToGDI.BindToCutScene)
            {
                this.ribbonBarUC.UpdateCutScene();
            }
            else if (e.Cmd == CmdToGDI.RefreshContent)
            {
                this.EngineContentTree.RefreshTreeView();
                EditorShared.RefreshBindingTags = true;
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            this.Render_Layer.Focus();
            CmdToXnaEvent(sender, new CmdToXnaEventArgs(ToXnaHeader.Setting, PersianEditor.CmdToXna.SetPresentation, 
                new int[] { this.Render_Layer.Width, this.Render_Layer.Height + 115 }));
        }

        private void Window_Unloaded(object sender, RoutedEventArgs e)
        {
            this.Dispose();
            Persian.ShutDown = true;
        }

        private void Window_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void OnRibbonBarClicked(object sender, CmdToXnaEventArgs e)
        {
            if (e.Cmd == CmdToXna.NOP) return;
            
            switch (e.Header)
            {
                case ToXnaHeader.AppMenu:
                    RisedFromAppMenu(e);
                    break;
                case ToXnaHeader.Home:
                    RisedFromHomeTab(e);
                    break;
                case ToXnaHeader.Animation:
                    RisedFromAnimation(e);
                    break;
                case ToXnaHeader.Build:
                    RisedFromBuild(e);
                    break;
            }
        }

        private void RisedFromAppMenu(CmdToXnaEventArgs e)
        {
            switch (e.Cmd)
            {
                case CmdToXna.Exit:
                case CmdToXna.ExitShortcut:
                    this.Close();
                    break;
                case CmdToXna.Minimize:
                    this.WindowState = System.Windows.WindowState.Minimized;
                    break;
                case CmdToXna.Import:
                    ImportProcess("Import Asset", null, false, false, null);
                    break;
                case CmdToXna.NewScene:
                    #region Create New Scene

                    this.EngineContentTree.ClearAllBindings(null);
                    this.propertyGrid.SelectedObjects = null;
                    CmdToXnaEvent(e.Header.ToString(), new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.NewScene, new object[] { }));

                    #endregion
                    break;
                case CmdToXna.NewProject:
                    #region Create New Project

                    EditorShared.CurrentProjectPath = string.Empty;
                    EditorShared.CurrentScenePath = string.Empty;

                    //Do not Let Removing Content Folder
                    string HResult = IOHelper.DeleteDirectory(Persian.EngineContentDir);
                    if (HResult != null)
                    {
                        Notify("ContentTreeViewUC", new NotifyEventArgs(NotifyType.Error, NotifyAction.ClearThenAdd, HResult));
                    }
                    HResult = EditorShared.CreateEngineContentDirs(true);
                    if (HResult != null)
                    {
                        Notify("Creating Base Content", new NotifyEventArgs(NotifyType.Error, NotifyAction.ClearThenAdd, HResult));
                    }
                    if (HResult == null)
                    {
                        //Do not need clearing binding...cause in refresh Method all of items are going to be clear
                        this.EngineContentTree.RefreshTreeView();
                        this.propertyGrid.SelectedObjects = null;
                        CmdToXnaEvent(e.Header.ToString(), new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.NewProject, new object[] { }));
                    }

                    #endregion
                    break;
                case CmdToXna.OpenScene:
                    #region Process Openning Scene

                    using (var ofd = new System.Windows.Forms.OpenFileDialog())
                    {
                        ofd.Multiselect = false;
                        ofd.RestoreDirectory = true;
                        ofd.Title = "Open Scene";
                        ofd.Filter = "Persian Editor Save Files (*.PES)|*.PES|" + "All Files (*.*)|*.*";

                        if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                        {
                            this.propertyGrid.SelectedObjects = null;
                            EditorShared.CurrentScenePath = ofd.FileName;
                            CmdToXnaEvent(this, new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.OpenScene, ofd.FileName));
                        }
                    }

                    #endregion
                    break;
                case CmdToXna.MergeScene:
                    #region Process Merging Scene

                    using (var ofd = new System.Windows.Forms.OpenFileDialog())
                    {
                        ofd.Multiselect = false;
                        ofd.RestoreDirectory = true;
                        ofd.Title = "Open Scene";
                        ofd.Filter = "Persian Editor Save Files (*.PES)|*.PES|" + "All Files (*.*)|*.*";

                        if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                        {
                            this.propertyGrid.SelectedObjects = null;
                            EditorShared.CurrentScenePath = ofd.FileName;
                            CmdToXnaEvent(this, new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.MergeScene, ofd.FileName));
                        }
                    }

                    #endregion
                    break;
                case CmdToXna.OpenProject:
                    #region Process Openning Project

                    EditorShared.CurrentScenePath = string.Empty;
                    using (var ofd = new System.Windows.Forms.OpenFileDialog())
                    {
                        ofd.Multiselect = false;
                        ofd.RestoreDirectory = true;
                        ofd.Title = "Open Project";
                        ofd.Filter = "Persian Editor Project Files (*.PEP)|*.PEP|" + "All Files (*.*)|*.*";

                        if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                        {
                            OpeningProject(ofd.FileName);
                        }
                    }

                    #endregion
                    break;
                case CmdToXna.SaveScene:
                    SaveCurrentScene(false);
                    break;
                case CmdToXna.SaveAsScene:
                    SaveCurrentScene(true);
                    break;
                case CmdToXna.SaveProject:
                    SaveCurrentProject(false);
                    break;
                case CmdToXna.SaveAsProject:
                    SaveCurrentProject(true);
                    break;
            }
        }

        private void RisedFromHomeTab(CmdToXnaEventArgs e)
        {
            if (e.Cmd == CmdToXna.Duplicate)
            {
                if (this.propertyGrid.SelectedObject != null)
                {
                    //If object has been selected
                    CmdToXnaEvent(this, new CmdToXnaEventArgs(
                        ToXnaHeader.Home,
                        PersianEditor.CmdToXna.Duplicate,
                        this.propertyGrid.SelectedObject));
                }
            }
            else
            {
                CmdToXnaEvent(this, e);
            }
        }

        private void RisedFromAnimation(CmdToXnaEventArgs e)
        {
            CmdToXnaEvent(this, e);
        }

        private void RisedFromBuild(CmdToXnaEventArgs e)
        {
            CmdToXnaEvent(this, new CmdToXnaEventArgs(ToXnaHeader.Build, e.Cmd, e.Data));
        }

        private void OpeningProject(string path)
        {
            string HResult = null;
            string ContentPath = System.IO.Path.GetDirectoryName(path) + @"\Content\";
            this.propertyGrid.SelectedObjects = null;
            //First Move Content
            if (!System.IO.Directory.Exists(ContentPath))
            {
                Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.ClearThenAdd, "could not open project.the content folder is missing"));
                return;
            }

            HResult = IOHelper.CopyDirectory(ContentPath, Persian.EngineContentDir, true);
            if (HResult != null)
            {
                Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.ClearThenAdd, String.Concat("could not open project.the assets could not copy because :", HResult)));
                return;
            }
            //Then Open Scene
            CmdToXnaEvent(this, new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.OpenProject, path));
        }

        private void Render_OnMouseEnter(object sender, EventArgs e)
        {
            if (!isBusy)
            {
                EditorShared.XnaFetchIO = true;
                synchronizationContext.Post(
                    (p) =>
                    {
                        this.Render_Layer.Focus();
                    },
                    null);
            }
        }

        private void Render_OnMouseClick(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            Render_OnMouseEnter(sender, new EventArgs());
        }

        private void Render_OnMouseLeave(object sender, EventArgs e)
        {
            EditorShared.XnaFetchIO = false;
        }

        #endregion

        #region Methods

        public static void Notify(object sender, NotifyEventArgs e)
        {
            Notifying(sender, e);
        }

        public string[] ImportProcess(string Title, string Filter, bool Multiselect, bool returnPaths , string CopyToPath)
        {
            string[] Paths = null;
            using (var ofd = new System.Windows.Forms.OpenFileDialog())
            {
                ofd.InitialDirectory = Persian.ContentDir;
                ofd.Title = Title;
                ofd.Multiselect = Multiselect;
                if (String.IsNullOrEmpty(Filter))
                {
                    ofd.Filter = "Content Pipelines Files (*.fbx;*.x;*.bmp;*.jpg;*.png;*.tga;*.dds;*.fx;*.PACam;*.xap;*.wav;*.wma;*.mp3;*.wmv;*.spritefont)|*.fbx;*.x;*.bmp;*.jpg;*.png;*.tga;*.dds;*.fx;*.PACam;*.xap;*.wav;*.wma;*.mp3;*.wmv;*.spritefont|" +
                                        "Audio Files (*.xap;*.wav;*.wma;*.mp3)|*.xap;*.wav;*.wma;*.mp3|" +
                                        "Texture Files (*.bmp;*.jpg;*.png;*.tga;*.dds)|*.bmp;*.jpg;*.png;*.tga;*.dds|" +
                                        "Model Files (*.fbx;*.x)|*.fbx;*.x|" +
                                        "Effect Files (*.fx)|*.fx|" +
                                        "Animated Camera Files (*.PACam)|*.PACam|" +
                                        "Font Files (*.spritefont)|*.spritefont|" +
                                        "XML Files (*.xml)|*.xml|" +
                                        "Video Files (*.wmv)|*.wmv|" +
                                        "All Files (*.*)|*.*";
                }
                else
                {
                    ofd.Filter = Filter;
                }

                if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    if (returnPaths)
                    {
                        Paths = ofd.FileNames;
                    }
                    else
                    {
                        #region Execute as normal

                        string FileExtention = System.IO.Path.GetExtension(ofd.FileName).ToLower();
                        switch (FileExtention)
                        {
                            case ".fbx":
                            case ".x":
                                CmdToXnaEvent(this, new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.Import,
                                    new string[] { ofd.FileName, "MeshPipeline" }));
                                break;
                            case ".bmp":
                            case ".jpg":
                            case ".png":
                            case ".tga":
                            case ".dds":
                                CmdToXnaEvent(this, new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.ImportTexture,
                                    new string[] { ofd.FileName, CopyToPath }));
                                break;
                            case ".pacam":
                                CmdToXnaEvent(this, new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.ImportPAAnimatedCamera,
                                    new string[] { ofd.FileName, CopyToPath }));
                                break;
                        }

                        #endregion
                    }
                }
            }
            return Paths;
        }

        private void SaveCurrentScene(bool OpenSaveDialog)
        {
            bool AllowSave = true;
            if (OpenSaveDialog || String.IsNullOrEmpty(EditorShared.CurrentScenePath))
            {
                //Open Save File dialog
                using (var sfd = new System.Windows.Forms.SaveFileDialog())
                {
                    sfd.RestoreDirectory = true;
                    sfd.Title = "Save Scene";
                    sfd.Filter = "Persian Editor Save Files (*.PES)|*.PES|All Files (*.*)|*.*";
                    if (sfd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        EditorShared.CurrentScenePath = sfd.FileName;
                    }
                    else
                    {
                        AllowSave = false;
                    }
                }
            }
            if (AllowSave)
            {
                CmdToXnaEvent(this, new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.SaveScene, EditorShared.CurrentScenePath));
            }
        }

        private void SaveCurrentProject(bool OpenSaveDialog)
        {
            bool AllowSave = true;
            string FileName = string.Empty;
            if (OpenSaveDialog || String.IsNullOrEmpty(EditorShared.CurrentProjectPath))
            {
                using (var fbd = new System.Windows.Forms.FolderBrowserDialog())
                {
                    fbd.ShowNewFolderButton = true;
                    fbd.Description = "Save Project";
                    fbd.RootFolder = Environment.SpecialFolder.DesktopDirectory;
                    if (fbd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                    {
                        EditorShared.CurrentProjectPath = fbd.SelectedPath;
                    }
                    else
                    {
                        AllowSave = false;
                    }
                }
            }
            if (AllowSave)
            {
                CopyContentFolderTo(EditorShared.CurrentProjectPath + @"\");
                CmdToXnaEvent(this, new CmdToXnaEventArgs(ToXnaHeader.AppMenu, PersianEditor.CmdToXna.SaveScene,
                    String.Concat(EditorShared.CurrentProjectPath, @"\", System.IO.Path.GetFileName(EditorShared.CurrentProjectPath + ".PEP"))));
            }
        }

        private void CopyContentFolderTo(string path)
        {
            string HResult = IOHelper.CopyDirectory(Persian.EngineContentDir, path + @"Content", true);
            if (HResult != null)
            {
                Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.ClearThenAdd, String.Concat("Could not copy content folder because :", HResult)));
            }
        }

        #endregion

        #region Dispose

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!isDisposed)
            {
                isDisposed = true;
                Logger.WriteLine(String.Format("{0} disposed", this.GetType().Name));
            }
        }

        #endregion
    }
}
