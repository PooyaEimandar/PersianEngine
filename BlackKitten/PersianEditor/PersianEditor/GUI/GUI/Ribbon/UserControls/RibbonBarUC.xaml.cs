/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : RibbonBarUC.cs
 * File Description : The ribbonBar user control
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/30/2013
 * Comment          : 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Forms.Integration;
using System.Windows.Media.Imaging;
using Telerik.Windows;
using Telerik.Windows.Controls;

namespace PersianEditor.UserControls
{
    public partial class RibbonBarUC : UserControl
    {
        #region Fields & Properties

        public event EventHandler<CmdToXnaEventArgs> OnButtonClicked;
        List<MixerInfo> MixedData;
        SynchronizationContext synchronizationContext;

        #endregion

        #region Constructor

        public RibbonBarUC()
        {
            InitializeComponent();
            InitializeTags();
            //Set selected index to Animated Cameras and CutScenes
            this.AnimatedCameras.SelectedIndex = 0;
            this.CutScenes.SelectedIndex = 0;
            this.Loaded += (sender, e) =>
            {
                this.synchronizationContext = SynchronizationContext.Current;
                this.RibbonBar.ApplicationName = String.Format("Version {0} {1}", Persian.EVersion, Logger.CompanyInfo);
            };
        }

        public void UpdateCutScene()
        {
            this.synchronizationContext.Post((p) =>
                {
                    this.CutScenes.ItemsSource = Persian.CutSceneNames;
                    this.AnimatedCameras.ItemsSource = Persian.CameraCutSceneNames;
                }, null);
        }

        #endregion

        #region Initialize

        private void InitializeTags()
        {
            //for converting button to radioButton
            this.DefaultPose.Tag = false;
        }

        #endregion

        #region Events

        /// <summary>
        /// On Changing Resolution of Shadow 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnChangeShadowsResolution(object sender, SelectionChangedEventArgs e)
        {
            if (this.OnButtonClicked == null) return;

            int res = 256;
            if (this.ShadowsResolution.SelectedIndex == 1)
            {
                res = 512;
            }
            else if (this.ShadowsResolution.SelectedIndex == 2)
            {
                res = 1024;
            }
            OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Build, CmdToXna.ShadowRes, res));
        }

        /// <summary>
        /// Change type of postprocess
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnChangePostProcess(object sender, SelectionChangedEventArgs e)
        {
            if (OnButtonClicked == null) return;
            if (this.ChangePostProcess.SelectedIndex == 0)
            {
                var _enum = GetClickedRibbon(sender);
                OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Build, _enum, null));
            }
        }

        /// <summary>
        /// raised from Application Menu
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void AppBtn_Click(object sender, RoutedEventArgs e)
        {
            var _enum = GetClickedRibbon(sender);
            OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.AppMenu, _enum, -1));
            //Just update the binding resource of Cameras, this must be done when we import the animated camera
            if (_enum == CmdToXna.Import)
            {
                UpdateCutScene();
            }
        }

        /// <summary>
        /// raised from Home Tabs
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void HomeTabBtn_Click(object sender, RoutedEventArgs e)
        {
            var _enum = GetClickedRibbon(sender);
            OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Home, _enum, 0));
        }

        /// <summary>
        /// raised from Animation Tab
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void AnimationTabBtn_Click(object sender, RoutedEventArgs e)
        {
            var _enum = GetClickedRibbon(sender);
            OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Animation, _enum, 1));
            //Just update the binding resource of CutScenes, this must be done when we add and cut scene
            if (_enum == CmdToXna.CreateCutScene)
            {
                UpdateCutScene();
            }
        }


        private void AnimationCutScene_Click(object sender, RoutedEventArgs e)
        {
            var _enum = GetClickedRibbon(sender);
            OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Animation, _enum,
                new int[] 
                { 
                    this.CutScenes.SelectedIndex,
                    this.AnimatedCameras.SelectedIndex
                }));
        }

        private void ShowBone_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if ((sender as RadComboBox).SelectedIndex != -1)
            {
                if ((sender as RadComboBox).SelectedIndex == 0)
                {
                    OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Animation, CmdToXna.HiddenBone, 0));
                }
                else
                {
                    OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Animation, CmdToXna.HiddenBone, 1));
                }
            }
        }

        /// <summary>
        /// raised from Build Tab
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BuildTabBtn_Click(object sender, RoutedEventArgs e)
        {
            CmdToXna _enum = GetClickedRibbon(sender);
            OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Build, _enum, 2));
        }

        private void OnMouseLeftButtonDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            AppBtn_Click(sender, new RoutedEventArgs());
        }

        private void TabMenu_Click(object sender, RadRoutedEventArgs e)
        {
            AppBtn_Click(sender, new RoutedEventArgs());
        }

        private void AnimationDoubleButton_Click(object sender, RoutedEventArgs e)
        {
            var button = sender as RadRibbonButton;
            var _enum = ENUMS.StringToEnum<CmdToXna>(button.Name);
            if ((bool)button.Tag == false)
            {
                button.Tag = true;
                button.SmallImage = Resources["New"] as BitmapImage;
            }
            else
            {
                button.Tag = false;
                button.SmallImage = Resources["Open"] as BitmapImage;
            }
            OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Animation, _enum, 1));
        }

        private void SyncGamePad_Click(object sender, RoutedEventArgs e)
        {
            if (this.SourceClips.Items.Count > 0)
            {
                var gamePadSyncer = new Windows.GamePadSyncerWin();
                gamePadSyncer.Ctrl.AnimationsCombo.ItemsSource = this.SourceClips.Items;
                gamePadSyncer.Show();
            }
            else
            {
                Windows.ShellWin.Notify(sender, new NotifyEventArgs(NotifyType.Warning, NotifyAction.Add, "No animated mesh has been selected"));
            }
        }

        private void OnOpenMixerClicked(object sender, RoutedEventArgs e)
        {
            if (PersianCore.ObjectsManager.SelectedMeshes.Count() == 1 && PersianCore.ObjectsManager.SelectedMeshes[0].IsSkinned)
            {
                Windows.AnimationMixerEditorWin MixerWin = new Windows.AnimationMixerEditorWin();
                MixerWin.Ctrl.SourceItems = this.SourceClips.Items;
                MixerWin.Ctrl.CreateTrack(PersianCore.ObjectsManager.SelectedMeshes[0].CurrentAnimationName);

                MixerWin.OnCommand += new EventHandler<CmdEventArgs>(MixerWin_OnCommand);
                ElementHost.EnableModelessKeyboardInterop(MixerWin);
                MixerWin.Show();
            }
            else
            {
                Windows.ShellWin.Notify(sender, new NotifyEventArgs(
                    NotifyType.Warning,
                    NotifyAction.Add,
                    "Please select one animated mesh"));
            }
        }

        private void RenderTechniques_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            //Persian.CurrentRenderTechnique = (RenderTechnique)this.RenderTechniques.SelectedIndex;
        }

        private void MixerWin_OnCommand(object sender, CmdEventArgs e)
        {
            OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Animation, CmdToXna.OpenMixer, e.Data));
        }

        private void SourceClips_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (this.SourceClips.SelectedIndex != -1 && this.MixedData != null && this.MixedData.Count > 0)
            {
                //do not use parallel cause cross thread happened
                var Q = from q in this.MixedData
                        where q.Name == this.SourceClips.SelectedItem.ToString()
                        select q;

                List<MixerInfo> Result = Q.ToList();
                if (Result.Count > 0)
                {
                    this.InherientTracks.ItemsSource = Result[0].AnimationTracks;
                    this.InherientTracks.SelectedIndex = 0;
                }
            }
        }

        private void ApplyInherit_Click(object sender, RoutedEventArgs e)
        {
            OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Animation, CmdToXna.ApplyInherit, this.InherientTracks.SelectedIndex));
        }

        private void OnChecked(object sender, RoutedEventArgs e)
        {
            var checkBox = sender as CheckBox;
            if (checkBox.Tag == null) return;

            if (checkBox.IsChecked == true)
            {
                if (checkBox.Tag.ToString() == "0")
                {
                    this.BindToBoneChkBox.IsChecked = false;
                }
                else
                {
                    this.BindToObjectChkBox.IsChecked = false;
                }
            }
        }

        private void ApplyBindChangesBtn_Click(object sender, RoutedEventArgs e)
        {
            if (!this.BindToBoneChkBox.IsChecked.HasValue) return;

            if (this.BindToBoneChkBox.IsChecked == true)
            {
                //Check for binding bone
                var _boneName = this.BoneName.Text;
                if (string.IsNullOrWhiteSpace(_boneName)) return;

                //Create standard format of Softimage
                _boneName = "Model_" + _boneName[0] + _boneName[1] + _boneName.Substring(2);

                OnButtonClicked(sender, new CmdToXnaEventArgs(
                    ToXnaHeader.Home,
                    CmdToXna.ApplyBindChanges,
                    new string[] { _boneName, string.Empty })); //Empty string send as fake element for finding data 
            }
            else
            {
                //Check for binding object
                var _bindProperty = this.BindProperty.Text;
                if (string.IsNullOrWhiteSpace(_bindProperty)) return;

                _bindProperty = char.ToUpper(_bindProperty[0]) + _bindProperty.Substring(1);

                OnButtonClicked(sender, new CmdToXnaEventArgs(
                    ToXnaHeader.Home,
                    CmdToXna.ApplyBindChanges,
                    new string[] { _bindProperty }));
            }
        }

        private void OnAddToPostProcessList(object sender, RoutedEventArgs e)
        {
            if (this.ChangePostProcess.SelectedIndex == 0) return;

            bool isExist = false;
            var selected = this.ChangePostProcess.SelectionBoxItem.ToString();
            foreach (string item in this.PostProcessList.Items)
            {
                if (item == selected)
                {
                    isExist = true;
                    break;
                }
            }

            if (!isExist)
            {
                //First add to postProcessList
                this.PostProcessList.Items.Add(selected);

                var count = this.PostProcessList.Items.Count;
                var flags = new PersianCore.Graphics.PostProcessing.PostProcessType[count];
                for (int i = 0; i < this.PostProcessList.Items.Count; ++i)
                {
                    var content = this.PostProcessList.Items[i].ToString().ToUpper();
                    flags[i] = ENUMS.StringToEnum<PersianCore.Graphics.PostProcessing.PostProcessType>(content);
                }
                OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Build, CmdToXna.ChangePostProcess, flags));
            }
        }

        private void OnRemoveOrderPost(object sender, RoutedEventArgs e)
        {
            //0 remove, 1 up, 2 down
            var tag = (sender as RadButton).Tag.ToString();
            switch (tag)
            {
                case "0"://Remove from post process
                    var content = this.PostProcessList.SelectedValue.ToString().ToUpper();
                    var flag = ENUMS.StringToEnum<PersianCore.Graphics.PostProcessing.PostProcessType>(content);
                    this.PostProcessList.Items.RemoveAt(this.PostProcessList.SelectedIndex);
                    OnButtonClicked(sender, new CmdToXnaEventArgs(ToXnaHeader.Build, CmdToXna.ChangePostProcess, flag));
                    break;
                case "1"://order up
                    var selectedIndex = this.PostProcessList.SelectedIndex;
                    if (selectedIndex == 0) return;

                    var current = this.PostProcessList.SelectedItem as ListBoxItem;
                    var upper = this.PostProcessList.Items[selectedIndex - 1] as ListBoxItem;

                    var temp = upper.Content.ToString();
                    upper.Content = current.Content;
                    current.Content = temp;

                    break;
                case "2"://order down
                    break;
            }
        }

        #endregion

        #region Methods

        internal void BindToAnimationEditor(object Obj)
        {
            if (Obj.GetType() == typeof(PersianCore.Meshes.Components.BoneData))
            {
                //if is Bone
                EditorShared.BindTogether(
                    Obj,
                    new PropertyPath("Visibility"),
                    this.ShowBone,
                    RadComboBox.SelectedIndexProperty,
                    BindingMode.TwoWay,
                    null);
            }
            else
            {
                //if is Model
                var mesh = Obj as PersianCore.Meshes.Mesh;
                this.SourceClips.ItemsSource = mesh.Animations;
                this.MixedData = mesh.MixerTracks;

                EditorShared.BindTogether(
                    Obj,
                    new PropertyPath("CurrentAnimationName"),
                    this.SourceClips,
                    RadComboBox.SelectedValueProperty,
                    BindingMode.OneWayToSource,
                    null);

                EditorShared.BindTogether(
                    Obj,
                    new PropertyPath("CurrentAnimationFrame"),
                    this.CurrentAnimationFrame,
                    TextBlock.TextProperty,
                    BindingMode.OneWay,
                    new FloatToStringConvertter());
            }
        }

        internal void ClearBinding()
        {
            BindingOperations.ClearAllBindings(this.ShowBone);
            BindingOperations.ClearAllBindings(this.SourceClips);
            this.SourceClips.ItemsSource = null;
        }

        private CmdToXna GetClickedRibbon(object sender)
        {
            string CommandName = sender.GetType().GetProperty("Name").GetValue(sender, new object[] { }).ToString();
            return ENUMS.StringToEnum<CmdToXna>(CommandName);
        }

        #endregion
    }
}
