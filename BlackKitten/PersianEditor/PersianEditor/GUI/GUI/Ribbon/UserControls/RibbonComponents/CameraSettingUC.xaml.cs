/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : CameraSettingUC.cs
 * File Description : The camera user control
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/30/2013
 * Comment          : 
 */

using PersianCore;
using System.Windows;
using System.Windows.Controls;

namespace PersianEditor.UserControls.RibbonComponents
{
    public partial class CameraSettingUC : UserControl
    {
        #region Fields
        
        #endregion

        #region Constructor

        public CameraSettingUC()
        {
            InitializeComponent();

            this.Loaded += delegate(object sender, RoutedEventArgs e)
            {
                //switch (CoreShared.Camera.GetActiveCamera())
                //{
                //    case CameraManager.ActiveCamera.Chase:

                //        break;

                //    case CameraManager.ActiveCamera.Free:

                //        BindingOperations.ClearAllBindings(this.ActiveCamCutScene);
                //        this.ActiveCamCutScene.ItemsSource = CoreShared.Camera.CutScenes;

                //        //EditorShared.BindTogether(
                //        //    CoreShared.Camera.freeCamera,
                //        //    new PropertyPath("CutScenes"),
                //        //        this.ActiveCamCutScene,
                //        //        RadComboBox.SelectedValueProperty,
                //        //        BindingMode.OneWayToSource,
                //        //        null);
                //        break;
                //}
            };
        }

        #endregion

        #region Events

        private void SliderValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (Persian.Camera != null)
            {
                var slider = sender as Slider;
                if (slider.Name.StartsWith("M"))
                {
                    //Movement
                    Persian.Camera.SetMouseTranslationSpeed((float)e.NewValue <= 10 ? (float)e.NewValue * 4 : (float)e.NewValue * 8);
                }
                else
                {
                    //Rotation
                    Persian.Camera.SetMouseRotationSpeed((float)e.NewValue / 100);
                }
            }
        }

        private void GoToPositionBtn_Click(object sender, RoutedEventArgs e)
        {
            if (Persian.Camera != null)
            {
                float X = System.Convert.ToSingle(CameraPosCom._1Txt.Value.ToString());
                float Y = System.Convert.ToSingle(CameraPosCom._2Txt.Value.ToString());
                float Z = System.Convert.ToSingle(CameraPosCom._3Txt.Value.ToString());
                Persian.Camera.Position = new Microsoft.Xna.Framework.Vector3(X, Y, Z);
            }
        }

        private void Pick4AssigningBtn_Click(object sender, RoutedEventArgs e)
        {
            //if pick operation is not busy so start picking
            //if (CoreShared.OnPickOperation == PickOperation.NOP)
            //{
            //    CoreShared.OnPickOperation = PickOperation.AttachCamera;
            //}
        }

        private void ActiveCamCombo_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (Persian.Camera != null)
            {
                if (this.ActiveCamCombo.SelectedIndex == 0)
                {
                    Persian.Camera.SetActiveCamera(CameraManager.ActiveCamera.Free);
                }
                else
                {
                    Persian.Camera.SetActiveCamera(CameraManager.ActiveCamera.Chase);
                }
            }
        }

        private void ResetCameraBtn_Click(object sender, RoutedEventArgs e)
        {
            if (Persian.Camera != null)
            {
                Persian.Camera.Reset();
            }
        }

        #endregion
    }
}
