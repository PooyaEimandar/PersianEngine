/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : ShellXna.cs
 * File Description : The shell of xna
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/25/2013
 * Comment          : 
 */

using Debugger;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using MSBuilder;
using PersianCore;
using PersianCore.Framework;
using System;
using System.Collections.Generic;
using System.Threading;

namespace PersianEditor.XNA
{
    public class ShellXna : Game
    {
        #region Fields & Properties

        IntPtr Handle;
        DebugToolsManager debugToolsManager;
        CoreGraphics coreGraphics;
        CoreFrameWork coreFrameWork;
        CoordinateAxis coordinateAxis;
        GridSystem gridSystem;
        ContentBuilder contentBuilder;
        TrianglePicker trianglePicker;
        bool AllowMultipleSelection;
        SelectingRectangle selectingRectangle;
        public static event EventHandler<CmdToGDIEventArgs> CmdToGDIEvent;

        #endregion

        #region Constructor/Destructor

        public ShellXna(IntPtr Handle)
        {
            //Initialize Graphics
            Persian.Initialize(this, false);
            Persian.GDeviceManager.PreparingDeviceSettings += new EventHandler<PreparingDeviceSettingsEventArgs>(PreparingDeviceSettings);

            Window.AllowUserResizing = false;
            this.Content.RootDirectory = "Content";
            this.IsMouseVisible = true;
            this.Handle = Handle;
            Mouse.WindowHandle = Handle;
            System.Windows.Forms.Control.FromHandle((this.Window.Handle)).VisibleChanged += new EventHandler(OnVisibleChanged);

            Windows.ShellWin.CmdToXnaEvent += new EventHandler<CmdToXnaEventArgs>(OnCmdToXna);
        }

        ~ShellXna()
        {
            Dispose(false);
        }

        #endregion

        #region Initialize

        protected override void Initialize()
        {
            InitializeFields();
            InitializeEngineContent();
            Logger.WriteLine(String.Format("{0} Initialized", this.GetType().Name));
            base.Initialize();
        }

        private void InitializeEngineContent()
        {
            //Create the contents for editor and engine
            Persian.EditorContent = Content;
            this.contentBuilder = new ContentBuilder(Persian.EngineContentDir, Persian.CurrentDir);
            Persian.EngineContent = new ContentManager(this.Services, Persian.EngineContentDir);
        }

        private void InitializeFields()
        {
            this.AllowMultipleSelection = false;
            this.debugToolsManager = new DebugToolsManager();
            this.coreGraphics = new CoreGraphics();
            this.coreFrameWork = new CoreFrameWork(false, EditorActionMethod);
            this.trianglePicker = new TrianglePicker();
            this.coordinateAxis = new CoordinateAxis(this.GraphicsDevice);
            this.selectingRectangle = new SelectingRectangle(this.GraphicsDevice, Color.White);
            Persian.Camera = new CameraManager(this.GraphicsDevice.Viewport, CameraManager.ActiveCamera.Free);
            this.gridSystem = new GridSystem(20);
        }

        #endregion

        #region Load/Unload

        protected override void LoadContent()
        {
            bool HR = false;

            //First load effects
            HR = BuildFX();
            if (!HR) { Persian.ShutDown = true; return; }
            
            HR = ShadersManager.Load(Content);
            if (!HR) { Persian.ShutDown = true; return; }
            
            this.coreFrameWork.Load(Content);
            var font = Fonts.GetFont("Times14");
            this.debugToolsManager.Load(GraphicsDevice, font);
            this.gridSystem.Load(GraphicsDevice, Content);
            base.LoadContent();
            Logger.WriteLine(String.Format("Content of {0} loaded", this.GetType().Name));
        }
        
        #endregion

        #region Build FX

        public bool BuildFX()
        {
            if (!BuildPrePassShaders(contentBuilder)) return false;
            //if (!BuildDeferredShaders(contentBuilder)) return false;

            return true;
        }

        /// <summary>
        /// Build th pre pass shaders
        /// </summary>
        /// <param name="contentBuilder"></param>
        /// <returns></returns>
        private bool BuildPrePassShaders(ContentBuilder contentBuilder)
        {
            string HResult = null;

            var sourceFXPath = string.Format(@"{0}{1}", Persian.ContentDir,
                @"\EditorBrowser\Shaders\PrePassRendering\MaterialFX.fx");

            var destinationFXPath = @"Shaders\PrePassRendering\";

            //StaticMaterialFX
            if (!System.IO.File.Exists(
                string.Format(@"{0}{1}StaticMaterialFX.xnb", Persian.EngineContent.RootDirectory, destinationFXPath)))
            {
                this.contentBuilder.ImportEffect(
                    sourceFXPath,
                    destinationFXPath + "StaticMaterialFX",
                    Persian.EngineContent.RootDirectory,
                    "TOON;",
                    true,
                    ref HResult);

                if (HResult != null)
                {
                    Logger.WriteError(HResult);
                    return false;
                }
            }

            //SkinnedMaterialFX
            if (!System.IO.File.Exists(
                string.Format(@"{0}{1}SkinnedMaterialFX.xnb", Persian.EngineContent.RootDirectory, destinationFXPath)))
            {
                this.contentBuilder.ImportEffect(
                    sourceFXPath,
                    destinationFXPath + "SkinnedMaterialFX", 
                    Persian.EngineContent.RootDirectory,
                    "TOON;SKINNED;",
                    true,
                    ref HResult);

                if (HResult != null)
                {
                    Logger.WriteError(HResult);
                    return false;
                }
            }

            //StaticAlphaMaterialEffect
            if (!System.IO.File.Exists(
                string.Format(@"{0}{1}StaticAlphaMaterialEffect.xnb", Persian.EngineContent.RootDirectory, destinationFXPath)))
            {
                this.contentBuilder.ImportEffect(
                    sourceFXPath,
                    destinationFXPath + "StaticAlphaMaterialFX", 
                    Persian.EngineContent.RootDirectory,
                    "TOON;ALPHA_MASK;",
                    true,
                    ref HResult);

                if (HResult != null)
                {
                    Logger.WriteError(HResult);
                    return false;
                }
            }

            //SkinnedAlphaMaterialEffect
            if (!System.IO.File.Exists(
                string.Format(@"{0}{1}SkinnedAlphaMaterialEffect.xnb", Persian.EngineContent.RootDirectory, destinationFXPath)))
            {
                this.contentBuilder.ImportEffect(
                    sourceFXPath,
                    destinationFXPath + "SkinnedAlphaMaterialFX",
                    Persian.EngineContent.RootDirectory,
                    "TOON;ALPHA_MASK;SKINNED;",
                    true,
                    ref HResult);

                if (HResult != null)
                {
                    Logger.WriteError(HResult);
                    return false;
                }
            }


            return true;
        }
        
        private bool BuildDeferredShaders(ContentBuilder contentBuilder)
        {
            string HResult = null;

            //GBufferFX needs for each subMesh
            var sourceFXPath = string.Format(@"{0}{1}", Persian.ContentDir,
                @"\EditorBrowser\Shaders\DeferredRendering\GBufferFX.fx");

            var destinationFXPath = @"Shaders\DeferredRendering\";

            if (!System.IO.File.Exists(
                string.Format(@"{0}{1}StaticGBufferFX.xnb", Persian.EngineContent.RootDirectory, destinationFXPath)))
            {
                this.contentBuilder.ImportEffect(
                    sourceFXPath,
                    destinationFXPath + "StaticGBufferFX",
                    Persian.EngineContent.RootDirectory,
                    string.Empty,
                    true,
                    ref HResult);

                if (HResult != null)
                {
                    Logger.WriteError(HResult);
                    return false;
                }
            }

            if (!System.IO.File.Exists(
                string.Format(@"{0}{1}SkinnedGBufferFX.xnb", Persian.EngineContent.RootDirectory, destinationFXPath)))
            {
                this.contentBuilder.ImportEffect(
                    sourceFXPath,
                    destinationFXPath + "SkinnedGBufferFX",
                    Persian.EngineContent.RootDirectory,
                    "SKINNED;",
                    true,
                    ref HResult);

                if (HResult != null)
                {
                    Logger.WriteError(HResult);
                    return false;
                }
            }
           
            return true;
        }

        #endregion

        #region Events

        private void OnCmdToXna(object sender, CmdToXnaEventArgs e)
        {
            switch (e.Header)
            {
                case ToXnaHeader.Setting:
                    CmdFromSetting(e);
                    break;
                case ToXnaHeader.AppMenu:
                    CmdFromAppMenu(e);
                    break;
                case ToXnaHeader.Home:
                    CmdFromHome(e);
                    break;
                case ToXnaHeader.Animation:
                    CmdFromAnimation(sender, e);
                    break;
                case ToXnaHeader.Build:
                    CmdFromBuild(e);
                    break;
            }
        }

        private void CmdFromSetting(CmdToXnaEventArgs e)
        {
            switch (e.Cmd)
            {
                case CmdToXna.SetPresentation:
                    if (e.Cmd == CmdToXna.SetPresentation)
                    {
                        int[] data = (int[])e.Data;
                        Persian.GDeviceManager.PreferredBackBufferWidth = data[0];
                        Persian.GDeviceManager.PreferredBackBufferHeight = data[1];
                        Persian.GDeviceManager.ApplyChanges();
                    }
                    break;
            }
        }

        private void CmdFromAppMenu(CmdToXnaEventArgs e)
        {
            string HResult = null;
            switch (e.Cmd)
            {
                case CmdToXna.ImportPAAnimatedCamera:
                    #region Import PA Animated Camera

                    if (Persian.CutScenes.Count == 0)
                    {
                        Persian.ActiveCutScene = 0;
                        Persian.CutScenes.Add(new PersianCore.Framework.Animation.CutScene());
                    }
                    var pData = (string[])e.Data;

                    Persian.CutScenes[Persian.ActiveCutScene].AbsoluteAnimatedCameraPath = pData[0];

                    //Copy to content
                    var contentPath = Persian.EngineContentDir + @"\CutScenes\" + System.IO.Path.GetFileName(pData[0]);
                    HResult = IOHelper.CopyFile(pData[0], contentPath, true);
                    if (HResult != null)
                    {
                        Logger.WriteLine("Error on copy animated camera to content");
                    }

                    #endregion
                    break;
                case CmdToXna.Import:
                    #region Import Model

                    var data = (string[])e.Data;
                    string Name = System.IO.Path.GetFileNameWithoutExtension(data[0]);
                    Model model = null;
                    var DiffuseMaps = this.contentBuilder.ImportModel(
                        data[0], 
                        Name, 
                        true, 
                        data[1], 
                        Persian.EngineContent, 
                        ref model, 
                        ref HResult);

                    if (HResult != null)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.Add, HResult));
                        return;
                    }
                    LoadModel(model, Name, DiffuseMaps);

                    #endregion
                    break;
                case CmdToXna.ImportTexture:
                    #region Import Texture

                    data = (string[])e.Data;
                    var texture  = this.contentBuilder.ImportTexture2DFromStream(GraphicsDevice, data[0],
                        data[1] , Content, ref HResult);

                    if (HResult != null)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.Add, HResult));
                        return;
                    }
                    ObjectsManager.SelectedMeshes[0].OnChangingTexture(texture);
                    //LoadTexture(model, Name);

                    #endregion
                    break;
                case CmdToXna.NewScene:
                case CmdToXna.NewProject:
                    SceneManager.New(ref this.coreFrameWork);
                    break;
                case CmdToXna.SaveScene:
                    if (SceneManager.ProcessSaving(e.Data.ToString(), this.coreFrameWork, ref HResult) == null)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.Add, HResult));
                    }
                    break;
                case CmdToXna.OpenScene:
                    OnProcessOpenning(e.Data.ToString(), false, false);
                    break;
                case CmdToXna.MergeScene:
                    OnProcessOpenning(e.Data.ToString(), false, true);
                    break;
                case CmdToXna.OpenProject:
                    OnProcessOpenning(e.Data.ToString(), true, false);
                    break;
            }
        }

        private void LoadModel(Model model, string Name, Dictionary<string, List<string>> DiffuseMaps)
        {
            string HResult = null;
            var mesh = new PersianCore.Meshes.Mesh()
            {
                ModelPath = Name + ".xnb",
                DiffuseMaps = DiffuseMaps
            };
            HResult = mesh.Load(model);
            if (HResult != null)
            {
                Windows.ShellWin.Notify("Mesh", new NotifyEventArgs(NotifyType.Error, NotifyAction.ClearThenAdd, HResult));
                return;
            }
            this.coreFrameWork.ObjectsManager.Meshes.Add(mesh);
            SetPropertyGrid(mesh);
            EditorShared.RefreshBindingTags = true;
        }

        private void OnProcessOpenning(string path, bool isProject, bool isMerging)
        {
            Windows.ShellWin.Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.Clear, string.Empty));

            Persian.RuntimeLoadings.Enqueue(
                (param) =>
                {
                    var HResult = isMerging ? SceneManager.Merge(path, ref this.coreFrameWork) :
                         SceneManager.Open(path, ref this.coreFrameWork);
                    if (HResult != null)
                    {
                        Windows.ShellWin.Notify(this,
                            new NotifyEventArgs(
                                NotifyType.Error,
                                NotifyAction.ClearThenAdd,
                                HResult));
                        return HResult;
                    }

                    #region Send Command to Gui for updating render surface

                    //FocusOnRender
                    CmdToGDIEvent(this, new CmdToGDIEventArgs(CmdToGDI.FocusOnRender, null));

                    //Update binding of CutScene
                    CmdToGDIEvent(this, new CmdToGDIEventArgs(CmdToGDI.BindToCutScene, null));
                    if (isProject)
                    {
                        //if openning project then must refresh content and all bindings
                        CmdToGDIEvent(this, new CmdToGDIEventArgs(CmdToGDI.RefreshContent, null));
                    }

                    #endregion

                    return HResult;
                });
        }

        private void CmdFromHome(CmdToXnaEventArgs e)
        {
            switch (e.Cmd)
            {
                case CmdToXna.ShowAllBoundingBoxes:
                    for (int i = 0; i < this.coreFrameWork.ObjectsManager.Meshes.Count; ++i)
                    {
                        if (!this.coreFrameWork.ObjectsManager.Meshes[i].ShowBoundings)
                        {
                            this.coreFrameWork.ObjectsManager.Meshes[i].ShowBoundings = true;
                        }
                    }
                    break;
                case CmdToXna.HideAllBoundingBoxes:
                    for (int i = 0; i < this.coreFrameWork.ObjectsManager.Meshes.Count; ++i)
                    {
                        if (this.coreFrameWork.ObjectsManager.Meshes[i].ShowBoundings)
                        {
                            this.coreFrameWork.ObjectsManager.Meshes[i].ShowBoundings = false;
                        }
                    }
                    break;
                case CmdToXna.ResetBoundingBox:
                    if (ObjectsManager.SelectedMeshes.Count == 0)
                    {
                        Windows.ShellWin.Notify(this,
                            new NotifyEventArgs(
                                NotifyType.Warning,
                                NotifyAction.Add,
                                "You must select at least one object as source"));
                    }

                    for (int i = 0; i < ObjectsManager.SelectedMeshes.Count; ++i)
                    {
                        ObjectsManager.SelectedMeshes[i].ResetBoundingBox();
                    }
                    break;
                case CmdToXna.SetMaxBoundingBox:
                    if (ObjectsManager.SelectedMeshes.Count == 0)
                    {
                        Windows.ShellWin.Notify(this,
                            new NotifyEventArgs(
                                NotifyType.Error,
                                NotifyAction.Add,
                                "You must select at least one object as source"));
                    }
                    
                    for (int i = 0; i < ObjectsManager.SelectedMeshes.Count; ++i)
                    {
                        ObjectsManager.SelectedMeshes[i].SetMaxBoundingBox();
                    }
                    break;
                case CmdToXna.Explorer:
                    var explorer = new PersianEditor.Windows.ExplorerWin(this.coreFrameWork)
                    {
                        Width = 300,
                        Height = 500
                    };
                    //Bind the selected item to propertyGrid
                    explorer.OnSelectingObject += delegate(object S, EventArgs E)
                    {
                        SetPropertyGrid(S);
                    };
                    explorer.Show();
                    break;

                case CmdToXna.Duplicate:
                    System.Reflection.MethodInfo method = e.Data.GetType().GetMethod("Clone");
                    if (method != null)
                    {
                        object clone = method.Invoke(e.Data, new object[] { });
                        System.Reflection.MethodInfo methodInfo = clone.GetType().GetMethod("Load");
                        if (methodInfo != null)
                        {
                            methodInfo.Invoke(clone, new object[] { this.GraphicsDevice, null });
                            this.coreFrameWork.ObjectsManager.Meshes.Add(clone as PersianCore.Meshes.Mesh);
                            this.SetPropertyGrid(clone);
                            EditorShared.RefreshBindingTags = true;
                        }
                    }
                    break;
                case CmdToXna.SelectAll:
                    ClearSelection();
                    this.coreFrameWork.SelectAllMeshes(false);
                    break;
                case CmdToXna.InvertSelection:
                    ClearSelection();
                    this.coreFrameWork.SelectAllMeshes(true);
                    break;
                case CmdToXna.Delete:
                    DeleteMesh();
                    break;
                case CmdToXna.PickSourceObjectForBind:
                    if (ObjectsManager.SelectedMeshes.Count == 1)
                    {
                        CoreShared.ObjectHolder = ObjectsManager.SelectedMeshes[0];
                        //Now Clear Selected Meshes for another picking
                        ObjectsManager.SelectedMeshes.Clear();
                        SetPropertyGrid(null);
                    }
                    else
                    {
                        Windows.ShellWin.Notify(this, 
                            new NotifyEventArgs(
                                NotifyType.Error, 
                                NotifyAction.Add, 
                                "You must select only one object as source"));
                    }
                    break;
                case CmdToXna.PickToBindObject:
                    if (ObjectsManager.SelectedMeshes.Count == 1)
                    {
                        if (CoreShared.ObjectHolder == null)
                        {
                            Windows.ShellWin.Notify(this,
                                new NotifyEventArgs(
                                    NotifyType.Error,
                                    NotifyAction.Add,
                                    "First select source"));
                            return;
                        }

                        var b = CoreShared.ObjectHolder as IBinding;
                        b.EnableBinding = false;
                        b.BindTo = ObjectsManager.SelectedMeshes[0];
                    }
                    else
                    {
                        Windows.ShellWin.Notify(this,
                            new NotifyEventArgs(
                                NotifyType.Error,
                                NotifyAction.Add,
                                "You must select only one object for apply binding"));
                    }
                    break;
                case CmdToXna.ApplyBindChanges:
                    if (CoreShared.ObjectHolder == null) return;

                    bool error = false;

                    var ib = CoreShared.ObjectHolder as IBinding;
                    ib.EnableBinding = true;
                    
                    var datas = e.Data as string[];
                    if (datas.Length == 1)
                    {
                        //Bind to object
                        ib.BindProperty = datas[0].ToString();
                    }
                    else
                    {
                        //Bind to bone
                        ib.BindToBoneName = datas[0].ToString();
                    }

                    if (error) return;

                    CoreShared.ObjectHolder = null;
                    break;
                case CmdToXna.RemoveBind:
                    if (CoreShared.ObjectHolder != null)
                    {
                        var b = (CoreShared.ObjectHolder as IBinding);
                        b.RemoveBinding();
                        CoreShared.ObjectHolder = null;
                    }
                    if (ObjectsManager.SelectedMeshes.Count == 1)
                    {
                        //Remove all binds
                        if (ObjectsManager.SelectedMeshes[0] is IBinding)
                        {
                            ObjectsManager.SelectedMeshes[0].RemoveBinding();
                        }
                    }
                    else
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Error, 
                            NotifyAction.Add, 
                            "You must select only one object for attaching"));
                    }
                    break;
                //case CmdToXna.AttachWeapon:
                //    if (ObjectsManager.SelectedMeshes.Count == 1)
                //    {
                //        CoreShared.ObjectHolder = ObjectsManager.SelectedMeshes[0];
                //        //Now Clear Selected Meshes for another picking
                //        ObjectsManager.SelectedMeshes.Clear();
                //        CoreShared.OnPickOperation = PickOperation.AttachWeapon;
                //    }
                //    else
                //    {
                //        Windows.ShellWin.Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.Add, "You must select one object for attaching"));
                //    }
                //    break;
                //case CmdToXna.AttachWheelToVehicle:
                //    if (ObjectsManager.SelectedMeshes.Count == 1)
                //    {
                //        CoreShared.ObjectHolder = ObjectsManager.SelectedMeshes[0];
                //        //Now Clear Selected Meshes for another picking
                //        ObjectsManager.SelectedMeshes.Clear();
                //        CoreShared.OnPickOperation = PickOperation.AttachWheelToVehicle;
                //    }
                //    else
                //    {
                //        Windows.ShellWin.Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.Add, "You must select one object for attaching"));
                //    }
                //    break;
            }
        }

        private void CmdFromAnimation(object sender, CmdToXnaEventArgs e)
        {
            switch (e.Cmd)
            {
                case CmdToXna.PlayCutScene:
                    var eData = (int[])e.Data;
                    //First check do we have animated camera or not?
                    if (eData[0] == -1)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Warning,
                            NotifyAction.Add,
                            "We need a CutScene at least!"));
                        return;
                    }
                    if(eData[1] == -1)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Warning,
                            NotifyAction.Add,
                            "Import animated camera!"));
                        return;
                    }

                    var cs = Persian.CutScenes[eData[0]];
                    cs.Play();
                    SetPropertyGrid(cs);
                    //Persian.Camera.ForceUpdate = true;
                    
                    break;

                case CmdToXna.PauseCutScene:
                    var pData = (int[])e.Data;
                    //First check do we have animated camera or not?
                    if (pData[0] == -1)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Warning,
                            NotifyAction.Add,
                            "We need a CutScene at least!"));
                        return;
                    }
                    if (pData[1] == -1)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Warning,
                            NotifyAction.Add,
                            "Import animated camera!"));
                        return;
                    }

                    var pcs = Persian.CutScenes[pData[0]];
                    pcs.Pause();
                    SetPropertyGrid(pcs);
                    //Persian.Camera.ForceUpdate = true;

                    break;

                case CmdToXna.StopCutScene:
                    var sData = (int[])e.Data;
                    //First check do we have animated camera or not?
                    if (sData[0] == -1)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Warning,
                            NotifyAction.Add,
                            "We need a CutScene at least!"));
                        return;
                    }
                    if (sData[1] == -1)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Warning,
                            NotifyAction.Add,
                            "Import animated camera!"));
                        return;
                    }

                    var scs = Persian.CutScenes[sData[0]];
                    scs.Stop();
                    SetPropertyGrid(scs);
                    //Persian.Camera.ForceUpdate = true;

                    break;

                case CmdToXna.CreateCutScene:
                    Persian.CutScenes.Add(new PersianCore.Framework.Animation.CutScene()
                        {
                            Name = Persian.GetUniqueName("C_")
                        });
                    Persian.ActiveCutScene = 0;
                    break;

                case CmdToXna.AddRemoveToCurrentCutScene:
                    //if (Persian.CutScenes.Count == 0)
                    //{
                    //    Windows.ShellWin.Notify(this, new NotifyEventArgs(
                    //        NotifyType.Warning,
                    //        NotifyAction.Add,
                    //        "We need a CutScene at least!"));
                    //    return;
                    //}
                    if (ObjectsManager.SelectedMeshes.Count == 0)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Warning,
                            NotifyAction.Add,
                            "Select a model at least!"));
                        return;
                    }

                    var aData = (int[])e.Data;
                    //First check do we have animated camera or not?
                    if (aData[0] == -1)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Warning,
                            NotifyAction.Add,
                            "We need a CutScene at least!"));
                        return;
                    }

                    Persian.ActiveCutScene = aData[0];
                    var selectedCutScene = Persian.CutScenes[Persian.ActiveCutScene];
                    foreach (var mesh in ObjectsManager.SelectedMeshes)
                    {
                        selectedCutScene.AddAnimatedMesh(mesh);
                    }
                    break;

                case CmdToXna.OpenMixer:
                    if (ObjectsManager.SelectedMeshes.Count == 0)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(
                            NotifyType.Warning,
                            NotifyAction.Add,
                            "Select a model at least!"));
                        return;
                    }
                    ObjectsManager.SelectedMeshes[0].AddToMixer((MixerInfo)e.Data);
                    break;

                case CmdToXna.ApplyInherit:
                    foreach (var bone in ObjectsManager.SelectedBones)
                    {
                        bone.BoneInherit = (int)e.Data;
                    }
                    break;

                case CmdToXna.HiddenBone:
                    foreach (var bone in ObjectsManager.SelectedBones)
                    {
                        bone.Visibility = (int)e.Data;
                    }
                    break;

                case CmdToXna.ShowBone:
                    foreach (var bone in ObjectsManager.SelectedBones)
                    {
                        bone.Visibility = (int)e.Data;
                    }
                    break;

                case CmdToXna.PlayAnimation:
                    foreach (var mesh in ObjectsManager.SelectedMeshes)
                    {
                        SetAnimationState(mesh, null, null);
                    }
                    break;

                case CmdToXna.PauseAnimation:
                    foreach (var mesh in ObjectsManager.SelectedMeshes)
                    {
                        SetAnimationState(mesh, false, null);
                    }
                    break;

                case CmdToXna.StopAnimation:
                    foreach (var mesh in ObjectsManager.SelectedMeshes)
                    {
                        ResetAnimation(mesh);
                    }
                    break;

                case CmdToXna.PlayNextFrame:
                    foreach (var mesh in ObjectsManager.SelectedMeshes)
                    {
                        SetAnimationState(mesh, true, false);
                    }
                    break;

                case CmdToXna.PlayPreviousFrame:
                    foreach (var mesh in ObjectsManager.SelectedMeshes)
                    {
                        SetAnimationState(mesh, true, true);
                    }
                    break;

                case CmdToXna.PlayInverse:
                    foreach (var mesh in ObjectsManager.SelectedMeshes)
                    {
                        SetAnimationState(mesh, null, !mesh.InverseAnimation);
                    }
                    break;
                case CmdToXna.DefaultPose:
                    foreach (var mesh in ObjectsManager.SelectedMeshes)
                    {
                        if (mesh.IsSkinned)
                        {
                            mesh.DefaultPose = !mesh.DefaultPose;
                        }
                    }
                    break;

                case CmdToXna.HiddenAllBones:
                    foreach (var iter in coreFrameWork.ObjectsManager.Meshes)
                    {
                        if (iter.IsSkinned)
                        {
                            iter.BonesVisibility = false;
                            foreach (var bone in iter.BonesData)
                            {
                                bone.Visibility = 0;
                            }
                        }
                    }
                    break;

                case CmdToXna.ShowAllBones:
                    foreach (var iter in coreFrameWork.ObjectsManager.Meshes)
                    {
                        if (iter.IsSkinned)
                        {
                            iter.BonesVisibility = true;
                            foreach (var bone in iter.BonesData)
                            {
                                bone.Visibility = 1;
                            }
                        }
                    }
                    break;

                case CmdToXna.SyncGamePad:
                    break;

                case CmdToXna.RemoveSwapped:
                    foreach (var mesh in ObjectsManager.SelectedMeshes)
                    {
                        mesh.RemoveAllSwapping();
                    }
                    break;

                case CmdToXna.SwapBones:
                    if (ObjectsManager.SelectedBones.Count != 2 ||
                        (ObjectsManager.SelectedBones.Count == 2 &&
                        ObjectsManager.SelectedBones[0].Parent != ObjectsManager.SelectedBones[1].Parent))
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(NotifyType.Warning, NotifyAction.Add, "Two bones must be selected for swaping from same mesh"));
                        return;
                    }
                    SwapAllTransform();
                    break;
            }
        }

        private void SwapAllTransform()
        {
            PersianCore.Meshes.Components.BoneData b0 = ObjectsManager.SelectedBones[0];
            PersianCore.Meshes.Components.BoneData b1 = ObjectsManager.SelectedBones[1];

            PersianCore.Meshes.Mesh mesh = null;
            //Get mesh by GUID
            foreach (var iter in this.coreFrameWork.ObjectsManager.Meshes)
            {
                if (b0.Parent == iter.GUID)
                {
                    mesh = iter;
                    break;
                }
            }

            if (mesh != null)
            {
                mesh.SetSwapping(b0.Index, b1.Index);
            }
        }

        private void SwapPositions()
        {
            var Swap = ObjectsManager.SelectedBones[0].Position;
            ObjectsManager.SelectedBones[0].Position = ObjectsManager.SelectedBones[1].Position;
            ObjectsManager.SelectedBones[1].Position = Swap;
        }

        private void SwapRotations()
        {
            Vector3 Swap = ObjectsManager.SelectedBones[0].Rotation;
            ObjectsManager.SelectedBones[0].Rotation = ObjectsManager.SelectedBones[1].Rotation;
            ObjectsManager.SelectedBones[1].Rotation = Swap;
        }

        private void SetAnimationState(PersianCore.Meshes.Mesh mesh, bool? Value, bool? isInverse)
        {
            if (isInverse != null)
            {
                bool Inverse = (bool)isInverse;
                if (mesh.InverseAnimation != Inverse)
                {
                    mesh.InverseAnimation = Inverse;
                }
            }
            mesh.PlayAnimation(Value);
        }

        private void ResetAnimation(PersianCore.Meshes.Mesh mesh)
        {
            mesh.ResetAnimation();
        }

        private void CmdFromBuild(CmdToXnaEventArgs e)
        {
            string HResult = null;
            switch (e.Cmd)
            {
                case CmdToXna.Shadows:
                    this.coreFrameWork.RenderManager.EnableShadow = !this.coreFrameWork.RenderManager.EnableShadow;
                    break;
                case CmdToXna.PlayScene:
                    HResult = SceneManager.Play(this.coreFrameWork);
                    if (HResult != null)
                    {
                        Windows.ShellWin.Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.Add,
                            string.Format("Could not build scene because of {0} : ", HResult)));
                    }
                    break;
                case CmdToXna.AddLight:
                    #region Add light and set it to propertyGrid

                    var light = new PersianCore.Graphics.Lights.Light(
                         PersianCore.Graphics.Lights.LightType.Spot,
                         new Vector3(0, 10, 0),
                         new Vector3(1.0f, 10.0f, 10.0f),
                         Color.Blue,
                         1.0f);

                    light.Radius = 40;
                    light.Intensity = 3;

                    this.coreFrameWork.AddLight(light);
                    SetPropertyGrid(light);

                    #endregion
                    break;

                case CmdToXna.AddParticleSyS:
                    #region Add Default Particle and set it to propertyGrid

                    var DefaultParticle = new PersianCore.Graphics.Particles.ParticleSystem(@"Settings\Particles\Fire");
                    HResult = this.coreFrameWork.ObjectsManager.ParticlesManager.AddParticle(DefaultParticle);
                    if (HResult != null)
                    {
                        Logger.WriteError(HResult);
                        return;
                    }
                    SetPropertyGrid(DefaultParticle);

                    #endregion
                    break;

                case CmdToXna.LoadTextureParticleSyS:
                    {
                        if (coreFrameWork.ObjectsManager.ParticlesManager.ParticleSystems.Count == 0)
                        {
                            
                            return;
                        }
                        using (var ofd = new System.Windows.Forms.OpenFileDialog())
                        {
                            ofd.InitialDirectory = Persian.ContentDir;
                            ofd.Title = "Load Texture";
                            ofd.Multiselect = false;

                            ofd.Filter = "Load Textures (*.jpg;*.png;*.tga;*.dds)|*.bmp;*.jpg;*.png;*.tga;*.dds|" +
                                        "Texture Files (*.bmp;*.jpg;*.png;*.tga;*.dds)|*.bmp;*.jpg;*.png;*.tga;*.dds|" +
                                        "All Files (*.*)|*.*";

                            if (ofd.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                            {
                                Texture2D texture2D = null;
                                var path = ofd.FileNames[0];
                                var exten = System.IO.Path.GetExtension(path);
                                switch (exten)
                                {
                                    case ".dds":
                                        AssetsManager.DDSTextureFromFile(Persian.GDevice, path, ref texture2D);
                                        break;
                                    case ".bmp":
                                    case ".jpg":
                                    case ".png":
                                        AssetsManager.Texture2DFromFile(Persian.GDevice, path, ref texture2D);
                                        break;
                                }

                                if (texture2D != null)
                                {
                                    coreFrameWork.ObjectsManager.ParticlesManager.ParticleSystems[0].ChangeTexture(texture2D);
                                }
                            }
                        }
                    }
                    break;
                case CmdToXna.ChangePostProcess:
                    #region Change type of post process

                    if (e.Data == null)
                    {
                        //Disable postProcess
                        this.coreFrameWork.Post.Enable = false;
                    }
                    else if (e.Data is PersianCore.Graphics.PostProcessing.PostProcessType[])
                    {
                        //Enable postProcess
                        this.coreFrameWork.Post.Enable = true;
                        this.coreFrameWork.Post.ClearFlags(false);
                        var flags = e.Data as PersianCore.Graphics.PostProcessing.PostProcessType[];
                        for (int i = 0; i < flags.Length; ++i)
                        {
                            this.coreFrameWork.Post.AddFlags(flags[i]);
                        }
                    }
                    else
                    {
                        //Wanna remove just one flag
                        var flag = (PersianCore.Graphics.PostProcessing.PostProcessType)e.Data;
                        this.coreFrameWork.Post.RemoveFlags(flag, false);
                    }

                    #endregion
                    break;

                case CmdToXna.ShadowRes:
                    this.coreFrameWork.RenderManager.ShadowResolution = (int)e.Data;
                    break;
            }
        }

        private void PreparingDeviceSettings(object sender, PreparingDeviceSettingsEventArgs e)
        {
            e.GraphicsDeviceInformation.PresentationParameters.DeviceWindowHandle = Handle;
            Persian.HalfScreenSize = new Vector2(
                    0.5f / (float)e.GraphicsDeviceInformation.PresentationParameters.BackBufferWidth,
                    0.5f / (float)e.GraphicsDeviceInformation.PresentationParameters.BackBufferHeight);
            if (this.coreFrameWork != null)
            {
                this.coreFrameWork.OnPreparingDevice(e);
            }
        }

        private void OnVisibleChanged(object sender, EventArgs e)
        {
            System.Windows.Forms.Control ctrl = sender as System.Windows.Forms.Control;
            if (ctrl.Visible)
            {
                ctrl.Visible = false;
            }
        }

        #endregion

        #region Methods

        public void DeleteMesh()
        {
            if (ObjectsManager.SelectedMeshes.Count != 0)
            {
                SetPropertyGrid(null);
            }
            while (ObjectsManager.SelectedMeshes.Count != 0)
            {
                var mesh = ObjectsManager.SelectedMeshes[0];
                ObjectsManager.SelectedMeshes.Remove(mesh);
                this.coreFrameWork.ObjectsManager.Meshes.Remove(mesh);
            }
        }

        private void SetPropertyGrid(object Obj)
        {
            CmdToGDIEvent(this, new CmdToGDIEventArgs(CmdToGDI.SetProperty, Obj));
        }

        #endregion

        #region Update

        protected override void Update(GameTime gameTime)
        {
            Persian.gameTime = gameTime;
            
            if (Persian.ShutDown)
            {
                this.Dispose(true);
                this.Exit();
                return;
            }

            Persian.Camera.BeginUpdate4Editor();
            
#if DEBUG
            UsageReporter.debugInfo.Reset();
            this.debugToolsManager.StartFrame();
            {
                this.debugToolsManager.BeginMark(gameTime, UpdateAction, "Update", Color.Blue);
            }
#else
            UpdateAction(gameTime);
#endif
        }

        private void UpdateAction(object input)
        {
            var gameTime = input as GameTime;

            UsageReporter.debugInfo.Reset();

            #region Update Physic

            //float step = (float)gameTime.ElapsedGameTime.TotalSeconds;
            //if (step > 1.0f / 60.0f) step = 1.0f / 60.0f;//60 was 100
            //CoreShared.physicWorld.Step(step, true);

            #endregion

            #region Refreshing Bindings of all meshes with treeView

            if (EditorShared.RefreshBindingTags)
            {
                EditorShared.RefreshBindingTags = false;
                List<object> ObjList = new List<object>();
                foreach (var mesh in coreFrameWork.ObjectsManager.Meshes)
                {
                    if (!String.IsNullOrEmpty(mesh.ModelPath))
                    {
                        ObjList.Add(mesh);
                    }
                }
                if (ObjList.Count != 0)
                {
                    CmdToGDIEvent(this, new CmdToGDIEventArgs(CmdToGDI.BindToTreeTag, ObjList));
                }
            }

            #endregion

            if (EditorShared.XnaFetchIO)
            {
                CheckInputCommand(gameTime);
            }

            UsageReporter.debugInfo.Add(this.trianglePicker.GetStatus());
            this.coreFrameWork.Update(gameTime);
            base.Update(gameTime);
        }

        private void CheckInputCommand(GameTime gameTime)
        {
            InputManager.Update(GraphicsDevice.Viewport);
            Persian.Camera.SetMouseScrollWheel(InputManager.ScrollMouse);
            if (!CheckComboKeys())
            {
                if (!CheckSingleKeys(gameTime))
                {
                    this.AllowMultipleSelection = false;
                }
            }
        }

        private void Check4SelectingObjects()
        {
            if (this.coreFrameWork.ObjectsManager.Meshes.Count != 0)
            {
                ClearSelection();
                this.trianglePicker.Update(this.coreFrameWork, GraphicsDevice.Viewport, AllowMultipleSelection);

                #region Finaly Set Property Grid

                if (ObjectsManager.SelectedBones.Count > 0)
                {
                    #region Bind Bone to Ribbon's Components

                    if (ObjectsManager.SelectedBones.Count == 1)
                    {
                        this.SetPropertyGrid(ObjectsManager.SelectedBones[0]);
                        //Rise Event For Binding
                        CmdToGDIEvent(this, new CmdToGDIEventArgs(CmdToGDI.BindToAnimationEditor, ObjectsManager.SelectedBones[0]));
                    }
                    else
                    {
                        this.SetPropertyGrid(null);
                    }

                    #endregion
                }
                else if (ObjectsManager.SelectedMeshes.Count > 0)
                {
                    if (ObjectsManager.SelectedMeshes.Count == 1)
                    {
                        #region Bind Mesh to Ribbon's Component

                        this.SetPropertyGrid(ObjectsManager.SelectedMeshes[0]);
                        if (ObjectsManager.SelectedMeshes[0].IsSkinned)
                        {
                            //Rise Event For Binding Animation Speed
                            CmdToGDIEvent(this, new CmdToGDIEventArgs(CmdToGDI.BindToAnimationEditor, ObjectsManager.SelectedMeshes[0]));
                        }

                        #endregion
                    }
                    else
                    {
                        this.SetPropertyGrid(null);
                    }
                }
                else if (ObjectsManager.SelectedParticles.Count > 0)
                {
                    this.SetPropertyGrid(ObjectsManager.SelectedParticles[0]);
                }
                else
                {
                    //means user did not click on object
                    this.SetPropertyGrid(null);
                }

                #endregion
            }
        }

        private void ClearSelection()
        {
            CmdToGDIEvent(this, new CmdToGDIEventArgs(CmdToGDI.RemoveAllAnimationEditorBindings, new object[] { }));
            ObjectsManager.SelectedMeshes.Clear();
            ObjectsManager.SelectedBones.Clear();
        }

        private void DoDragDropObjects()
        {
            if (ObjectsManager.SelectedMeshes.Count == 0)
            {
                return;
            }
            var Transform = InputManager.GetMouseTransform(PMathHelper.CreateRotationMatrix(Persian.Camera.freeCamera.Angles));
            foreach (var mesh in ObjectsManager.SelectedMeshes)
            {
                mesh.Position += Transform;
            }
        }

        private void DoRotateObjects()
        {
            if (ObjectsManager.SelectedMeshes.Count == 0)
            {
                return;
            }
            var Transform = InputManager.GetMouseTransform(PMathHelper.CreateRotationMatrix(Persian.Camera.freeCamera.Angles));
            foreach (var mesh in ObjectsManager.SelectedMeshes)
            {
                mesh.Rotation += Transform;
            }
        }

        private void DoScaleObjects()
        {
            if (ObjectsManager.SelectedMeshes.Count == 0 || InputManager.ScrollMouse == 0)
            {
                return;
            }
            foreach (var mesh in ObjectsManager.SelectedMeshes)
            {
                float AddScale = InputManager.ScrollMouse / InputManager.Debunce;
                if (AddScale > 0)
                {
                    mesh.Scale *= AddScale;
                }
                else
                {
                    mesh.Scale /= -AddScale;
                }
            }
        }

        private bool CheckSingleKeys(GameTime gameTime)
        {
            bool isPressed = false;

            if (!InputManager.IsMiddleMouseBtnHolded() && this.selectingRectangle.state == SelectingRectangle.State.Resizing)
            {
                //if selection rectangle is in resizing mode so end it and get selections objects
                this.selectingRectangle.End(this.GraphicsDevice.Viewport, this.coreFrameWork.ObjectsManager);
            }
            else if (InputManager.IsKeyHolded(Keys.S))
            {
                //Update Camera
                Persian.Camera.Update4Editor(gameTime);
                isPressed = true;
            }
            else if (InputManager.IsMiddleMouseBtnHolded())
            {
                #region Start or Keeping resizing rectangle
                if (this.selectingRectangle.state == SelectingRectangle.State.NOP)
                {
                    this.selectingRectangle.Begin(InputManager.Current.MousePosition);
                }
                else
                {
                    //selectingRectangle is in resizing mode so keep it
                    this.selectingRectangle.Resize(InputManager.Current.MousePosition, this.GraphicsDevice.Viewport);
                }
                #endregion
                isPressed = true;
            }
            else if (InputManager.IsLeftMouseBtnHolded())
            {
                //Do simple drag drop
                DoDragDropObjects();
                isPressed = true;
            }
            else if (InputManager.IsRightMouseBtnHolded())
            {
                DoRotateObjects();
                isPressed = true;
            }
            else if (InputManager.MiddleMouseBtnHolded())
            {
                DoScaleObjects();
                isPressed = true;
            }
            else if (InputManager.IsKeyPressed(Keys.H))
            {
                #region Visible or inVisible

                foreach (var mesh in ObjectsManager.SelectedMeshes)
                {
                    mesh.Visibility = !mesh.Visibility;
                }
                foreach (var bone in ObjectsManager.SelectedBones)
                {
                    bone.Visibility = bone.Visibility == 1 ? 0 : 1;
                }

                #endregion

                isPressed = true;
            }
            else if (InputManager.IsKeyPressed(Keys.F))
            {
                #region Focus

                //Check for all selected object
                var Sphere = new BoundingSphere();
                var MergedSphere = new BoundingSphere();
                foreach (var mesh in ObjectsManager.SelectedMeshes)
                {
                    Sphere = mesh.PhysicData.boundingSphere;
                    Sphere.Center = mesh.Position;
                    BoundingSphere.CreateMerged(MergedSphere, Sphere);
                }
                foreach (var bone in ObjectsManager.SelectedBones)
                {
                    Sphere = new BoundingSphere(bone.Center, bone.Radius);
                    Sphere.Center = bone.Position;
                    BoundingSphere.CreateMerged(MergedSphere, Sphere);
                }

                var eyePosition = Sphere.Center;
                eyePosition.Z += Sphere.Radius * 1.2f;
                eyePosition.Y += Sphere.Radius / 25;
                Persian.Camera.Position = eyePosition;
                //CoreShared.Camera.Angle = Vector2.Zero;
                Persian.Camera.Target = Sphere.Center;

                #endregion

                isPressed = true;
            }
            else if (InputManager.IsKeyPressed(Keys.Delete))
            {
                #region Delete

                if (ObjectsManager.SelectedMeshes.Count != 0)
                {
                    SetPropertyGrid(null);
                }

                foreach (var mesh in ObjectsManager.SelectedMeshes)
                {
                    this.coreFrameWork.ObjectsManager.Meshes.Remove(mesh);
                }

                #endregion

                isPressed = true;
            }
            #region 1...9 Move to Camera History
            else if (InputManager.IsKeyPressed(Keys.D1))
            {
                Persian.Camera.FocusOnHistory(0);
            }
            else if (InputManager.IsKeyPressed(Keys.D2))
            {
                Persian.Camera.FocusOnHistory(1);
            }
            else if (InputManager.IsKeyPressed(Keys.D3))
            {
                Persian.Camera.FocusOnHistory(2);
            }
            else if (InputManager.IsKeyPressed(Keys.D4))
            {
                Persian.Camera.FocusOnHistory(3);
            }
            #endregion

            return isPressed;
        }

        private bool CheckComboKeys()
        {
            bool isPressed = false;

            if (InputManager.IsKeyHolded(Keys.LeftShift) || InputManager.IsKeyHolded(Keys.RightShift))
            {
                #region Shortcuts with Shift

                //Shift + H == Visible All
                if (InputManager.IsKeyPressed(Keys.H))
                {
                    this.coreFrameWork.VisibleAll();
                }
                #region Shift + S + 1 ... 9 == Save to Camera History
                else if (InputManager.IsKeyPressed(Keys.D1))
                {
                    Persian.Camera.AddToHistory(0);
                }
                else if (InputManager.IsKeyPressed(Keys.D2))
                {
                    Persian.Camera.AddToHistory(1);
                }
                else if (InputManager.IsKeyPressed(Keys.D3))
                {
                    Persian.Camera.AddToHistory(2);
                }
                else if (InputManager.IsKeyPressed(Keys.D4))
                {
                    Persian.Camera.AddToHistory(3);
                }
                else if (InputManager.IsKeyPressed(Keys.D5))
                {
                    Persian.Camera.AddToHistory(4);
                }
                else if (InputManager.IsKeyPressed(Keys.D6))
                {
                    Persian.Camera.AddToHistory(5);
                }
                else if (InputManager.IsKeyPressed(Keys.D7))
                {
                    Persian.Camera.AddToHistory(6);
                }
                else if (InputManager.IsKeyPressed(Keys.D8))
                {
                    Persian.Camera.AddToHistory(7);
                }
                else if (InputManager.IsKeyPressed(Keys.D9))
                {
                    Persian.Camera.AddToHistory(8);
                }
                #endregion

                isPressed = true;

                #endregion
            }
            else if (InputManager.IsKeyHolded(Keys.LeftControl) || InputManager.IsKeyHolded(Keys.RightControl))
            {
                this.AllowMultipleSelection = true;

                #region Shortcuts with Ctrl

                //Ctrl + S  == Save
                if (InputManager.IsKeyPressed(Keys.S))
                {
                    this.AllowMultipleSelection = false;
                    if (String.IsNullOrEmpty(EditorShared.CurrentScenePath))
                    {
                        //Call GDI...need to open file dialog so send true
                        CmdToGDIEvent(this, new CmdToGDIEventArgs(CmdToGDI.Save, true));
                    }
                    else
                    {
                        string HResult = null;
                        SceneManager.ProcessSaving(EditorShared.CurrentScenePath, this.coreFrameWork, ref HResult);
                        if (HResult != null)
                        {
                            Windows.ShellWin.Notify(this, new NotifyEventArgs(NotifyType.Error, NotifyAction.Add, string.Format("Error on saving scene because of {0} : ", HResult)));
                        }
                    }
                }
                //Ctrl + A == Select All Meshes
                else if (InputManager.IsKeyPressed(Keys.A))
                {
                    this.AllowMultipleSelection = false;
                    this.coreFrameWork.SelectAllMeshes(false);
                }
                //Ctrl + I == Select Inverse
                else if (InputManager.IsKeyPressed(Keys.I))
                {
                    this.AllowMultipleSelection = false;
                    this.coreFrameWork.SelectAllMeshes(true);
                }

                #endregion

                isPressed = true;
            }

            if (this.AllowMultipleSelection || !isPressed)
            {
                if (InputManager.IsKeyNotPressed(Keys.S) && InputManager.IsLeftMouseBtnClicked())
                {
                    Check4SelectingObjects();
                }
            }

            return isPressed;
        }

        #endregion

        #region Draw

        private void EditorActionMethod(GraphicsDevice GDevice)
        {
            //DepthStencilState DepthState = GraphicsDevice.DepthStencilState;
            //GraphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
            this.gridSystem.Draw(GraphicsDevice);
            this.coordinateAxis.Draw(GraphicsDevice);
            this.selectingRectangle.Draw(GDevice);
            //GraphicsDevice.DepthStencilState = DepthState;
        }

        protected override bool BeginDraw()
        {
            this.coreGraphics.Fetch(GraphicsDevice);
            this.debugToolsManager.BeginDraw();
            return base.BeginDraw();
        }

        protected override void Draw(GameTime gameTime)
        {
#if DEBUG
            this.debugToolsManager.BeginMark(gameTime, DrawAction, "Draw", Color.Red);
#else
            DrawAction();
#endif

        }

        private void DrawAction(object input)
        {
            var gameTime = input as GameTime;
            this.coreFrameWork.Draw();
            base.Draw(gameTime);
        }

        protected override void EndDraw()
        {
            Thread.Sleep(10);
            base.EndDraw();
            //by calling this method in here, usage reporter is always draw status of last frame
            this.debugToolsManager.EndDraw();
            this.coreGraphics.Release(GraphicsDevice);
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (!disposing) return;

            CoreShared.Dispose();
            ShadersManager.Dispose();
            SystemMemory.SafeDispose(this.coreFrameWork);
            Content.Unload();
            base.UnloadContent();
            Logger.WriteLine(String.Format("Content of {0} unloaded", this.GetType().Name));
            base.Dispose(disposing);
        }

        #endregion
    }
}
