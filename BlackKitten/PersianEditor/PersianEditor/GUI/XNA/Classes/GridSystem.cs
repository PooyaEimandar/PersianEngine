/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : GridSystem.cs
 * File Description : The grid system
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 5/15/2013
 * Comment          : 
 */
using System;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using PersianCore.Graphics.VertexType;

namespace PersianEditor.XNA
{
    internal class GridSystem : IDisposable
    {
        #region Fields

        bool isDisposed;
        Effect effect;
        RasterizerState rasterizerState;
        VertexPostionColor4[] vertices;
        EffectParameter WorldViewProjection;
        
        int size;

        #endregion

        #region Constructor/Destructor

        public GridSystem(int size)
        {
            this.isDisposed = false;
            this.size = size;
            rasterizerState = new RasterizerState()
            {
                FillMode = FillMode.WireFrame,
                CullMode = CullMode.None
            };
            BuildVertices();
        }


        private void BuildVertices()
        {
            var color = new Color(45, 46, 50);
            vertices = new PersianCore.Graphics.VertexType.VertexPostionColor4[size * 2];

            for (int i = 0, j = 0; j < size; i += 2, j++)
            {
                vertices[i] = new VertexPostionColor4(new Vector3(-size, 0, -(size - j)), color.ToVector4());
                vertices[i + 1] = new VertexPostionColor4(new Vector3(size, 0, -(size - j)), color.ToVector4());
            }
        }

        ~GridSystem()
        {
            this.Dispose(false);
        }

        #endregion

        #region Load

        public void Load(GraphicsDevice GDevice, ContentManager Content)
        {
            this.effect = Content.Load<Effect>(@"EditorBrowser\Shaders\Base\VertexPositionColor4");
            //bind effect parameters
            this.WorldViewProjection = effect.Parameters["WorldViewProj"];
        }

        #endregion

        #region Draw

        public void Draw(GraphicsDevice GDevice)
        {
            var rasterizerState = GDevice.RasterizerState;
            GDevice.RasterizerState = rasterizerState;

            Matrix ViewProjection = Persian.Camera.View * Persian.Camera.Projection;
            
            Matrix World = Matrix.CreateRotationY(0.0f);

            this.WorldViewProjection.SetValue(World * ViewProjection);
            DrawPrimitives(GDevice);

            World = Matrix.CreateRotationY(MathHelper.Pi);
            this.WorldViewProjection.SetValue(World * ViewProjection);
            DrawPrimitives(GDevice);

            World = Matrix.CreateRotationY(MathHelper.PiOver2);
            this.WorldViewProjection.SetValue(World * ViewProjection);
            DrawPrimitives(GDevice);
            
            World = Matrix.CreateRotationY(-MathHelper.PiOver2);
            this.WorldViewProjection.SetValue(World * ViewProjection);
            DrawPrimitives(GDevice);

            GDevice.RasterizerState = rasterizerState;
        }

        private void DrawPrimitives(GraphicsDevice GDevice)
        {
            effect.CurrentTechnique.Passes[0].Apply();
            GDevice.DrawUserPrimitives<VertexPostionColor4>(PrimitiveType.LineList, vertices, 0, vertices.Length / 2);
        }

        #endregion

        #region Dispose

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!isDisposed)
            {
                isDisposed = true;
                SystemMemory.SafeDispose(this.effect);
                SystemMemory.SafeDispose(this.rasterizerState);       
            }
        }

        #endregion
    }
}
