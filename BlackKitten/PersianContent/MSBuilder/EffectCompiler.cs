/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : EffectCompiler.cs
 * File Description : 
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/5/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework.Content.Pipeline;
using Microsoft.Xna.Framework.Content.Pipeline.Graphics;
using Microsoft.Xna.Framework.Content.Pipeline.Processors;

namespace MSBuilder
{
    public class EffectCompiler
    {
        public EffectCompiler()
        {
            
        }

        public CompiledEffectContent Compile()
        {
            ProcessorContext Context = new ProcessorContext();

            EffectContent effectSource = new EffectContent
            {
                Identity = new ContentIdentity { SourceFilename = "myshader.fx" },

                EffectCode =
                @"
            float4 MakeItPink() : COLOR0
            {
                return float4(1, 0, 1, 1);
            }

            technique Technique1
            {
                pass Pass1
                {
                    PixelShader = compile ps_2_0 MakeItPink();
                }
            }
        ",
            };

            EffectProcessor processor = new EffectProcessor()
            {
                Defines = "ENABLE_FOG;NUM_LIGHTS=3",
                DebugMode = EffectProcessorDebugMode.Optimize
            };
            CompiledEffectContent compiledEffect = processor.Process(effectSource, Context);

            return compiledEffect;
        }

        public ExternalReference<CompiledEffectContent> BuildEffect(ExternalReference<EffectContent> effect, ContentProcessorContext context)
        {
            OpaqueDataDictionary processorParameters = new OpaqueDataDictionary();
            object isSkinned = null;
            context.Parameters.TryGetValue("IsSkinned", out isSkinned);
            if (isSkinned != null && (bool)isSkinned)
            {
                processorParameters.Add("Defines", "SKINNED;");
            }
            return context.BuildAsset<EffectContent, CompiledEffectContent>(effect, typeof(_FXProcessor).Name, processorParameters, "EffectImporter", effect.Name);
        }

        public class _FXProcessor : EffectProcessor
        {
            public override CompiledEffectContent Process(EffectContent input, ContentProcessorContext context)
            {
                this.DebugMode = EffectProcessorDebugMode.Optimize;

                #region Set Defines

                this.Defines = string.Empty;
                object defines = null;
                context.Parameters.TryGetValue("Defines", out defines);
                if (defines != null)
                {
                    this.Defines += defines.ToString();
                }

                #endregion

                return base.Process(input, context);
            }
        }
    }
}
