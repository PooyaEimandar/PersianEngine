/*
* Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
*
* File Name        : Billboard.fx
* File Description : The billboard shader
* Generated by     : Pooya Eimandar
* Last modified by : Pooya Eimandar on 2/3/2014
* Comment          :
*/

float4x4 ViewProjection;
float4x4 World;
float3 CameraPos;
float3 CameraUp;
float3 CameraSide;
float2 Scale = float2(1, 1);
bool UseSprite;
float2 Offset;
float  Intensity;

Texture Texture;
sampler textureSampler = sampler_state
{
	texture = <Texture>;
	magfilter = LINEAR;
	minfilter = LINEAR;
	mipfilter = LINEAR;
	AddressU = CLAMP;
	AddressV = CLAMP;
};

struct VS_IN
{
	float3 Position : POSITION0;
	float2 UV		: TEXCOORD0;
};

struct VS_OUT
{
	float4 Position : POSITION;
	float2 UV		: TEXCOORD0;
};

struct PS_Out
{
	float4 Color 	: COLOR0;
};

VS_OUT VS_Main(VS_IN IN)
{
	VS_OUT OUT = (VS_OUT) 0;

	//float3 center = mul(inPos, World);
	//float3 eyeVector = center - CameraPos;

	//float3 sideVector = cross(eyeVector, CameraUp);
	//sideVector = normalize(sideVector);
	//float3 upVector = cross(sideVector, eyeVector);
	//upVector = normalize(upVector);

	//float3 finalPosition = center;
	//finalPosition += (inTexCoord.x - 0.5f)*sideVector * Scale.x;
	//finalPosition += (0.5f - inTexCoord.y)*upVector * Scale.y;

	//float4 finalPosition4 = float4(finalPosition, 1);
	//Output.Position = mul(finalPosition4, ViewProjection);

	float3 position = IN.Position;

		// Determine which corner of the rectangle this vertex
		// represents
	float2 offset = float2(
		(IN.UV.x - 0.5f) * 2.0f,
		-(IN.UV.y - 0.5f) * 2.0f
		);

	// Move the vertex along the camera's 'plane' to its corner
	position += offset.x * Scale.x * CameraSide + offset.y * Scale.y * CameraUp;

	// Transform the position by view and projection
	OUT.Position = mul(float4(position, 1), ViewProjection);


	if (UseSprite)
	{
		OUT.UV = IN.UV + Offset;
	}
	else
	{
		OUT.UV = IN.UV;
	}
	return OUT;
}

PS_Out PS_Main(VS_OUT IN) : COLOR0
{
	PS_Out OUT = (PS_Out) 0;
	OUT.Color = Intensity * tex2D(textureSampler, IN.UV);
	return OUT;
}

technique SpheBillboard
{
	pass Pass0
	{
		CullMode = None;
		VertexShader = compile vs_2_0 VS_Main();
		PixelShader = compile ps_2_0 PS_Main();
	}
}
