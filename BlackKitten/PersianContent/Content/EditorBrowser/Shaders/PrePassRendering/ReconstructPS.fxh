/*
	Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
	
	File Name        : ReconstructPS.fxh
	File Description : Reconstruct pixel shader header
	Generated by     : Pooya Eimandar
	Last modified by : Pooya Eimandar on 12/28/2013
	Comment          :
*/

float4 REPS(REVSO IN) : COLOR0
{   
	// Find the screen space texture coordinate and offset it
	float2 screenPos = PostProjectionSpaceToScreenSpace(IN.TexCoordScreenSpace) + LightMapSize;

	//sample from our diffuse map
	half4 diffuseMap = tex2Dlod(DiffuseSampler, float4(IN.TexCoord, LOD));
	
#ifdef ENVIRONMENT_MAP
	return Reflectivity * texCUBE( EnvironmentSampler, IN.EnvTexCoord ) + ( diffuseMap * ( 1 - Reflectivity));
#endif

#ifdef ALPHA_MASK	
	clip(diffuseMap.a - AlphaReference);
#endif
	
	// sample from specular and emissive maps
	half3 emissiveMap = tex2D(EmissiveSampler, IN.TexCoord).rgb;
	half3 specularMap = tex2D(SpecularSampler, IN.TexCoord).rgb;
	
#ifdef DUAL_LAYER
	float transition = (1.3f * IN.TexCoord.z - 0.15f) - diffuseMap.a;		
	transition = saturate(transition * 5);
	diffuseMap.rgb = diffuseMap.rgb * transition + tex2D(secondDiffuseMapSampler, IN.TexCoord).rgb * (1 - transition);
	specularMap = specularMap.rgb * transition + tex2D(secondSpecularMapSampler, IN.TexCoord).rgb * (1 - transition);
#endif

	//read our light buffer texture. Remember to multiply by our magic constant explained on the blog
	float4 lightColor =  tex2D(LightSampler, screenPos) * LightMapScaleConst;

	//our specular intensity is stored in a separate texture
	float4 specular =  tex2D(LightSpecularSampler, screenPos) * LightMapScaleConst;
	
	float4 finalColor = float4(diffuseMap * lightColor.rgb + specular * specularMap + emissiveMap, 1);

#ifdef AMBIENT_COLOR
	finalColor.rgb+= diffuseMap*AmbientColor.rgb;
#elif defined(AMBIENT_CUBEMAP)
	half3 ambientCubemapColor = texCUBE(AmbientCubemapSampler,IN.Normal);
	finalColor.rgb += AmbientColor.rgb * ambientCubemapColor.rgb * diffuseMap.rgb;
#endif

	if(UseToon)
	{
		// Set our source color tinting (this should be an effect parameter)
		float Ai = 0.8f;
		float4 Ac = float4(0.075, 0.075, 0.2, 1.0);

		// Shader scaling (should be an effect parameter)
		float Di = 1.0f;

		// Look up the cel shading light color
		float2 toonUV = float2(saturate(dot(IN.L, IN.Normal)), 0.0f);
		float4 CelColor = tex2D(ToonMapSampler, toonUV);

		// return the final pixel color
		return ( Ai * Ac * finalColor ) + ( finalColor * Di * CelColor);
	}
	else
	{
		return finalColor;
	}
}

