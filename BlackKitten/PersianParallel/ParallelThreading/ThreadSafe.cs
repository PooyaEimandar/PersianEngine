/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : ThreadSafe.cs
 * File Description : The thread which runs safely
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/27/2013
 * Comment          : 
 */

using System;
using System.Threading;

namespace ParallelThreading
{
    public class ThreadSafe : IDisposable
    {
        #region Fields


        bool isDisposed;
        public bool Done;
        public object Locker;
        private Thread thread;

        #endregion

        #region Constructor/Destructor

        ~ThreadSafe()
        {
            this.Dispose(false);
        }

        public ThreadSafe(Func<bool> pMethod)
        {
            Done = false;
            Locker = new object();
            ThreadStart DoWork = delegate
            {
                pMethod();
            };
            thread = new Thread(DoWork);
            thread.Start();
        }

        #endregion

        #region Dispose

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!isDisposed)
            {
                isDisposed = true;
            }
        }

        #endregion
    }
}
