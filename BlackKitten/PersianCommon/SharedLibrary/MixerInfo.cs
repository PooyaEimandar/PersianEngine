/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : MixerInfo.cs
 * File Description : The information of mixer
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 1/16/2014
 * Comment          : 
 */

using System.Collections.Generic;

/// <summary>
/// The information of mixer
/// </summary>
public class MixerInfo
{
    string name = string.Empty;
    /// <summary>
    /// Name of mixer
    /// </summary>
    public string Name 
    { 
        get
        {
            return this.name;
        }
        set
        {
            this.name = value;
        }
    }

    List<string> animationTracks = new List<string>();
    /// <summary>
    /// List of animation tracks with names
    /// </summary>
    public List<string> AnimationTracks 
    { 
        get
        {
            return this.animationTracks;
        }
        set
        {
            this.animationTracks = value;
        }
    }

    List<bool> animationTracksInverese = new List<bool>();
    /// <summary>
    /// List of animation tracks with inversing
    /// </summary>
    public List<bool> AnimationTracksInverese
    {
        get
        {
            return this.animationTracksInverese;
        }
        set 
        {
            this.animationTracksInverese = value;
        }
    }

    /// <summary>
    /// Name of each animation and coresponding bones which are inherites from this animation
    /// </summary>
    Dictionary<int, int> boneInherits = new Dictionary<int, int>();
    public Dictionary<int, int> BoneInherits
    {
        get
        {
            return this.boneInherits;
        }
        set
        {
            this.boneInherits = value;
        }
    }

    byte mixerType = 0;
    /// <summary>
    /// 0 = Parallel mixing,
    /// 1 = Sequential
    /// 2 = Sequential with loop at the end
    /// Parallel mode, both animation update and each bone inherits from behavioral of corresponding animation 
    /// Sequential mode, each animation track continues after previous animation track with lopp at the last animation 
    /// SequentialLoop mode, each animation track continues after previous animation track, with loop
    /// </summary>
    public byte MixerType
    {
        get
        {
            return this.mixerType;
        }
        set
        {
            this.mixerType = value;
        }
    }

    /// <summary>
    /// Delta time means between starting each animation
    /// 0, 1500 means, start first animation from zero, then start next animation after just in 1500th frame of animation 1
    /// Note : This will only use on Parallel mode of animation mixer Type(mixerType = 0)
    /// </summary>
    List<long> deltaBetweenFrames = new List<long>();
    public List<long> DeltaBetweenFrames 
    {
        get
        {
            return this.deltaBetweenFrames;
        }
        set
        {
            this.deltaBetweenFrames = value;
        }
    }

    List<float> animationSpeeds = new List<float>();
    public List<float> AnimationSpeeds
    {
        get
        {
            return this.animationSpeeds;
        }
        set
        {
            this.animationSpeeds = value;
        }
    }

    List<long> blendValues = new List<long>();
    public List<long> BlendValues
    {
        get
        {
            return this.blendValues;
        }
        set
        {
            this.blendValues = value;
        }
    }

    public MixerInfo()
    {
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="MixerType"></param>
    /// <param name="Name"></param>
    /// <param name="AnimationTracks"></param>
    /// <param name="AnimationTracksInverese"></param>
    /// <param name="BlendValues"></param>
    /// <param name="BoneInherits"></param>
    public MixerInfo(byte MixerType,
        string Name,
        List<string> AnimationTracks,
        List<bool> AnimationTracksInverese,
        List<float> AnimationSpeeds,
        List<long> BlendValues,
        Dictionary<int, int> BoneInherits,
        List<long> DeltaBetweenFrames)
    {
        this.name = Name;
        this.animationTracks = AnimationTracks;
        this.animationTracksInverese = AnimationTracksInverese;
        this.animationSpeeds = AnimationSpeeds;
        this.mixerType = MixerType;
        this.boneInherits = BoneInherits;
        this.blendValues = BlendValues;
        this.deltaBetweenFrames = DeltaBetweenFrames;
    }
}
