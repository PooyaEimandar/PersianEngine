<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Xna.Framework.Math</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Xna.Framework.BoundingBox">
      <summary>Defines an axis-aligned box-shaped 3D volume.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates an instance of <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</summary>
      <param name="min">The minimum point the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> includes.</param>
      <param name="max">The maximum point the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> includes.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Tests whether the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> contains another <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>Enumeration indicating the extent of overlap.</returns>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to test for overlap. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Tests whether the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> contains a <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to test for overlap. </param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Tests whether the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> contains a <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Enumeration indicating the extent of overlap.</returns>
      <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to test for overlap. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frustum" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Tests whether the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> contains a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>Enumeration indicating the extent of overlap.</returns>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Tests whether the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> contains a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to test for overlap. </param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Tests whether the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> contains a point. </summary>
      <returns>Enumeration indicating the extent of overlap.</returns>
      <param name="point">The point to test for overlap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Tests whether the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> contains a point. </summary>
      <param name="point">The point to test for overlap. </param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.CornerCount">
      <summary>Specifies the total number of corners (8) in the <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> that will contain a group of points.</summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</returns>
      <param name="points">A list of points the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> should contain. </param>
      <exception cref="T:System.ArgumentException">There are no points in <paramref name="points" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> that will contain the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</returns>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> that will contain the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</summary>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to contain. </param>
      <param name="result">[OutAttribute] The created <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> that contains the two specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> instances. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</returns>
      <param name="original">One of the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> instances to contain.</param>
      <param name="additional">One of the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> instances to contain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingBox@)">
      <summary>Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> that contains the two specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> instances.</summary>
      <param name="original">One of the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> instances to contain.</param>
      <param name="additional">One of the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> instances to contain.</param>
      <param name="result">[OutAttribute] The created <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> are equal. </summary>
      <returns>true if the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" />; false otherwise. </returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(System.Object)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> are equal. </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" />; false otherwise. </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners">
      <summary>Gets an array of points that make up the corners of the <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>An array of Vector3 points that represent the corners of the <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">You have to have at least 8 elements to copy corners.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners(Microsoft.Xna.Framework.Vector3[])">
      <summary>Gets an array of points that make up the corners of the <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="corners">An existing array of at least 8 Vector3 points where the corners of the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> are written. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="corners" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">You have to have at least 8 elements to copy corners.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetHashCode">
      <summary>Gets the hash code for this instance. </summary>
      <returns>A hash code for the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects another <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> instance intersect; false otherwise. </returns>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects another <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] true if the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> instances intersect; false otherwise. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> and <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersect; false</returns>
      <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to check for intersection with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frustum" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> and <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersect; false otherwise. </returns>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] true if the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> and <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersect; false otherwise. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects a <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <returns>An enumeration indicating whether the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects the <see cref="T:Microsoft.Xna.Framework.Plane" />.</returns>
      <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane" /> to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects a <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] An enumeration indicating whether the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects the <see cref="T:Microsoft.Xna.Framework.Plane" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects a <see cref="T:Microsoft.Xna.Framework.Ray" />. </summary>
      <returns>Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingBox" />, or null if there is no intersection. </returns>
      <param name="ray">The <see cref="T:Microsoft.Xna.Framework.Ray" /> to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersects a <see cref="T:Microsoft.Xna.Framework.Ray" />.</summary>
      <param name="ray">The <see cref="T:Microsoft.Xna.Framework.Ray" /> to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingBox" />, or null if there is no intersection. </param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Max">
      <summary>The maximum point the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> contains.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Min">
      <summary>The minimum point the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> contains.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Equality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> are equal. </summary>
      <returns>true if the two <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> instances are equal; false otherwise.</returns>
      <param name="a">
        <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to compare. </param>
      <param name="b">
        <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to compare. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Inequality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> are not equal. </summary>
      <returns>true if <paramref name="a" /> is not equal to <paramref name="b" />; false otherwise. </returns>
      <param name="a">The object to the left of the inequality operator.</param>
      <param name="b">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>
        <see cref="T:System.String" /> representation of the current <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingFrustum">
      <summary>Defines a frustum and helps determine whether forms intersect with it. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.#ctor(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <param name="value">Combined matrix that usually takes view * projection matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Bottom">
      <summary>Gets the bottom plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Returns the bottom plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>Enumeration indicating the relationship of the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </returns>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check against the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to test for overlap. </param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Enumeration indicating the relationship of the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to the specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </returns>
      <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to check against the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frustum" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>Enumeration indicating the relationship of the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check against the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to test for overlap. </param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> contains the specified point. </summary>
      <returns>Enumeration indicating the relationship of the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to the specified point. </returns>
      <param name="point">The point to check against the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> contains the specified point. </summary>
      <param name="point">The point to test for overlap. </param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap. </param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingFrustum.CornerCount">
      <summary>Specifies the total number of corners (8) in the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>true if the specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />; false otherwise. </returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />; false otherwise. </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Far">
      <summary>Gets the far plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Returns the far plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners">
      <summary>Gets an array of points that make up the corners of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Array of <see cref="T:Microsoft.Xna.Framework.Vector3" /> points that make up the corners of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners(Microsoft.Xna.Framework.Vector3[])">
      <summary>Gets an array of points that make up the corners of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <param name="corners">An existing array of at least 8 <see cref="T:Microsoft.Xna.Framework.Vector3" /> points where the corners of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> are written. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="corners" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">You have to have at least 8 elements to copy corners.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetHashCode">
      <summary>Gets the hash code for this instance. </summary>
      <returns>A hash code for the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the <see cref="T:Microsoft.Xna.Framework.BoundingBox" />; false otherwise. </returns>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] true if the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersect; false otherwise. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>true if the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />; false otherwise. </returns>
      <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to check for intersection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frustum" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />; false otherwise.</returns>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] true if the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersect; false otherwise. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the specified Plane. </summary>
      <returns>An enumeration indicating whether <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the specified Plane. </returns>
      <param name="plane">The Plane to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects a Plane. </summary>
      <param name="plane">The Plane to check for intersection with. </param>
      <param name="result">[OutAttribute] An enumeration indicating whether the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the Plane. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects the specified Ray. </summary>
      <returns>Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> or null if there is no intersection. </returns>
      <param name="ray">The <see cref="T:Microsoft.Xna.Framework.Ray" /> to check for intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> intersects a <see cref="T:Microsoft.Xna.Framework.Ray" />. </summary>
      <param name="ray">The <see cref="T:Microsoft.Xna.Framework.Ray" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> or null if there is no intersection. </param>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Left">
      <summary>Gets the left plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Returns the left plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Matrix">
      <summary>Gets or sets the Matrix that describes this bounding frustum. </summary>
      <returns>The Matrix that describes this bounding frustum. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Near">
      <summary>Gets the near plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Returns the near plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Equality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> are equal. </summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; false otherwise. </returns>
      <param name="a">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to the left of the equality operator.</param>
      <param name="b">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Inequality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> are not equal. </summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; false otherwise. </returns>
      <param name="a">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to the left of the inequality operator.</param>
      <param name="b">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to the right of the inequality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Right">
      <summary>Gets the right plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Returns the right plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Top">
      <summary>Gets the top plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Returns the top plane of the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.ToString">
      <summary>Returns a String that represents the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>String representation of the current <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingSphere">
      <summary>Defines a sphere. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <param name="center">Center point of the sphere.</param>
      <param name="radius">Center point of the sphere.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="radius" /> is less than zero. <paramref name="radius" /> must be greater than or equal to zero. </exception>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Center">
      <summary>The center point of the sphere. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>An enumeration indicating the relationship of the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </returns>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check against the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="box">Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>An enumeration indicating the relationship of the specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </returns>
      <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to check against the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frustum" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>An enumeration indicating the relationship of the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instances.</returns>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check against the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> contains the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</summary>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to test for overlap. </param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> contains the specified point. </summary>
      <returns>An enumeration indicating the relationship of the specified point to the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </returns>
      <param name="point">Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> contains the specified point. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.ContainmentType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> contains the specified point. </summary>
      <param name="point">The point to test for overlap. </param>
      <param name="result">[OutAttribute] Enumeration indicating the extent of overlap. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to create the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to create the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> from. </param>
      <param name="result">[OutAttribute] The created <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromFrustum(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Creates the smallest <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain a specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
      <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to create the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frustum" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that can contain a specified list of points. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
      <param name="points">List of points the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> must contain.</param>
      <exception cref="T:System.ArgumentException">There are no points in <paramref name="points" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that contains the two specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instances. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
      <param name="original">
        <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to be merged.</param>
      <param name="additional">
        <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to be merged.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Creates a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> that contains the two specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instances. </summary>
      <param name="original">
        <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to be merged.</param>
      <param name="additional">
        <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to be merged. </param>
      <param name="result">[OutAttribute] The created <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>true if the specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />; false otherwise. </returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />; false otherwise. </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.GetHashCode">
      <summary>Gets the hash code for this instance. </summary>
      <returns>A hash code for the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> and <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersect; false otherwise. </returns>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check for intersection with the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Boolean@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] true if the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> and <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> intersect; false otherwise. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with a specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> and <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersect; false otherwise. </returns>
      <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to check for intersection with the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frustum" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with a specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instances intersect; false otherwise.</returns>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection with the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Boolean@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects another <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] true if the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> instances intersect; false otherwise. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with a specified <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <returns>An enumeration indicating the relationship between the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> and the <see cref="T:Microsoft.Xna.Framework.Plane" />.</returns>
      <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane" /> to check for intersection with the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects a <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] An enumeration indicating whether the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects the <see cref="T:Microsoft.Xna.Framework.Plane" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects with a specified <see cref="T:Microsoft.Xna.Framework.Ray" />. </summary>
      <returns>Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> or null if there is no intersection. </returns>
      <param name="ray">The <see cref="T:Microsoft.Xna.Framework.Ray" /> to check for intersection with the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> intersects a <see cref="T:Microsoft.Xna.Framework.Ray" />. </summary>
      <param name="ray">The <see cref="T:Microsoft.Xna.Framework.Ray" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> or null if there is no intersection. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Equality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> are equal. </summary>
      <returns>true if <paramref name="left" /> is equal to <paramref name="right" />; false otherwise. </returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Inequality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> are not equal. </summary>
      <returns>true if <paramref name="left" /> is not equal to <paramref name="right" />; false otherwise. </returns>
      <param name="a">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to the left of the inequality operator.</param>
      <param name="b">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to the right of the inequality operator.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Radius">
      <summary>The radius of the sphere. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.ToString">
      <summary>Returns a String that represents the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <returns>String representation of the current <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix)">
      <summary>Translates and scales the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> using a given <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The transformed <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </returns>
      <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that <see cref="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix)" /> will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.BoundingSphere@)">
      <summary>Translates and scales the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> using a given <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="matrix">A transformation matrix that might include translation, rotation, or uniform scaling. Note that <see cref="M:Microsoft.Xna.Framework.BoundingSphere.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.BoundingSphere@)" /> will not return correct results if there are non-uniform scaling, shears, or other unusual transforms in this transformation matrix. This is because there is no way to shear or non-uniformly scale a sphere. Such an operation would cause the sphere to lose its shape as a sphere. </param>
      <param name="result">[OutAttribute] The transformed <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.ContainmentType">
      <summary>Indicates the extent to which bounding volumes intersect or contain one another. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.ContainmentType.Disjoint">
      <summary>Indicates there is no overlap between the bounding volumes.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.ContainmentType.Contains">
      <summary>Indicates that one bounding volume completely contains the other.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.ContainmentType.Intersects">
      <summary>Indicates that the bounding volumes partially overlap.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Curve">
      <summary>Stores an arbitrary collection of 2D <see cref="T:Microsoft.Xna.Framework.CurveKey" /> points, and provides methods for evaluating features of the curve they define. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Curve" />. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Clone">
      <summary>Creates a copy of the <see cref="T:Microsoft.Xna.Framework.Curve" />. </summary>
      <returns>The copy of the <see cref="T:Microsoft.Xna.Framework.Curve" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes both the <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> and the <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> for a <see cref="T:Microsoft.Xna.Framework.CurveKey" /> specified by its index. </summary>
      <param name="keyIndex">The index of the <see cref="T:Microsoft.Xna.Framework.CurveKey" /> for which to compute tangents (in the <see cref="P:Microsoft.Xna.Framework.Curve.Keys" /> collection of the <see cref="T:Microsoft.Xna.Framework.Curve" />). </param>
      <param name="tangentType">The type of tangents to compute (one of the types specified in the <see cref="T:Microsoft.Xna.Framework.CurveTangent" /> enumeration).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keyIndex" /> is not a valid index. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangent(System.Int32,Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes a specified type of <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> and a specified type of <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> for a given <see cref="T:Microsoft.Xna.Framework.CurveKey" />.</summary>
      <param name="keyIndex">The index of the <see cref="T:Microsoft.Xna.Framework.CurveKey" /> for which to compute tangents (in the Keys collection of the <see cref="T:Microsoft.Xna.Framework.Curve" />). </param>
      <param name="tangentInType">The type of <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> to compute (one of the types specified in the <see cref="T:Microsoft.Xna.Framework.CurveTangent" /> enumeration). </param>
      <param name="tangentOutType">The type of <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> to compute (one of the types specified in the <see cref="T:Microsoft.Xna.Framework.CurveTangent" /> enumeration). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keyIndex" /> is not a valid index. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes all tangents for all <see cref="T:Microsoft.Xna.Framework.CurveKey" />s in this <see cref="T:Microsoft.Xna.Framework.Curve" />, using a specified tangent type for both <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> and <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" />. </summary>
      <param name="tangentType">The type of <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> and <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> to compute (one of the types specified in the <see cref="T:Microsoft.Xna.Framework.CurveTangent" /> enumeration). </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.ComputeTangents(Microsoft.Xna.Framework.CurveTangent,Microsoft.Xna.Framework.CurveTangent)">
      <summary>Computes all tangents for all <see cref="T:Microsoft.Xna.Framework.CurveKey" />s in this <see cref="T:Microsoft.Xna.Framework.Curve" />, using different tangent types for <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> and <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" />. </summary>
      <param name="tangentInType">The type of <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> to compute (one of the types specified in the <see cref="T:Microsoft.Xna.Framework.CurveTangent" /> enumeration). </param>
      <param name="tangentOutType">The type of <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> to compute (one of the types specified in the <see cref="T:Microsoft.Xna.Framework.CurveTangent" /> enumeration). </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Evaluate(System.Single)">
      <summary>Finds the value at a position on the <see cref="T:Microsoft.Xna.Framework.Curve" />. </summary>
      <returns>Value at the position on the <see cref="T:Microsoft.Xna.Framework.Curve" />. </returns>
      <param name="position">The position on the <see cref="T:Microsoft.Xna.Framework.Curve" />.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.IsConstant">
      <summary>Gets a value indicating whether the curve is constant. </summary>
      <returns>true is the curve is constant (has one or fewer points); false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.Keys">
      <summary>The points that make up the curve. </summary>
      <returns>Points that make up the curve.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PostLoop">
      <summary>Specifies how to handle weighting values that are greater than the last control point in the curve. </summary>
      <returns>Specifies how to handle weighting values.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PreLoop">
      <summary>Specifies how to handle weighting values that are less than the first control point in the curve. </summary>
      <returns>Specifies how to handle weighting values.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveContinuity">
      <summary>Defines the continuity of <see cref="T:Microsoft.Xna.Framework.CurveKey" /> instances on a <see cref="T:Microsoft.Xna.Framework.Curve" />. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveContinuity.Smooth">
      <summary>Interpolation can be used between this <see cref="T:Microsoft.Xna.Framework.CurveKey" /> and the next.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveContinuity.Step">
      <summary>Interpolation cannot be used between this <see cref="T:Microsoft.Xna.Framework.CurveKey" /> and the next. Specifying a position between the two points returns this point.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKey">
      <summary>Represents a point in a multi-point curve. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey" />. </summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey" />. </summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.CurveContinuity)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKey" />. </summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
      <param name="continuity">Enum indicating whether the curve is discrete or continuous.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Clone">
      <summary>Creates a copy of the <see cref="T:Microsoft.Xna.Framework.CurveKey" />. </summary>
      <returns>The copy of the <see cref="T:Microsoft.Xna.Framework.CurveKey" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.CompareTo(Microsoft.Xna.Framework.CurveKey)">
      <summary>Compares this instance to another <see cref="T:Microsoft.Xna.Framework.CurveKey" /> and returns an indication of their relative values. </summary>
      <returns>Zero if the positions are the same; -1 if this <see cref="T:Microsoft.Xna.Framework.CurveKey" /> comes before <paramref name="other" /> and 1 if this <see cref="T:Microsoft.Xna.Framework.CurveKey" /> comes after <paramref name="other" />. </returns>
      <param name="other">
        <see cref="T:Microsoft.Xna.Framework.CurveKey" /> to compare to.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Continuity">
      <summary>Describes whether the segment between this point and the next point in the curve is discrete or continuous. </summary>
      <returns>Describes the continuity between this point and the next.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the <see cref="T:Microsoft.Xna.Framework.CurveKey" />. </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.CurveKey" />; false otherwise. </returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.CurveKey" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise. </returns>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.GetHashCode">
      <summary>Returns the hash code for this instance. </summary>
      <returns>Hashcode for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Equality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two <see cref="T:Microsoft.Xna.Framework.CurveKey" /> instances are equal. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.CurveKey" />s are equal; false otherwise.</returns>
      <param name="a">
        <see cref="T:Microsoft.Xna.Framework.CurveKey" /> on the left of the equal sign.</param>
      <param name="b">
        <see cref="T:Microsoft.Xna.Framework.CurveKey" /> on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Inequality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two <see cref="T:Microsoft.Xna.Framework.CurveKey" /> instances are not equal. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.CurveKey" />s are not equal; false otherwise.</returns>
      <param name="a">
        <see cref="T:Microsoft.Xna.Framework.CurveKey" /> on the left of the equal sign.</param>
      <param name="b">
        <see cref="T:Microsoft.Xna.Framework.CurveKey" /> on the right of the equal sign.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Position">
      <summary>Position of the <see cref="T:Microsoft.Xna.Framework.CurveKey" /> in the curve. </summary>
      <returns>Position of the <see cref="T:Microsoft.Xna.Framework.CurveKey" /> in the curve.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentIn">
      <summary>Describes the tangent when approaching this point from the previous point in the curve. </summary>
      <returns>The tangent when approaching.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentOut">
      <summary>Describes the tangent when leaving this point to the next point in the curve. </summary>
      <returns>The tangent when leaving.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Value">
      <summary>Describes the value of this point. </summary>
      <returns>The value of the point.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKeyCollection">
      <summary>Contains the <see cref="T:Microsoft.Xna.Framework.CurveKey" />s making up a <see cref="T:Microsoft.Xna.Framework.Curve" />. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Add(Microsoft.Xna.Framework.CurveKey)">
      <summary>Adds a <see cref="T:Microsoft.Xna.Framework.CurveKey" /> to the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />. </summary>
      <param name="item">The <see cref="T:Microsoft.Xna.Framework.CurveKey" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clear">
      <summary>Removes all <see cref="T:Microsoft.Xna.Framework.CurveKey" />s from the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clone">
      <summary>Creates a copy of the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />. </summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Contains(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" /> contains a specific <see cref="T:Microsoft.Xna.Framework.CurveKey" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.CurveKey" /> is found in the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />; false otherwise.</returns>
      <param name="item">The <see cref="T:Microsoft.Xna.Framework.CurveKey" /> to locate in the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.CopyTo(Microsoft.Xna.Framework.CurveKey[],System.Int32)">
      <summary>Copies the <see cref="T:Microsoft.Xna.Framework.CurveKey" />s of the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" /> to an array, starting at the array index provided. </summary>
      <param name="array">The destination of the <see cref="T:Microsoft.Xna.Framework.CurveKey" />s copied from <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />. The array must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />.</summary>
      <returns>The number of elements in the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />. </summary>
      <returns>An enumerator for the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.IndexOf(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines the index of a <see cref="T:Microsoft.Xna.Framework.CurveKey" /> in the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />. </summary>
      <returns>The index of the <see cref="T:Microsoft.Xna.Framework.CurveKey" /> if found in the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />; −1 otherwise.</returns>
      <param name="item">
        <see cref="T:Microsoft.Xna.Framework.CurveKey" /> to locate in the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" /> is read-only.</summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" /> is read-only; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:Microsoft.Xna.Framework.CurveKey" /> at the specified index. </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.CurveKey" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:Microsoft.Xna.Framework.CurveKey" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Remove(Microsoft.Xna.Framework.CurveKey)">
      <summary>Removes the first occurrence of a specific <see cref="T:Microsoft.Xna.Framework.CurveKey" /> from the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />. </summary>
      <returns>true if <see cref="T:Microsoft.Xna.Framework.CurveKey" /> is successfully removed; false otherwise.</returns>
      <param name="item">The <see cref="T:Microsoft.Xna.Framework.CurveKey" /> to remove from the <see cref="T:Microsoft.Xna.Framework.CurveKeyCollection" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:Microsoft.Xna.Framework.CurveKey" /> at the specified index. </summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveLoopType">
      <summary>Defines how the value of a <see cref="T:Microsoft.Xna.Framework.Curve" /> will be determined for positions before the first point on the <see cref="T:Microsoft.Xna.Framework.Curve" /> or after the last point on the <see cref="T:Microsoft.Xna.Framework.Curve" />.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Constant">
      <summary>The <see cref="T:Microsoft.Xna.Framework.Curve" /> will evaluate to its first key for positions before the first point in the <see cref="T:Microsoft.Xna.Framework.Curve" /> and to the last key for positions after the last point.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Cycle">
      <summary>Positions specified past the ends of the curve will wrap around to the opposite side of the <see cref="T:Microsoft.Xna.Framework.Curve" />.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.CycleOffset">
      <summary>Positions specified past the ends of the curve will wrap around to the opposite side of the <see cref="T:Microsoft.Xna.Framework.Curve" />. The value will be offset by the difference between the values of the first and last <see cref="T:Microsoft.Xna.Framework.CurveKey" /> multiplied by the number of times the position wraps around. If the position is before the first point in the <see cref="T:Microsoft.Xna.Framework.Curve" />, the difference will be subtracted from its value; otherwise, the difference will be added. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Oscillate">
      <summary>Positions specified past the ends of the <see cref="T:Microsoft.Xna.Framework.Curve" /> act as an offset from the same side of the <see cref="T:Microsoft.Xna.Framework.Curve" /> toward the opposite side.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveLoopType.Linear">
      <summary>Linear interpolation will be performed to determine the value.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveTangent">
      <summary>Specifies different tangent types to be calculated for <see cref="T:Microsoft.Xna.Framework.CurveKey" /> points in a <see cref="T:Microsoft.Xna.Framework.Curve" />.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveTangent.Flat">
      <summary>A Flat tangent always has a value equal to zero. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveTangent.Linear">
      <summary>A Linear tangent at a <see cref="T:Microsoft.Xna.Framework.CurveKey" /> is equal to the difference between its <see cref="P:Microsoft.Xna.Framework.CurveKey.Value" /> and the value of the preceding or succeeding <see cref="T:Microsoft.Xna.Framework.CurveKey" />.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.CurveTangent.Smooth">
      <summary>A Smooth tangent smooths the inflection between a <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentIn" /> and <see cref="P:Microsoft.Xna.Framework.CurveKey.TangentOut" /> by taking into account the values of both neighbors of the <see cref="T:Microsoft.Xna.Framework.CurveKey" />.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.MathHelper">
      <summary>Contains commonly used precalculated values. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Returns the Cartesian coordinate for one axis of a point that is defined by a given triangle and two normalized barycentric (areal) coordinates. </summary>
      <returns>Cartesian coordinate of the specified point with respect to the axis being used.</returns>
      <param name="value1">The coordinate on one axis of vertex 1 of the defining triangle.</param>
      <param name="value2">The coordinate on one axis of vertex 1 of the defining triangle.</param>
      <param name="value3">The coordinate on the same axis of vertex 3 of the defining triangle.</param>
      <param name="amount1">The normalized barycentric (areal) coordinate b2, equal to the weighting factor for vertex 2, the coordinate of which is specified in <paramref name="value2" />.</param>
      <param name="amount2">The normalized barycentric (areal) coordinate b3, equal to the weighting factor for vertex 3, the coordinate of which is specified in <paramref name="value3" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions. </summary>
      <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The first position in the interpolation.</param>
      <param name="value3">The first position in the interpolation.</param>
      <param name="value4">The first position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)">
      <summary>Restricts a value to be within a specified range. </summary>
      <returns>The clamped value. If <paramref name="value" /> &gt; <paramref name="max" />, <paramref name="max" /> will be returned. If <paramref name="value" /> &lt; <paramref name="min" />, <paramref name="min" /> will be returned. If <paramref name="min" /> &lt;= <paramref name="value" /> &gt;= <paramref name="max" />, <paramref name="value" /> will be returned. </returns>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value. If value is less than min, min will be returned. </param>
      <param name="max">The maximum value. If value is greater than max, max will be returned. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)">
      <summary>Calculates the absolute value of the difference of two values. </summary>
      <returns>Distance between the two values.</returns>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.E">
      <summary>Represents the mathematical constant e. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Hermite spline interpolation. </summary>
      <returns>The result of the Hermite spline interpolation.</returns>
      <param name="value1">Source position.</param>
      <param name="tangent1">Source tangent.</param>
      <param name="value2">Source position.</param>
      <param name="tangent2">Source tangent.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)">
      <summary>Linearly interpolates between two values. </summary>
      <returns>Interpolated value.</returns>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log10E">
      <summary>Represents the log base ten of e. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log2E">
      <summary>Represents the log base two of e. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)">
      <summary>Returns the greater of two values. </summary>
      <returns>The greater value.</returns>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)">
      <summary>Returns the lesser of two values. </summary>
      <returns>The lesser value.</returns>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Pi">
      <summary>Represents the value of pi. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver2">
      <summary>Represents the value of pi divided by two. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver4">
      <summary>Represents the value of pi divided by four. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
      <summary>Interpolates between two values using a cubic equation. </summary>
      <returns>Interpolated value.</returns>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)">
      <summary>Converts radians to degrees. </summary>
      <returns>The angle in degrees.</returns>
      <param name="radians">The angle in radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)">
      <summary>Converts degrees to radians. </summary>
      <returns>The angle in radians.</returns>
      <param name="degrees">The angle in degrees.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.TwoPi">
      <summary>Represents the value of pi times two. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.WrapAngle(System.Single)">
      <summary>Reduces a given angle to a value between pi and -pi. </summary>
      <returns>The new angle, in radians.</returns>
      <param name="angle">The angle to reduce, in radians.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Matrix">
      <summary>Defines a matrix. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="m11">Value to initialize <paramref name="m11" /> to.</param>
      <param name="m12">Value to initialize <paramref name="m12" /> to.</param>
      <param name="m13">Value to initialize <paramref name="m13" /> to.</param>
      <param name="m14">Value to initialize <paramref name="m14" /> to.</param>
      <param name="m21">Value to initialize <paramref name="m21" /> to.</param>
      <param name="m22">Value to initialize <paramref name="m22" /> to.</param>
      <param name="m23">Value to initialize <paramref name="m23" /> to.</param>
      <param name="m24">Value to initialize <paramref name="m24" /> to.</param>
      <param name="m31">Value to initialize <paramref name="m31" /> to.</param>
      <param name="m32">Value to initialize <paramref name="m32" /> to.</param>
      <param name="m33">Value to initialize <paramref name="m33" /> to.</param>
      <param name="m34">Value to initialize <paramref name="m34" /> to.</param>
      <param name="m41">Value to initialize <paramref name="m41" /> to.</param>
      <param name="m42">Value to initialize <paramref name="m42" /> to.</param>
      <param name="m43">Value to initialize <paramref name="m43" /> to.</param>
      <param name="m44">Value to initialize <paramref name="m44" /> to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix. </summary>
      <returns>Resulting matrix.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Adds a matrix to another matrix. </summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">[OutAttribute] Resulting matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Backward">
      <summary>Gets and sets the backward vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The backward vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />.The default value is composed of the current values for the matrix elements in the third row: <see cref="F:Microsoft.Xna.Framework.Matrix.M31" />, <see cref="F:Microsoft.Xna.Framework.Matrix.M32" />, and <see cref="F:Microsoft.Xna.Framework.Matrix.M33" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a spherical billboard that rotates around a specified object position. </summary>
      <returns>The created billboard matrix.</returns>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a spherical billboard that rotates around a specified object position. </summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera. </param>
      <param name="result">[OutAttribute] The created billboard matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a cylindrical billboard that rotates around a specified axis. </summary>
      <returns>The created billboard matrix.</returns>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="rotateAxis">Axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="objectForwardVector">Optional forward vector of the object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Nullable{Microsoft.Xna.Framework.Vector3},System.Nullable{Microsoft.Xna.Framework.Vector3},Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a cylindrical billboard that rotates around a specified axis. </summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="rotateAxis">Axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <param name="objectForwardVector">Optional forward vector of the object.</param>
      <param name="result">[OutAttribute] The created billboard matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that rotates around an arbitrary vector. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that rotates around an arbitrary vector. </summary>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <param name="result">[OutAttribute] The created <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion)">
      <summary>Creates a rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> from a <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
      <param name="quaternion">
        <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to create the <see cref="T:Microsoft.Xna.Framework.Matrix" /> from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromQuaternion(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> from a <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="quaternion">
        <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to create the <see cref="T:Microsoft.Xna.Framework.Matrix" /> from.</param>
      <param name="result">[OutAttribute] The created <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a new rotation matrix from a specified yaw, pitch, and roll. </summary>
      <returns>A new rotation matrix with the specified yaw, pitch, and roll.</returns>
      <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
      <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
      <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in a rotation matrix from a specified yaw, pitch, and roll. </summary>
      <param name="yaw">Angle of rotation, in radians, around the y-axis.</param>
      <param name="pitch">Angle of rotation, in radians, around the x-axis.</param>
      <param name="roll">Angle of rotation, in radians, around the z-axis.</param>
      <param name="result">[OutAttribute] An existing matrix filled in to represent the specified yaw, pitch, and roll.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a view matrix. </summary>
      <returns>The created view matrix.</returns>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a view matrix. </summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The target towards which the camera is pointing.</param>
      <param name="cameraUpVector">The direction that is "up" from the camera's point of view.</param>
      <param name="result">[OutAttribute] The created view matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds an orthogonal projection matrix. </summary>
      <returns>The projection matrix.</returns>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds an orthogonal projection matrix. </summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <param name="result">[OutAttribute] The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, orthogonal projection matrix. </summary>
      <returns>The projection matrix.</returns>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a customized, orthogonal projection matrix. </summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <param name="result">[OutAttribute] The projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix and returns the result by value.</summary>
      <returns>The projection matrix.</returns>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the following conditions is true:<paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" /> is a negative value. Specify a positive value for <paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" />. <paramref name="nearPlaneDistance" /> is larger than <paramref name="farPlaneDistance" />. <paramref name="nearPlaneDistance" /> must be smaller than <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a perspective projection matrix and returns the result by reference.</summary>
      <param name="width">Width of the view volume at the near view plane.</param>
      <param name="height">Height of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <param name="result">[OutAttribute] The projection matrix.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the following conditions is true:<paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" /> is a negative value. Specify a positive value for <paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" />. <paramref name="nearPlaneDistance" /> is larger than <paramref name="farPlaneDistance" />. <paramref name="nearPlaneDistance" /> must be smaller than <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix based on a field of view and returns by value.</summary>
      <returns>The perspective projection matrix.</returns>
      <param name="fieldOfView">Field of view in the y direction, in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the following conditions is true:<paramref name="fieldOfView" /> is not between 0 and pi (180 degrees). Note that <paramref name="fieldOfView" /> should be specified in radians.<paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" /> is a negative value. Specify a positive value for <paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" />.<paramref name="nearPlaneDistance" /> is larger than <paramref name="farPlaneDistance" />. <paramref name="nearPlaneDistance" /> must be smaller than <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a perspective projection matrix based on a field of view and returns by reference.</summary>
      <param name="fieldOfView">Field of view in the y direction, in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to the far view plane.</param>
      <param name="result">[OutAttribute] The perspective projection matrix.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the following conditions is true:<paramref name="fieldOfView" /> is not between 0 and pi (180 degrees). Note that <paramref name="fieldOfView" /> should be specified in radians.<paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" /> is a negative value. Specify a positive value for <paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" />.<paramref name="nearPlaneDistance" /> is larger than <paramref name="farPlaneDistance" />. <paramref name="nearPlaneDistance" /> must be smaller than <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, perspective projection matrix. </summary>
      <returns>The created projection matrix.</returns>
      <param name="left">Minimum x-value of the view volume at the near view plane.</param>
      <param name="right">Maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
      <param name="top">Maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to of the far view plane.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the following conditions is true:<paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" /> is a negative value. Specify a positive value for <paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" />.<paramref name="nearPlaneDistance" /> larger than <paramref name="farPlaneDistance" />. <paramref name="nearPlaneDistance" /> must be smaller than <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Builds a customized, perspective projection matrix. </summary>
      <param name="left">Minimum x-value of the view volume at the near view plane.</param>
      <param name="right">Maximum x-value of the view volume at the near view plane.</param>
      <param name="bottom">Minimum y-value of the view volume at the near view plane.</param>
      <param name="top">Maximum y-value of the view volume at the near view plane.</param>
      <param name="nearPlaneDistance">Distance to the near view plane.</param>
      <param name="farPlaneDistance">Distance to of the far view plane.</param>
      <param name="result">[OutAttribute] The created projection matrix.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One of the following conditions is true:<paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" /> is a negative value. Specify a positive value for <paramref name="nearPlaneDistance" /> or <paramref name="farPlaneDistance" />.<paramref name="nearPlaneDistance" /> larger than <paramref name="farPlaneDistance" />. <paramref name="nearPlaneDistance" /> must be smaller than <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane)">
      <summary>Creates a <see cref="T:Microsoft.Xna.Framework.Matrix" /> that reflects the coordinate system about a specified <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <returns>A new <see cref="T:System.Windows.Media.Matrix" /> expressing the reflection. </returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Plane" /> about which to create a reflection. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateReflection(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in an existing <see cref="T:Microsoft.Xna.Framework.Matrix" /> so that it reflects the coordinate system about a specified <see cref="T:Microsoft.Xna.Framework.Plane" />.</summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Plane" /> about which to create a reflection.</param>
      <param name="result">[OutAttribute] A <see cref="T:System.Windows.Media.Matrix" /> that creates the reflection. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the x-axis.</summary>
      <returns>The rotation matrix.</returns>
      <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use <see cref="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)" /> to convert degrees to radians. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the x-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the x-axis. Note that you can use <see cref="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)" /> to convert degrees to radians. </param>
      <param name="result">[OutAttribute] The matrix in which to place the calculated data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the y-axis.</summary>
      <returns>The rotation matrix.</returns>
      <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use <see cref="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)" /> to convert degrees to radians. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the y-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the y-axis. Note that you can use <see cref="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)" /> to convert degrees to radians. </param>
      <param name="result">[OutAttribute] The matrix in which to place the calculated data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single)">
      <summary>Returns a matrix that can be used to rotate a set of vertices around the z-axis.</summary>
      <returns>The rotation matrix.</returns>
      <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use <see cref="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)" /> to convert degrees to radians.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Populates data into a user-specified matrix that can be used to rotate a set of vertices around the z-axis.</summary>
      <param name="radians">The amount, in radians, in which to rotate around the z-axis. Note that you can use <see cref="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)" /> to convert degrees to radians.</param>
      <param name="result">[OutAttribute] The rotation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The created scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
      <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="scales">Amounts to scale by on the x, y, and z axes.</param>
      <param name="result">[OutAttribute] The created scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single)">
      <summary>Creates a scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The created scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
      <param name="scale">Amount to scale by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="scale">Value to scale by.</param>
      <param name="result">[OutAttribute] The created scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Creates a scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The created scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />. </returns>
      <param name="xScale">Value to scale by on the x-axis.</param>
      <param name="yScale">Value to scale by on the y-axis.</param>
      <param name="zScale">Value to scale by on the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="xScale">Value to scale by on the x-axis.</param>
      <param name="yScale">Value to scale by on the y-axis.</param>
      <param name="zScale">Value to scale by on the z-axis.</param>
      <param name="result">[OutAttribute] The created scaling <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Plane)">
      <summary>Creates a <see cref="T:Microsoft.Xna.Framework.Matrix" /> that flattens geometry into a specified <see cref="T:Microsoft.Xna.Framework.Plane" /> as if casting a shadow from a specified light source.</summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that can be used to flatten geometry onto the specified plane from the specified direction. </returns>
      <param name="lightDirection">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> specifying the direction from which the light that will cast the shadow is coming. </param>
      <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane" /> onto which the new matrix should flatten geometry so as to cast a shadow. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateShadow(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Fills in a <see cref="T:Microsoft.Xna.Framework.Matrix" /> to flatten geometry into a specified <see cref="T:Microsoft.Xna.Framework.Plane" /> as if casting a shadow from a specified light source.</summary>
      <param name="lightDirection">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> specifying the direction from which the light that will cast the shadow is coming. </param>
      <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane" /> onto which the new matrix should flatten geometry so as to cast a shadow. </param>
      <param name="result">[OutAttribute] A <see cref="T:Microsoft.Xna.Framework.Matrix" /> that can be used to flatten geometry onto the specified plane from the specified direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a translation <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The created translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
      <param name="position">Amounts to translate by on the x, y, and z axes.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a translation <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="position">Amounts to translate by on the x, y, and z axes.</param>
      <param name="result">[OutAttribute] The created translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Creates a translation <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The created translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
      <param name="xPosition">Value to translate by on the x-axis.</param>
      <param name="yPosition">Value to translate by on the y-axis.</param>
      <param name="zPosition">Value to translate by on the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a translation <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="xPosition">Value to translate by on the x-axis.</param>
      <param name="yPosition">Value to translate by on the y-axis.</param>
      <param name="zPosition">Value to translate by on the z-axis.</param>
      <param name="result">[OutAttribute] The created translation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a world matrix with the specified parameters.</summary>
      <returns>The created world matrix.</returns>
      <param name="position">Position of the object. This value is used in translation operations.</param>
      <param name="forward">Forward direction of the object.</param>
      <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateWorld(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Creates a world matrix with the specified parameters.</summary>
      <param name="position">Position of the object. This value is used in translation operations.</param>
      <param name="forward">Forward direction of the object.</param>
      <param name="up">Upward direction of the object; usually [0, 1, 0].</param>
      <param name="result">[OutAttribute] The created world matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Decompose(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Extracts the scalar, translation, and rotation components from a 3D scale/rotate/translate (SRT) <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.Matrix" /> can be decomposed; false otherwise. </returns>
      <param name="scale">[OutAttribute] The scalar component of the transform matrix, expressed as a <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
      <param name="rotation">[OutAttribute] The rotation component of the transform matrix, expressed as a <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="translation">[OutAttribute] The translation component of the transform matrix, expressed as a <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Determinant">
      <summary>Calculates the determinant of the matrix. </summary>
      <returns>The determinant of the matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <returns>Result of the division.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <returns>Resulting matrix.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
      <param name="result">[OutAttribute] Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
      <param name="result">[OutAttribute] Result of the division.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Down">
      <summary>Gets and sets the down vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The down vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(Microsoft.Xna.Framework.Matrix)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Matrix" />; false otherwise. </returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Matrix" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Forward">
      <summary>Gets and sets the forward vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The forward vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.GetHashCode">
      <summary>Gets the hash code of this object. </summary>
      <returns>Hash code of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Identity">
      <summary>Returns an instance of the identity matrix. </summary>
      <returns>The identity matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix)">
      <summary>Calculates the inverse of a matrix. </summary>
      <returns>The inverse of the matrix.</returns>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Calculates the inverse of a matrix. </summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">[OutAttribute] The inverse of matrix. The same matrix can be used for both arguments. </param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Left">
      <summary>Gets and sets the left vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The left vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Linearly interpolates between the corresponding values of two matrices. </summary>
      <returns>Resulting matrix.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="amount">Interpolation value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Linearly interpolates between the corresponding values of two matrices. </summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="amount">Interpolation value.</param>
      <param name="result">[OutAttribute] Resulting matrix.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M11">
      <summary>Value at row 1 column 1 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M12">
      <summary>Value at row 1 column 2 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M13">
      <summary>Value at row 1 column 3 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M14">
      <summary>Value at row 1 column 4 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M21">
      <summary>Value at row 2 column 1 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M22">
      <summary>Value at row 2 column 2 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M23">
      <summary>Value at row 2 column 3 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M24">
      <summary>Value at row 2 column 4 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M31">
      <summary>Value at row 3 column 1 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M32">
      <summary>Value at row 3 column 2 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M33">
      <summary>Value at row 3 column 3 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M34">
      <summary>Value at row 3 column 4 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M41">
      <summary>Value at row 4 column 1 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M42">
      <summary>Value at row 4 column 2 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M43">
      <summary>Value at row 4 column 3 of the matrix. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M44">
      <summary>Value at row 4 column 4 of the matrix. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <returns>Result of the multiplication.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <returns>Result of the multiplication.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">[OutAttribute] Result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix@,System.Single,Microsoft.Xna.Framework.Matrix@)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix)">
      <summary>Negates individual elements of a matrix. </summary>
      <returns>Source matrix.</returns>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Negates individual elements of a matrix. </summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">[OutAttribute] Negated matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Addition(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix. </summary>
      <returns>Resulting matrix.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix. </summary>
      <returns>Resulting matrix.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar. </summary>
      <returns>The result of the division.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Equality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Compares a matrix for equality with another matrix. </summary>
      <returns>true if the matrices are equal; false otherwise.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Inequality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Tests a matrix for inequality with another matrix. </summary>
      <returns>true if the matrices are not equal; false otherwise.</returns>
      <param name="matrix1">The matrix on the left of the equal sign.</param>
      <param name="matrix2">The matrix on the right of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="matrix">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(System.Single,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by a scalar value. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="scaleFactor">Scalar value.</param>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Subtraction(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_UnaryNegation(Microsoft.Xna.Framework.Matrix)">
      <summary>Negates individual elements of a matrix. </summary>
      <returns>Negated matrix.</returns>
      <param name="matrix1">Source matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Right">
      <summary>Gets and sets the right vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The right vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Subtracts matrices. </summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="result">[OutAttribute] Result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.ToString">
      <summary>Retrieves a string representation of the current object. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transform(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Matrix" /> by applying a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation. </summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Matrix" /> that is the result of the transform. </returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Matrix" /> to transform. </param>
      <param name="rotation">The rotation to apply, expressed as a <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transform(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Matrix" /> by applying a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation. </summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Matrix" /> to transform. </param>
      <param name="rotation">The rotation to apply, expressed as a <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </param>
      <param name="result">[OutAttribute] An existing Matrix filled in with the result of the transform. </param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Translation">
      <summary>Gets and sets the translation vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The translation vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" /></returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix)">
      <summary>Transposes the rows and columns of a matrix. </summary>
      <returns>Transposed matrix.</returns>
      <param name="matrix">Source matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Matrix@)">
      <summary>Transposes the rows and columns of a matrix. </summary>
      <param name="matrix">Source matrix.</param>
      <param name="result">[OutAttribute] Transposed matrix.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Up">
      <summary>Gets and sets the up vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The up vector of the <see cref="T:Microsoft.Xna.Framework.Matrix" />.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Plane">
      <summary>Defines a plane. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <param name="point1">One point of a triangle defining the <see cref="T:Microsoft.Xna.Framework.Plane" />. </param>
      <param name="point2">One point of a triangle defining the <see cref="T:Microsoft.Xna.Framework.Plane" />. </param>
      <param name="point3">One point of a triangle defining the <see cref="T:Microsoft.Xna.Framework.Plane" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <param name="normal">The normal vector to the <see cref="T:Microsoft.Xna.Framework.Plane" />.</param>
      <param name="d">The <see cref="T:Microsoft.Xna.Framework.Plane" />'s distance along its normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <param name="value">
        <see cref="T:Microsoft.Xna.Framework.Vector4" /> with X, Y, and Z components defining the normal of the <see cref="T:Microsoft.Xna.Framework.Plane" />. The W component defines the distance of the <see cref="T:Microsoft.Xna.Framework.Plane" /> along the normal from the origin. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <param name="a">X component of the normal defining the <see cref="T:Microsoft.Xna.Framework.Plane" />.</param>
      <param name="b">Y component of the normal defining the <see cref="T:Microsoft.Xna.Framework.Plane" />.</param>
      <param name="c">Z component of the normal defining the <see cref="T:Microsoft.Xna.Framework.Plane" />.</param>
      <param name="d">Distance of the <see cref="T:Microsoft.Xna.Framework.Plane" /> along its normal from the origin.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.D">
      <summary>The distance of the <see cref="T:Microsoft.Xna.Framework.Plane" /> along its normal from the origin. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the dot product of a specified <see cref="T:Microsoft.Xna.Framework.Vector4" /> and this <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <returns>The dot product of the specified <see cref="T:Microsoft.Xna.Framework.Vector4" /> and this <see cref="T:Microsoft.Xna.Framework.Plane" />. </returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> to multiply this <see cref="T:Microsoft.Xna.Framework.Plane" /> by. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Dot(Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the dot product of a specified <see cref="T:Microsoft.Xna.Framework.Vector4" /> and this <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> to multiply this <see cref="T:Microsoft.Xna.Framework.Plane" /> by.</param>
      <param name="result">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> to multiply this <see cref="T:Microsoft.Xna.Framework.Plane" /> by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the dot product of a specified <see cref="T:Microsoft.Xna.Framework.Vector3" /> and the <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector of this <see cref="T:Microsoft.Xna.Framework.Plane" /> plus the distance (<see cref="F:Microsoft.Xna.Framework.Plane.D" />) value of the Plane. </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to multiply by. </returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to multiply by. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotCoordinate(Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Returns the dot product of a specified <see cref="T:Microsoft.Xna.Framework.Vector3" /> and the <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector of this <see cref="T:Microsoft.Xna.Framework.Plane" /> plus the distance (<see cref="F:Microsoft.Xna.Framework.Plane.D" />) value of the Plane. </summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to multiply by.</param>
      <param name="result">[OutAttribute] The resulting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the dot product of a specified <see cref="T:Microsoft.Xna.Framework.Vector3" /> and the <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector of this <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <returns>The resulting dot product.</returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to multiply by. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.DotNormal(Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Returns the dot product of a specified <see cref="T:Microsoft.Xna.Framework.Vector3" /> and the <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector of this <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to multiply by.</param>
      <param name="result">[OutAttribute] The resulting dot product.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Xna.Framework.Plane" /> is equal to the <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <returns>true if the specified <see cref="T:Microsoft.Xna.Framework.Plane" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Plane" />; false.</returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.Plane" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Plane" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Plane" />; false otherwise. </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Plane" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.GetHashCode">
      <summary>Gets the hash code for this object. </summary>
      <returns>A hash code for the current <see cref="T:Microsoft.Xna.Framework.Plane" />. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.Plane" /> intersects a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>An enumeration indicating the relationship between the <see cref="T:Microsoft.Xna.Framework.Plane" /> and the <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</returns>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to test for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.Plane" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] An enumeration indicating whether the <see cref="T:Microsoft.Xna.Framework.Plane" /> intersects the <see cref="T:Microsoft.Xna.Framework.BoundingBox" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.Plane" /> intersects a specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>An enumeration indicating the relationship between the <see cref="T:Microsoft.Xna.Framework.Plane" /> and the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />.</returns>
      <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to check for intersection with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frustum" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.Plane" /> intersects a specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</summary>
      <returns>An enumeration indicating the relationship between the <see cref="T:Microsoft.Xna.Framework.Plane" /> and the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</returns>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere@,Microsoft.Xna.Framework.PlaneIntersectionType@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.Plane" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] An enumeration indicating whether the <see cref="T:Microsoft.Xna.Framework.Plane" /> intersects the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.Normal">
      <summary>The normal vector of the <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize">
      <summary>Changes the coefficients of the <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector of this <see cref="T:Microsoft.Xna.Framework.Plane" /> to make it of unit length. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane)">
      <summary>Changes the coefficients of the <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector of a <see cref="T:Microsoft.Xna.Framework.Plane" /> to make it of unit length. </summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Plane" /> with a normal having unit length.</returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Plane" /> to normalize.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Normalize(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Plane@)">
      <summary>Changes the coefficients of the <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector of a <see cref="T:Microsoft.Xna.Framework.Plane" /> to make it of unit length. </summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Plane" /> to normalize. </param>
      <param name="result">[OutAttribute] An existing plane <see cref="T:Microsoft.Xna.Framework.Plane" /> filled in with a normalized version of the specified plane.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Equality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.Plane" /> are equal. </summary>
      <returns>true if left is equal to right; false otherwise. </returns>
      <param name="lhs">The object to the left of the equality operator.</param>
      <param name="rhs">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Inequality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.Plane" /> are not equal. </summary>
      <returns>true if left is not equal to right; false otherwise. </returns>
      <param name="lhs">The object to the left of the inequality operator.</param>
      <param name="rhs">The object to the right of the inequality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <returns>
        <see cref="T:System.String" /> representation of the current <see cref="T:Microsoft.Xna.Framework.Plane" />. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a normalized <see cref="T:Microsoft.Xna.Framework.Plane" /> by a <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Plane" /> that results from applying the transform. </returns>
      <param name="plane">The normalized <see cref="T:Microsoft.Xna.Framework.Plane" /> to transform. This Plane must already be normalized, so that its <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector is of unit length, before this method is called. </param>
      <param name="matrix">The transform <see cref="T:Microsoft.Xna.Framework.Matrix" /> to apply to the <see cref="T:Microsoft.Xna.Framework.Plane" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a normalized <see cref="T:Microsoft.Xna.Framework.Plane" /> by a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation. </summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Plane" /> that results from applying the rotation. </returns>
      <param name="plane">The normalized <see cref="T:Microsoft.Xna.Framework.Plane" /> to transform. This Plane must already be normalized, so that its <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector is of unit length, before this method is called. </param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply to the <see cref="T:Microsoft.Xna.Framework.Plane" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Plane@)">
      <summary>Transforms a normalized <see cref="T:Microsoft.Xna.Framework.Plane" /> by a <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="plane">The normalized <see cref="T:Microsoft.Xna.Framework.Plane" /> to transform. This Plane must already be normalized, so that its <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector is of unit length, before this method is called. </param>
      <param name="matrix">The transform <see cref="T:Microsoft.Xna.Framework.Matrix" /> to apply to the <see cref="T:Microsoft.Xna.Framework.Plane" />.</param>
      <param name="result">[OutAttribute] An existing <see cref="T:Microsoft.Xna.Framework.Plane" /> filled in with the results of applying the transform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Plane@)">
      <summary>Transforms a normalized <see cref="T:Microsoft.Xna.Framework.Plane" /> by a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation. </summary>
      <param name="plane">The normalized <see cref="T:Microsoft.Xna.Framework.Plane" /> to transform. This Plane must already be normalized, so that its <see cref="F:Microsoft.Xna.Framework.Plane.Normal" /> vector is of unit length, before this method is called. </param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply to the <see cref="T:Microsoft.Xna.Framework.Plane" />. </param>
      <param name="result">[OutAttribute] An existing <see cref="T:Microsoft.Xna.Framework.Plane" /> filled in with the results of applying the rotation.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.PlaneIntersectionType">
      <summary>Describes the intersection between a plane and a bounding volume. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Front">
      <summary>There is no intersection, and the bounding volume is in the positive half-space of the <see cref="T:Microsoft.Xna.Framework.Plane" />.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Back">
      <summary>There is no intersection, and the bounding volume is in the negative half-space of the <see cref="T:Microsoft.Xna.Framework.Plane" />.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.PlaneIntersectionType.Intersecting">
      <summary>The <see cref="T:Microsoft.Xna.Framework.Plane" /> is intersected.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Point">
      <summary>Defines a point in 2D space. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Point" />. </summary>
      <param name="x">The x-coordinate of the <see cref="T:Microsoft.Xna.Framework.Point" />.</param>
      <param name="y">The y-coordinate of the <see cref="T:Microsoft.Xna.Framework.Point" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)">
      <summary>Determines whether two <see cref="T:Microsoft.Xna.Framework.Point" /> instances are equal. </summary>
      <returns>true if the instances are equal; false otherwise. </returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.Point" /> to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(System.Object)">
      <summary>Determines whether two <see cref="T:Microsoft.Xna.Framework.Point" /> instances are equal. </summary>
      <returns>true if the instances are equal; false otherwise. </returns>
      <param name="obj">The object to compare this instance to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.GetHashCode">
      <summary>Gets the hash code for this object. </summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>Determines whether two <see cref="T:Microsoft.Xna.Framework.Point" /> instances are equal. </summary>
      <returns>true if a and bare equal; false otherwise.</returns>
      <param name="a">
        <see cref="T:Microsoft.Xna.Framework.Point" /> on the left side of the equal sign.</param>
      <param name="b">
        <see cref="T:Microsoft.Xna.Framework.Point" /> on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>Determines whether two <see cref="T:Microsoft.Xna.Framework.Point" /> instances are not equal. </summary>
      <returns>true if the instances are not equal; false otherwise. </returns>
      <param name="a">The <see cref="T:Microsoft.Xna.Framework.Point" /> on the left side of the equal sign.</param>
      <param name="b">The <see cref="T:Microsoft.Xna.Framework.Point" /> on the right side of the equal sign.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Microsoft.Xna.Framework.Point" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Microsoft.Xna.Framework.Point" />. </returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.X">
      <summary>Specifies the x-coordinate of the <see cref="T:Microsoft.Xna.Framework.Point" />. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.Y">
      <summary>Specifies the y-coordinate of the <see cref="T:Microsoft.Xna.Framework.Point" />. </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Point.Zero">
      <summary>Returns the point (0,0). </summary>
      <returns>The point (0,0).</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Quaternion">
      <summary>Defines a four-dimensional vector (x,y,z,w), which is used to efficiently rotate an object about the (x, y, z) vector by the angle theta, where w = cos(theta/2). </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="vectorPart">The vector component of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="scalarPart">The rotation component of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="x">The x-value of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="y">The y-value of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="z">The z-value of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="w">The w-value of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </summary>
      <returns>Result of adding the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances.</returns>
      <param name="quaternion1">
        <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to add.</param>
      <param name="quaternion2">
        <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Adds two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </summary>
      <param name="quaternion1">
        <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to add.</param>
      <param name="quaternion2">
        <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to add.</param>
      <param name="result">[OutAttribute] Result of adding the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Concatenates two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances; the result represents the <paramref name="value1" /> rotation followed by the <paramref name="value2" /> rotation.</summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> representing the concatenation of the <paramref name="value1" /> rotation followed by the <paramref name="value2" /> rotation.</returns>
      <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation in the series.</param>
      <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation in the series.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Concatenate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Concatenates two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances; the result represents the <paramref name="value1" /> rotation followed by the <paramref name="value2" /> rotation. </summary>
      <param name="value1">The first <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation in the series.</param>
      <param name="value2">The second <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation in the series.</param>
      <param name="result">[OutAttribute] The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation representing the concatenation of <paramref name="value1" /> followed by <paramref name="value2" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate">
      <summary>Transforms this <see cref="T:Microsoft.Xna.Framework.Quaternion" /> into its conjugate. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion)">
      <summary>Returns the conjugate of a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> that is the conjugate of the specified one.</returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> of which to return the conjugate.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Conjugate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Returns the conjugate of a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> of which to return the conjugate. </param>
      <param name="result">[OutAttribute] An existing <see cref="T:Microsoft.Xna.Framework.Quaternion" /> filled in to be the conjugate of the specified one.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from a vector and an angle to rotate about the vector. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
      <param name="axis">The vector to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Creates a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from a vector and an angle to rotate about the vector. </summary>
      <param name="axis">The vector to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <param name="result">[OutAttribute] The created <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from a rotation <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The created <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
      <param name="matrix">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> to create the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Creates a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from a rotation <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="matrix">The rotation <see cref="T:Microsoft.Xna.Framework.Matrix" /> to create the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from. </param>
      <param name="result">[OutAttribute] The created <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from specified yaw, pitch, and roll angles. </summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> expressing the specified yaw, pitch, and roll angles.</returns>
      <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
      <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
      <param name="roll">The roll angle, in radians, around the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Creates a new <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from specified yaw, pitch, and roll angles. </summary>
      <param name="yaw">The yaw angle, in radians, around the y-axis.</param>
      <param name="pitch">The pitch angle, in radians, around the x-axis.</param>
      <param name="roll">The roll angle, in radians, around the z-axis.</param>
      <param name="result">[OutAttribute] An existing <see cref="T:Microsoft.Xna.Framework.Quaternion" /> filled in to express the specified yaw, pitch, and roll angles. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by another <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>Result of the division.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Divides a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by another <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">The divisor.</param>
      <param name="result">[OutAttribute] Result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Calculates the dot product of two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </summary>
      <returns>Dot product of the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single@)">
      <summary>Calculates the dot product of two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </summary>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="result">[OutAttribute] Dot product of the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Quaternion" />; false otherwise. </returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.GetHashCode">
      <summary>Get the hash code of this object. </summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Quaternion.Identity">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> representing no rotation. </summary>
      <returns>The identity <see cref="T:Microsoft.Xna.Framework.Quaternion" /> (0,0,0,1).</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)">
      <summary>Returns the inverse of a <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>The inverse of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
      <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Returns the inverse of a <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="result">[OutAttribute] The inverse of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Length">
      <summary>Calculates the length of a <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>The length of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.LengthSquared">
      <summary>Calculates the length squared of a <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>The length squared of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Linearly interpolates between two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </summary>
      <returns>The resulting <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="amount">Value indicating how far to interpolate between the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Linearly interpolates between two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </summary>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="amount">Value indicating how far to interpolate between the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances.</param>
      <param name="result">[OutAttribute] The resulting <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </summary>
      <returns>The result of the multiplication.</returns>
      <param name="quaternion1">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the left of the multiplication.</param>
      <param name="quaternion2">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the right of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by a scalar value. </summary>
      <returns>The result of the multiplication.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Multiplies two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </summary>
      <param name="quaternion1">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the left of the multiplication.</param>
      <param name="quaternion2">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> on the right of the multiplication.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Multiplies a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by a scalar value. </summary>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>Negated <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
      <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Flips the sign of each component of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="result">[OutAttribute] Negated <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize">
      <summary>Divides each component of a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by the length of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides each component of a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by the length of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>Normalized <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
      <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Divides each component of a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by the length of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="result">[OutAttribute] Normalized <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances. </summary>
      <returns>Result of adding the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances.</returns>
      <param name="quaternion1">
        <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to add.</param>
      <param name="quaternion2">
        <see cref="T:Microsoft.Xna.Framework.Quaternion" /> to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by another <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>Result of the division.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compares two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances for equality. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances are equal, false otherwise.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compare two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances for inequality. </summary>
      <returns>true if the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances are not equal; false otherwise.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances.</summary>
      <returns>The result of the multiplication.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> by a scalar value.</summary>
      <returns>The result of the multiplication.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from another <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>Negated <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</returns>
      <param name="quaternion">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Interpolates between two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances, using spherical linear interpolation. </summary>
      <returns>Result of the interpolation.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="amount">Value that indicates how far to interpolate between the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Interpolates between two <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances, using spherical linear interpolation. </summary>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="amount">Value that indicates how far to interpolate between the <see cref="T:Microsoft.Xna.Framework.Quaternion" /> instances.</param>
      <param name="result">[OutAttribute] Result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from another <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Quaternion@)">
      <summary>Subtracts a <see cref="T:Microsoft.Xna.Framework.Quaternion" /> from another <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="quaternion1">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="quaternion2">Source <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</param>
      <param name="result">[OutAttribute] Result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.ToString">
      <summary>Retrieves a string representation of the current object. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.W">
      <summary>Specifies the rotation component of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.X">
      <summary>Specifies the x-value of the vector component of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Y">
      <summary>Specifies the y-value of the vector component of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Z">
      <summary>Specifies the z-value of the vector component of the <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Ray">
      <summary>Defines a ray. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Ray" />. </summary>
      <param name="position">The starting point of the <see cref="T:Microsoft.Xna.Framework.Ray" />.</param>
      <param name="direction">Unit vector describing the direction of the <see cref="T:Microsoft.Xna.Framework.Ray" />.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Direction">
      <summary>Unit vector specifying the direction the <see cref="T:Microsoft.Xna.Framework.Ray" /> is pointing. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(Microsoft.Xna.Framework.Ray)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Xna.Framework.Ray" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Ray" />. </summary>
      <returns>true if the specified <see cref="T:Microsoft.Xna.Framework.Ray" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Ray" />; false otherwise. </returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.Ray" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Ray" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(System.Object)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.Ray" /> are equal. </summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Ray" />; false otherwise. </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Ray" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.GetHashCode">
      <summary>Gets the hash code for this instance. </summary>
      <returns>A hash code for the current <see cref="T:Microsoft.Xna.Framework.Ray" />. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects a specified <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <returns>Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> or null if there is no intersection. </returns>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check for intersection with the <see cref="T:Microsoft.Xna.Framework.Ray" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingBox" />. </summary>
      <param name="box">The <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> to check for intersection with. </param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingBox" /> or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects a specified <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" />. </summary>
      <returns>Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> or null if there is no intersection. </returns>
      <param name="frustum">The <see cref="T:Microsoft.Xna.Framework.BoundingFrustum" /> to check for intersection with the <see cref="T:Microsoft.Xna.Framework.Ray" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fustum" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects a specified <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />.</summary>
      <returns>Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> or null if there is no intersection. </returns>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection with the <see cref="T:Microsoft.Xna.Framework.Ray" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere@,System.Nullable{System.Single}@)">
      <summary>Checks whether the current <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects a <see cref="T:Microsoft.Xna.Framework.BoundingSphere" />. </summary>
      <param name="sphere">The <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> to check for intersection with.</param>
      <param name="result">[OutAttribute] Distance at which the ray intersects the <see cref="T:Microsoft.Xna.Framework.BoundingSphere" /> or null if there is no intersection. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Determines whether this <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects a specified <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <returns>The distance at which this <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects the specified <see cref="T:Microsoft.Xna.Framework.Plane" />, or null if there is no intersection. </returns>
      <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane" /> with which to calculate this <see cref="T:Microsoft.Xna.Framework.Ray" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.Plane@,System.Nullable{System.Single}@)">
      <summary>Determines whether this <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects a specified <see cref="T:Microsoft.Xna.Framework.Plane" />. </summary>
      <param name="plane">The <see cref="T:Microsoft.Xna.Framework.Plane" /> with which to calculate this <see cref="T:Microsoft.Xna.Framework.Ray" />'s intersection. </param>
      <param name="result">[OutAttribute] The distance at which this <see cref="T:Microsoft.Xna.Framework.Ray" /> intersects the specified <see cref="T:Microsoft.Xna.Framework.Plane" />, or null if there is no intersection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Equality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.Ray" /> are equal. </summary>
      <returns>true if left is equal to right; false otherwise. </returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Inequality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.Ray" /> are not equal. </summary>
      <returns>true if left is not equal to right; false otherwise. </returns>
      <param name="a">Determines whether two instances of <see cref="T:Microsoft.Xna.Framework.Ray" /> are not equal. </param>
      <param name="b">The object to the right of the inequality operator.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Position">
      <summary>Specifies the starting point of the <see cref="T:Microsoft.Xna.Framework.Ray" />. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Microsoft.Xna.Framework.Ray" />. </summary>
      <returns>
        <see cref="T:System.String" /> representation of the current <see cref="T:Microsoft.Xna.Framework.Ray" />. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector2">
      <summary>Defines a vector with two components. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Vector2" />.</summary>
      <param name="value">Value to initialize both components to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Vector2" />.</summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors. </summary>
      <returns>Sum of the source vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Adds two vectors. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the 2D Cartesian coordinates of the specified point.</returns>
      <param name="value1">A <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value3">A <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the 2D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 2D triangle.</summary>
      <param name="value1">A <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value3">A <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
      <param name="result">[OutAttribute] The 2D Cartesian coordinates of the specified point are placed in this <see cref="T:Microsoft.Xna.Framework.Vector2" /> on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions. </summary>
      <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions. </summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Restricts a value to be within a specified range. </summary>
      <returns>The clamped value.</returns>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Restricts a value to be within a specified range. </summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">[OutAttribute] The clamped value. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors. </summary>
      <returns>Distance between the two vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the distance between two vectors. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors squared. </summary>
      <returns>The distance between the source vectors squared.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the distance between two vectors squared. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector. </summary>
      <returns>The result of dividing the vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value. </summary>
      <returns>The result of the division.</returns>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Divides the components of a vector by the components of another vector. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <param name="result">[OutAttribute] The result of dividing the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Divides a vector by a scalar value. </summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them. </summary>
      <returns>The dot product of the two vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single@)">
      <summary>Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)">
      <summary>Determines whether the specified <see cref="T:Microsoft.Xna.Framework.Vector2" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Vector2" />. </summary>
      <returns>true if the specified <see cref="T:Microsoft.Xna.Framework.Vector2" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Vector2" />; false otherwise. </returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Vector2" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Vector2" />. </summary>
      <returns>true if the specified object is equal to the current <see cref="T:Microsoft.Xna.Framework.Vector2" />; false otherwise.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.GetHashCode">
      <summary>Gets the hash code of the vector object. </summary>
      <returns>Hash code of the vector object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Hermite spline interpolation. </summary>
      <returns>The result of the Hermite spline interpolation.</returns>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a Hermite spline interpolation. </summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Length">
      <summary>Calculates the length of the vector. </summary>
      <returns>Length of the vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.LengthSquared">
      <summary>Calculates the length of the vector squared. </summary>
      <returns>The length of the vector squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a linear interpolation between two vectors. </summary>
      <returns>The linear interpolation of the two vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Performs a linear interpolation between two vectors. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
      <param name="result">[OutAttribute] The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the highest value from each matching pair of components. </summary>
      <returns>The maximized vector.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components. </summary>
      <returns>The minimized vector.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Multiplies a vector by a scalar value. </summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction. </summary>
      <returns>Vector pointing in the opposite direction.</returns>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Returns a vector pointing in the opposite direction. </summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize">
      <summary>Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)">
      <summary>Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector. </summary>
      <returns>The created unit vector.</returns>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector. </summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Normalized vector.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.One">
      <summary>Gets a <see cref="T:Microsoft.Xna.Framework.Vector2" /> with both of its components set to one. </summary>
      <returns>
        <see cref="T:Microsoft.Xna.Framework.Vector2" /> with both of its components set to one. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors. </summary>
      <returns>Sum of the source vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector. </summary>
      <returns>The result of dividing the vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value. </summary>
      <returns>The source vector divided by b.</returns>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for equality. </summary>
      <returns>true if the vectors are equal; false otherwise.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for inequality. </summary>
      <returns>true if the vectors are not equal, false otherwise.</returns>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies a vector by a scalar value. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction. </summary>
      <returns>Vector pointing in the opposite direction.</returns>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Determines the reflect vector of the given vector and normal. </summary>
      <returns>Resulting reflect vector.</returns>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of <paramref name="vector" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Reflect(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Determines the reflect vector of the given vector and normal. </summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of <paramref name="vector" />.</param>
      <param name="result">[OutAttribute] The created reflect vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Interpolates between two values using a cubic equation. </summary>
      <returns>Interpolated value.</returns>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,System.Single,Microsoft.Xna.Framework.Vector2@)">
      <summary>Interpolates between two values using a cubic equation. </summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <param name="result">[OutAttribute] The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Subtracts a vector from a vector. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.ToString">
      <summary>Retrieves a string representation of the current object. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms the vector (x, y, 0, 1) by the specified matrix. </summary>
      <returns>The transformed vector.</returns>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a single <see cref="T:Microsoft.Xna.Framework.Vector2" />, or the vector normal (x, y, 0, 0), by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation. </summary>
      <returns>Returns a new <see cref="T:Microsoft.Xna.Framework.Vector2" /> containing the result of the rotation.</returns>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the given <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix to apply.</param>
      <param name="result">[OutAttribute] The vector resulting from the transformation. </param>
      <exception cref="T:System.ArgumentException">The target array size must be equal or larger than the source array size.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector2" />, or the vector normal (x, y, 0, 0), by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation. </summary>
      <param name="value">The vector to rotate.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="result">[OutAttribute] An existing <see cref="T:Microsoft.Xna.Framework.Vector2" /> filled in with the result of the rotation. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances by a specified <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="sourceArray">The array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances to transform.</param>
      <param name="matrix">The transformation matrix to apply.</param>
      <param name="destinationArray">An existing array into which the transformed <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances are written.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result.</exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="sourceArray">The array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances to transform. </param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="destinationArray">An existing array into which the transformed <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances are written. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances by a specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in a specified range in a destination array. </summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first <see cref="T:Microsoft.Xna.Framework.Vector2" /> to transform in the source array. </param>
      <param name="matrix">The transformation matrix to apply.</param>
      <param name="destinationArray">The destination array into which the resulting <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances will be written. </param>
      <param name="destinationIndex">The index of the position in the destination array where the first result <see cref="T:Microsoft.Xna.Framework.Vector2" /> should be written. </param>
      <param name="length">The number of <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances to be transformed. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result or the combination of <paramref name="sourceIndex" /> and <paramref name="length" /> was greater than <paramref name="sourceArray.Length" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> and places the results in a specified range in a destination array. </summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first <see cref="T:Microsoft.Xna.Framework.Vector2" /> to transform in the source array. </param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="destinationArray">The destination array into which the resulting <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances will be written. </param>
      <param name="destinationIndex">The index of the position in the destination array where the first result <see cref="T:Microsoft.Xna.Framework.Vector2" /> should be written. </param>
      <param name="length">The number of <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances to be transformed.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result or the combination of <paramref name="sourceIndex" /> and <paramref name="length" /> was greater than <paramref name="sourceArray.Length" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 2D vector normal by a matrix. </summary>
      <returns>The transformed normal.</returns>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2@)">
      <summary>Transforms a 2D vector normal by a matrix. </summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix to apply.</param>
      <param name="result">[OutAttribute] The <see cref="T:Microsoft.Xna.Framework.Vector2" /> resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[])">
      <summary>Transforms an array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> vector normals by a specified <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="sourceArray">The array of vector normals to transform. </param>
      <param name="matrix">The transformation matrix to apply. </param>
      <param name="destinationArray">An existing array into which the transformed vector normals are written. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector2[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of <see cref="T:Microsoft.Xna.Framework.Vector2" /> vector normals by a specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and places the results in a specified range in a destination array. </summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index of the first <see cref="T:Microsoft.Xna.Framework.Vector2" /> to transform in the source array. </param>
      <param name="matrix">The transformation matrix to apply.</param>
      <param name="destinationArray">The destination array into which the resulting <see cref="T:Microsoft.Xna.Framework.Vector2" /> instances are written. </param>
      <param name="destinationIndex">The index of the position in the destination array where the first result <see cref="T:Microsoft.Xna.Framework.Vector2" /> should be written. </param>
      <param name="length">The number of vector normals to be transformed.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result or the combination of <paramref name="sourceIndex" /> and <paramref name="length" /> was greater than sourceArray.Length.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitX">
      <summary>Gets the unit vector for the x-axis. </summary>
      <returns>The unit vector for the x-axis.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitY">
      <summary>Gets the unit vector for the y-axis. </summary>
      <returns>The unit vector for the y-axis.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.X">
      <summary>Gets or sets the x-component of the vector. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.Y">
      <summary>Gets or sets the y-component of the vector. </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.Zero">
      <summary>Gets a <see cref="T:Microsoft.Xna.Framework.Vector2" /> with all of its components set to zero. </summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2" /> with all of its components set to zero.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector3">
      <summary>Defines a vector with three components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Vector3" />. </summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Vector3" />. </summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Vector3" />. </summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors. </summary>
      <returns>Sum of the source vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Adds two vectors. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] Sum of the source vectors.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Backward">
      <summary>Returns a unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> designating backward in a right-handed coordinate system (0, 0, 1).</summary>
      <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> pointing backward.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.</summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector3" /> containing the 3D Cartesian coordinates of the specified point.</returns>
      <param name="value1">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> containing the 3D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 3D triangle.</summary>
      <param name="value1">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A <see cref="T:Microsoft.Xna.Framework.Vector3" /> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in value2).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in value3).</param>
      <param name="result">[OutAttribute] The 3D Cartesian coordinates of the specified point are placed in this <see cref="T:Microsoft.Xna.Framework.Vector3" /> on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions. </summary>
      <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
      <param name="value1">Performs a Catmull-Rom interpolation using the specified positions. </param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The third position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions. </summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Restricts a value to be within a specified range. </summary>
      <returns>The clamped value.</returns>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Restricts a value to be within a specified range. </summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">[OutAttribute] The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the cross product of two vectors. </summary>
      <returns>Cross product of the source vectors.</returns>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Calculates the cross product of two vectors. </summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">[OutAttribute] The cross product of the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors. </summary>
      <returns>Distance between the source vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the distance between two vectors. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors squared. </summary>
      <returns>The distance between the source vectors squared.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the distance between two vectors squared. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the two vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector. </summary>
      <returns>The result of dividing the vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value. </summary>
      <returns>The source vector divided by b.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Divides the components of a vector by the components of another vector. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Divides a vector by a scalar value. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the dot product of two vectors. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them. </summary>
      <returns>The dot product of the two vectors.</returns>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single@)">
      <summary>Calculates the dot product of two vectors and writes the result to a user-specified variable. If the two vectors are unit vectors, the dot product returns a floating point value between -1 and 1 that can be used to determine some properties of the angle between two vectors. For example, it can show whether the vectors are orthogonal, parallel, or have an acute or obtuse angle between them. </summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">[OutAttribute] The dot product of the two vectors.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Down">
      <summary>Returns a unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> designating down (0, −1, 0).</summary>
      <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> pointing down.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the <see cref="T:Microsoft.Xna.Framework.Vector3" />.</summary>
      <returns>true if the specified <see cref="T:Microsoft.Xna.Framework.Vector3" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Vector3" />; false otherwise.</returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">Object to make the comparison with.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Forward">
      <summary>Returns a unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> designating forward in a right-handed coordinate system(0, 0, −1).</summary>
      <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> pointing forward.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.GetHashCode">
      <summary>Gets the hash code of the vector object. </summary>
      <returns>Hash code of the vector object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Hermite spline interpolation. </summary>
      <returns>The result of the Hermite spline interpolation.</returns>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a Hermite spline interpolation. </summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Left">
      <summary>Returns a unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> designating left (−1, 0, 0).</summary>
      <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> pointing left.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Length">
      <summary>Calculates the length of the vector. </summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.LengthSquared">
      <summary>Calculates the length of the vector squared. </summary>
      <returns>The length of the vector squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a linear interpolation between two vectors. </summary>
      <returns>The linear interpolation of the two vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Performs a linear interpolation between two vectors. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />. </param>
      <param name="result">[OutAttribute] The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the highest value from each matching pair of components. </summary>
      <returns>The maximized vector.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components. </summary>
      <returns>The minimized vector.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Multiplies the components of two vectors by each other. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Multiplies a vector by a scalar value. </summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction. </summary>
      <returns>Vector pointing in the opposite direction.</returns>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns a vector pointing in the opposite direction. </summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize">
      <summary>Turns the current vector into a unit vector. The result is a vector one unit in length pointing in the same direction as the original vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a unit vector from the specified vector. The result is a vector one unit in length pointing in the same direction as the original vector. </summary>
      <returns>The created unit vector.</returns>
      <param name="value">The source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Creates a unit vector from the specified vector, writing the result to a user-specified variable. The result is a vector one unit in length pointing in the same direction as the original vector. </summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] The normalized vector.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.One">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with ones in all of its components.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Vector3" /> with ones in all of its components.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors. </summary>
      <returns>Sum of the vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector. </summary>
      <returns>The result of dividing the vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value. </summary>
      <returns>The source vector divided by div.</returns>
      <param name="value">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for equality. </summary>
      <returns>true if the vectors are equal; false otherwise.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for inequality. </summary>
      <returns>true if the vectors are not equal; false otherwise.</returns>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies a vector by a scalar value. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction. </summary>
      <returns>Vector pointing in the opposite direction.</returns>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal. </summary>
      <returns>The reflected vector.</returns>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of the surface.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Returns the reflection of a vector off a surface that has the specified normal. </summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Normal of the surface.</param>
      <param name="result">[OutAttribute] The reflected vector.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Right">
      <summary>Returns a unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> pointing to the right (1, 0, 0).</summary>
      <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> pointing to the right.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Interpolates between two values using a cubic equation. </summary>
      <returns>Interpolated value.</returns>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single,Microsoft.Xna.Framework.Vector3@)">
      <summary>Interpolates between two values using a cubic equation. </summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <param name="result">[OutAttribute] The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Subtracts a vector from a vector. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.ToString">
      <summary>Retrieves a string representation of the current object. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector by the given matrix. </summary>
      <returns>The transformed vector.</returns>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation. </summary>
      <returns>Returns a new <see cref="T:Microsoft.Xna.Framework.Vector3" /> that results from the rotation.</returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to rotate.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the given <see cref="T:Microsoft.Xna.Framework.Matrix" />.</summary>
      <param name="position">The source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
      <param name="result">[OutAttribute] The transformed vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation.</summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to rotate.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="result">[OutAttribute] An existing <see cref="T:Microsoft.Xna.Framework.Vector3" /> filled in with the results of the rotation. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms a source array of <see cref="T:Microsoft.Xna.Framework.Vector3" />s by a specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and writes the results to an existing destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="matrix">The transform <see cref="T:Microsoft.Xna.Framework.Matrix" /> to apply.</param>
      <param name="destinationArray">An existing destination array into which the transformed <see cref="T:Microsoft.Xna.Framework.Vector3" />s are written.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms a source array of <see cref="T:Microsoft.Xna.Framework.Vector3" />s by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation and writes the results to an existing destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="destinationArray">An existing destination array into which the transformed <see cref="T:Microsoft.Xna.Framework.Vector3" />s are written.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Applies a specified transform <see cref="T:Microsoft.Xna.Framework.Matrix" /> to a specified range of an array of <see cref="T:Microsoft.Xna.Framework.Vector3" />s and writes the results into a specified range of a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index in the source array at which to start.</param>
      <param name="matrix">The transform <see cref="T:Microsoft.Xna.Framework.Matrix" /> to apply.</param>
      <param name="destinationArray">The existing destination array.</param>
      <param name="destinationIndex">The index in the destination array at which to start.</param>
      <param name="length">The number of <see cref="T:Microsoft.Xna.Framework.Vector3" />s to transform.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result or the combination of <paramref name="sourceIndex" /> and <paramref name="length" /> was greater than <paramref name="sourceArray.Length" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Applies a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to a specified range of an array of <see cref="T:Microsoft.Xna.Framework.Vector3" />s and writes the results into a specified range of a destination array.</summary>
      <param name="sourceArray">The source array.</param>
      <param name="sourceIndex">The index in the source array at which to start.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="destinationArray">The existing destination array.</param>
      <param name="destinationIndex">The index in the destination array at which to start.</param>
      <param name="length">The number of <see cref="T:Microsoft.Xna.Framework.Vector3" />s to transform.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result or the combination of <paramref name="sourceIndex" /> and <paramref name="length" /> was greater than <paramref name="sourceArray.Length" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector normal by a matrix. </summary>
      <returns>The transformed vector normal.</returns>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3@)">
      <summary>Transforms a vector normal by a matrix. </summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <param name="result">[OutAttribute] The <see cref="T:Microsoft.Xna.Framework.Vector3" /> resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[])">
      <summary>Transforms an array of 3D vector normals by a specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.</summary>
      <param name="sourceArray">The array of <see cref="T:Microsoft.Xna.Framework.Vector3" /> normals to transform.</param>
      <param name="matrix">The transformation matrix.</param>
      <param name="destinationArray">An existing <see cref="T:Microsoft.Xna.Framework.Vector3" /> array into which the results of the transforms are written.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector3[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of 3D vector normals by a specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> and writes the results to a specified range in a destination array.</summary>
      <param name="sourceArray">The source array of <see cref="T:Microsoft.Xna.Framework.Vector3" /> normals.</param>
      <param name="sourceIndex">The starting index in the source array.</param>
      <param name="matrix">The transform <see cref="T:Microsoft.Xna.Framework.Matrix" /> to apply.</param>
      <param name="destinationArray">The destination <see cref="T:Microsoft.Xna.Framework.Vector3" /> array.</param>
      <param name="destinationIndex">The starting index in the destination array.</param>
      <param name="length">The number of vectors to transform.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result or the combination of <paramref name="sourceIndex" /> and <paramref name="length" /> was greater than <paramref name="sourceArray.Length" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitX">
      <summary>Returns the x unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> (1, 0, 0).</summary>
      <returns>Returns the x unit <see cref="T:Microsoft.Xna.Framework.Vector3" />.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitY">
      <summary>Returns the y unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> (0, 1, 0).</summary>
      <returns>Returns the y unit <see cref="T:Microsoft.Xna.Framework.Vector3" />. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitZ">
      <summary>Returns the z unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> (0, 0, 1).</summary>
      <returns>Returns the z unit <see cref="T:Microsoft.Xna.Framework.Vector3" />.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Up">
      <summary>Returns a unit vector designating up (0, 1, 0). </summary>
      <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector3" /> pointing up.</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.X">
      <summary>Gets or sets the x-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Y">
      <summary>Gets or sets the y-component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Z">
      <summary>Gets or sets the z-component of the vector.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Zero">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector3" /> with all of its components set to zero.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Vector3" /> with all of its components set to zero.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector4">
      <summary>Defines a vector with four components. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="value">A vector containing the values to initialize x, y, and z components with.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single)">
      <summary>Creates a new instance of <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="x">Initial value for the x-component of the vector.</param>
      <param name="y">Initial value for the y-component of the vector.</param>
      <param name="z">Initial value for the z-component of the vector.</param>
      <param name="w">Initial value for the w-component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors. </summary>
      <returns>Sum of the two vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Adds two vectors. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] Sum of the source vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single,System.Single)">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing the 4D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 4D triangle.</summary>
      <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing the 4D Cartesian coordinates of the specified point.</returns>
      <param name="value1">A <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing the 4D Cartesian coordinates of a point specified in barycentric (areal) coordinates relative to a 4D triangle.</summary>
      <param name="value1">A <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
      <param name="value2">A <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
      <param name="value3">A <see cref="T:Microsoft.Xna.Framework.Vector4" /> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
      <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2" />).</param>
      <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3" />).</param>
      <param name="result">[OutAttribute] The 4D Cartesian coordinates of the specified point are placed in this <see cref="T:Microsoft.Xna.Framework.Vector4" /> on exit.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions. </summary>
      <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">The fourth position in the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions. </summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] A vector that is the result of the Catmull-Rom interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Restricts a value to be within a specified range. </summary>
      <returns>The clamped value.</returns>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Restricts a value to be within a specified range. </summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <param name="result">[OutAttribute] The clamped value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors. </summary>
      <returns>Distance between the source vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the distance between two vectors. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors squared. </summary>
      <returns>The distance between the source vectors squared.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the distance between two vectors squared. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The distance between the two vectors squared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector. </summary>
      <returns>The result of dividing the vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value. </summary>
      <returns>The source vector divided by b.</returns>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Divides the components of a vector by the components of another vector. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Divides a vector by a scalar value. </summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <param name="result">[OutAttribute] The result of the division.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the dot product of two vectors. </summary>
      <returns>The dot product of the two vectors.</returns>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single@)">
      <summary>Calculates the dot product of two vectors. </summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <param name="result">[OutAttribute] The dot product of the two vectors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(Microsoft.Xna.Framework.Vector4)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the <see cref="T:Microsoft.Xna.Framework.Vector4" />.</summary>
      <returns>true if the specified <see cref="T:Microsoft.Xna.Framework.Vector4" /> is equal to the current <see cref="T:Microsoft.Xna.Framework.Vector4" />; false otherwise.</returns>
      <param name="other">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> to compare with the current <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">Object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.GetHashCode">
      <summary>Gets the hash code of this object. </summary>
      <returns>Hash code of the vector object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Hermite spline interpolation. </summary>
      <returns>The result of the Hermite spline interpolation.</returns>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a Hermite spline interpolation. </summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <param name="result">[OutAttribute] The result of the Hermite spline interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Length">
      <summary>Calculates the length of the vector. </summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.LengthSquared">
      <summary>Calculates the length of the vector squared. </summary>
      <returns>The length of the vector squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a linear interpolation between two vectors. </summary>
      <returns>The linear interpolation of the two vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Performs a linear interpolation between two vectors. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="value2" />.</param>
      <param name="result">[OutAttribute] The result of the interpolation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the highest value from each matching pair of components. </summary>
      <returns>The maximized vector.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector that contains the highest value from each matching pair of components. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The maximized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components. </summary>
      <returns>The minimized vector.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The minimized vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Multiplies the components of two vectors by each other. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Multiplies a vector by a scalar value. </summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <param name="result">[OutAttribute] The result of the multiplication.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction. </summary>
      <returns>Vector pointing in the opposite direction.</returns>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a vector pointing in the opposite direction. </summary>
      <param name="value">Source vector.</param>
      <param name="result">[OutAttribute] Vector pointing in the opposite direction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize">
      <summary>Turns the current vector into a unit vector. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates a unit vector from the specified vector. </summary>
      <returns>The created unit vector.</returns>
      <param name="vector">The source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Returns a normalized version of the specified vector. </summary>
      <param name="vector">Source vector.</param>
      <param name="result">[OutAttribute] The normalized vector.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.One">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> with all of its components set to one.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Vector4" /> with all of its components set to one. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Addition(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors. </summary>
      <returns>Sum of the vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector. </summary>
      <returns>The result of dividing the vectors.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value. </summary>
      <returns>The source vector divided by div.</returns>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Equality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for equality. </summary>
      <returns>true if the vectors are equal; false otherwise.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Inequality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for inequality. </summary>
      <returns>true if the vectors are not equal; false otherwise.</returns>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies a vector by a scalar. </summary>
      <returns>Result of the multiplication.</returns>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value1">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Subtraction(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_UnaryNegation(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction. </summary>
      <returns>Vector pointing in the opposite direction.</returns>
      <param name="value">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Interpolates between two values using a cubic equation. </summary>
      <returns>Interpolated value.</returns>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,System.Single,Microsoft.Xna.Framework.Vector4@)">
      <summary>Interpolates between two values using a cubic equation. </summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <param name="result">[OutAttribute] The interpolated value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector. </summary>
      <returns>Result of the subtraction.</returns>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Subtracts a vector from a vector. </summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="result">[OutAttribute] The result of the subtraction.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.ToString">
      <summary>Retrieves a string representation of the current object. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the given <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <returns>The transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
      <param name="position">The source <see cref="T:Microsoft.Xna.Framework.Vector2" />.</param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> into a <see cref="T:Microsoft.Xna.Framework.Vector4" />.</summary>
      <returns>Returns the <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> to transform.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by the given <see cref="T:Microsoft.Xna.Framework.Matrix" />.</summary>
      <param name="position">The source <see cref="T:Microsoft.Xna.Framework.Vector2" />. </param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />. </param>
      <param name="result">[OutAttribute] The <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector2" /> by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> into a <see cref="T:Microsoft.Xna.Framework.Vector4" />.</summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector2" /> to transform.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="result">[OutAttribute] The <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the given <see cref="T:Microsoft.Xna.Framework.Matrix" />.</summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</returns>
      <param name="position">The source <see cref="T:Microsoft.Xna.Framework.Vector3" />.</param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> into a <see cref="T:Microsoft.Xna.Framework.Vector4" />.</summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to transform.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by the given <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="position">The source <see cref="T:Microsoft.Xna.Framework.Vector3" />. </param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />. </param>
      <param name="result">[OutAttribute] The <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector3" /> by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> into a <see cref="T:Microsoft.Xna.Framework.Vector4" />.</summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector3" /> to transform.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="result">[OutAttribute] The <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by the specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.</summary>
      <returns>The transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />.</returns>
      <param name="vector">The source <see cref="T:Microsoft.Xna.Framework.Vector4" />.</param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Quaternion)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</returns>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> to transform.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by the given <see cref="T:Microsoft.Xna.Framework.Matrix" />. </summary>
      <param name="vector">The source <see cref="T:Microsoft.Xna.Framework.Vector4" />. </param>
      <param name="matrix">The transformation <see cref="T:Microsoft.Xna.Framework.Matrix" />. </param>
      <param name="result">[OutAttribute] The <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4@,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4@)">
      <summary>Transforms a <see cref="T:Microsoft.Xna.Framework.Vector4" /> by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />. </summary>
      <param name="value">The <see cref="T:Microsoft.Xna.Framework.Vector4" /> to transform.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="result">[OutAttribute] The <see cref="T:Microsoft.Xna.Framework.Vector4" /> resulting from the transformation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[])">
      <summary>Transforms an array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s by a specified <see cref="T:Microsoft.Xna.Framework.Matrix" />.</summary>
      <param name="sourceArray">The array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s to transform.</param>
      <param name="matrix">The transform <see cref="T:Microsoft.Xna.Framework.Matrix" /> to apply.</param>
      <param name="destinationArray">The existing destination array into which the transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />s are written.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[])">
      <summary>Transforms an array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" />.</summary>
      <param name="sourceArray">The array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s to transform.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="destinationArray">The existing destination array into which the transformed <see cref="T:Microsoft.Xna.Framework.Vector4" />s are written.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Matrix@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s by a specified <see cref="T:Microsoft.Xna.Framework.Matrix" /> into a specified range in a destination array. </summary>
      <param name="sourceArray">The array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s containing the range to transform.</param>
      <param name="sourceIndex">The index in the source array of the first <see cref="T:Microsoft.Xna.Framework.Vector4" /> to transform.</param>
      <param name="matrix">The transform <see cref="T:Microsoft.Xna.Framework.Matrix" /> to apply.</param>
      <param name="destinationArray">The existing destination array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s into which to write the results.</param>
      <param name="destinationIndex">The index in the destination array of the first result <see cref="T:Microsoft.Xna.Framework.Vector4" /> to write.</param>
      <param name="length">The number of <see cref="T:Microsoft.Xna.Framework.Vector4" />s to transform.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result or the combination of <paramref name="sourceIndex" /> and <paramref name="length" /> was greater than <paramref name="sourceArray.Length" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4[],System.Int32,Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector4[],System.Int32,System.Int32)">
      <summary>Transforms a specified range in an array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s by a specified <see cref="T:Microsoft.Xna.Framework.Quaternion" /> into a specified range in a destination array. </summary>
      <param name="sourceArray">The array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s containing the range to transform.</param>
      <param name="sourceIndex">The index in the source array of the first <see cref="T:Microsoft.Xna.Framework.Vector4" /> to transform.</param>
      <param name="rotation">The <see cref="T:Microsoft.Xna.Framework.Quaternion" /> rotation to apply.</param>
      <param name="destinationArray">The existing destination array of <see cref="T:Microsoft.Xna.Framework.Vector4" />s into which to write the results.</param>
      <param name="destinationIndex">The index in the destination array of the first result <see cref="T:Microsoft.Xna.Framework.Vector4" /> to write.</param>
      <param name="length">The number of <see cref="T:Microsoft.Xna.Framework.Vector4" />s to transform.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationArray" /> is too small to contain the result or the combination of <paramref name="sourceIndex" /> and <paramref name="length" /> was greater than <paramref name="sourceArray.Length" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> or <paramref name="destinationArray" /> is null. </exception>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitW">
      <summary>Returns the <see cref="T:Microsoft.Xna.Framework.Vector4" /> (0, 0, 0, 1).</summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (0, 0, 0, 1).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitX">
      <summary>Returns the <see cref="T:Microsoft.Xna.Framework.Vector4" /> (1, 0, 0, 0).</summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (1, 0, 0, 0).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitY">
      <summary>Returns the <see cref="T:Microsoft.Xna.Framework.Vector4" /> (0, 1, 0, 0). </summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (0, 1, 0, 0).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitZ">
      <summary>Returns the <see cref="T:Microsoft.Xna.Framework.Vector4" /> (0, 0, 1, 0).</summary>
      <returns>The <see cref="T:Microsoft.Xna.Framework.Vector4" /> (0, 0, 1, 0).</returns>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.W">
      <summary>Gets or sets the w-component of the vector. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.X">
      <summary>Gets or sets the x-component of the vector. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Y">
      <summary>Gets or sets the y-component of the vector. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Z">
      <summary>Gets or sets the z-component of the vector. </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.Zero">
      <summary>Returns a <see cref="T:Microsoft.Xna.Framework.Vector4" /> with all of its components set to zero.</summary>
      <returns>A <see cref="T:Microsoft.Xna.Framework.Vector4" /> with all of its components set to zero.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565">
      <summary>Packed vector type containing unsigned normalized values ranging from 0 to 1. The x and z components use 5 bits, and the y component uses 6 bits. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565" /> structure. </summary>
      <param name="vector">A vector containing the initial values for the components of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565" /> structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565" /> class. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.GetHashCode">
      <summary>Gets the hash code for the current instance. </summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same. </summary>
      <returns>true if the objects are the same; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <returns>true if the objects are different; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToVector3">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector3" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 4 bits each for x, y, z, and w. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates an instance of this object. </summary>
      <param name="vector">Input value for all four components (xyzw).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Creates an instance of this object. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444)">
      <summary>Tests an object to see if it is equal to this object. </summary>
      <returns>true if they are equal, false otherwise.</returns>
      <param name="other">The object to test.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Equals(System.Object)">
      <summary>Tests an object to see if it is equal to this object. </summary>
      <returns>true if they are equal; otherwise false.</returns>
      <param name="obj">The object to test.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.GetHashCode">
      <summary>Gets the hash code for this object. </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Converts a four-component vector into the format for this object. </summary>
      <param name="vector">The four-component vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444)">
      <summary>Equality operator, which compares two objects to see if they are equal. </summary>
      <returns>true if the objects are equal; otherwise false.</returns>
      <param name="a">The first object.</param>
      <param name="b">The second object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444)">
      <summary>Tests two objects to see if they are not equal. </summary>
      <returns>true if the objects are not equal, false otherwise.</returns>
      <param name="a">The first object.</param>
      <param name="b">The second object.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.PackedValue">
      <summary>Gets or sets the packed representation of the vector. </summary>
      <returns>The packed vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.ToString">
      <summary>Returns a string representation. </summary>
      <returns>The string that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra4444.ToVector4">
      <summary>Unpacks this object to a four-component vector.</summary>
      <returns>A four-component vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 5 bits each for x, y, and z, and 1 bit for w. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551" /> structure. </summary>
      <param name="vector">A vector containing the initial values for the components of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551" /> structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551" /> structure. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same. </summary>
      <returns>true if the objects are the same; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different. </summary>
      <returns>true if the objects are different; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4">
      <summary>Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4" /> structure. </summary>
      <param name="vector">A vector containing the initial values for the components of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4" /> structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4" /> structure. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.GetHashCode">
      <summary>Gets the hash code for the current instance. </summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a <see cref="T:Microsoft.Xna.Framework.Vector4" />.</summary>
      <param name="vector">The vector to create packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same. </summary>
      <returns>true if the objects are the same; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different. </summary>
      <returns>true if the objects are different; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToString">
      <summary>Returns a string representation of the current instance. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector">
      <summary>Interface that converts packed vector types to and from <see cref="T:Microsoft.Xna.Framework.Vector4" /> values, allowing multiple encodings to be manipulated in a generic way. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1">
      <summary>Converts packed vector types to and from <see cref="T:Microsoft.Xna.Framework.Vector4" /> values. </summary>
      <typeparam name="TPacked">The type of the packed vector. </typeparam>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2">
      <summary>Packed vector type containing two 8-bit signed normalized values, ranging from −1 to 1. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2" /> structure. </summary>
      <param name="vector">A vector containing the initial values for the components of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2" /> structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2" /> structure. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.GetHashCode">
      <summary>Gets the hash code for the current instance. </summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a Vector4. </summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <returns>true if the objects are the same; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different. </summary>
      <returns>true if the objects are different; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToString">
      <summary>Returns a string representation of the current instance. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToVector2">
      <summary>Expands the packed representation to a vector. </summary>
      <returns>The expanded <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2" />.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4">
      <summary>Packed vector type containing four 8-bit signed normalized values, ranging from −1 to 1. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4" /> structure. </summary>
      <param name="vector">A vector containing the initial values for the components of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4" /> structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4" /> structure. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.GetHashCode">
      <summary>Gets the hash code for the current instance. </summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same. </summary>
      <returns>true if the objects are the same; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different. </summary>
      <returns>true if the objects are different; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2">
      <summary>Packed vector type containing two 16-bit signed normalized values, ranging from −1 to 1. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2" /> structure. </summary>
      <param name="vector">A vector containing the initial values for the components of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2" /> structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2" /> structure. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.GetHashCode">
      <summary>Gets the hash code for the current instance. </summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a <see cref="T:Microsoft.Xna.Framework.Vector4" />.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same. </summary>
      <returns>true if the objects are the same; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different. </summary>
      <returns>true if the objects are different; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToString">
      <summary>Returns a string representation of the current instance. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToVector2">
      <summary>Expands the packed representation to a vector. </summary>
      <returns>The expanded <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2" />.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4">
      <summary>Packed vector type containing four 16-bit signed normalized values, ranging from −1 to 1. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4" /> structure. </summary>
      <param name="vector">A vector containing the initial values for the components of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4" /> structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4" /> structure. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.GetHashCode">
      <summary>Gets the hash code for the current instance. </summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same. </summary>
      <returns>true if the objects are the same; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different. </summary>
      <returns>true if the objects are different; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToString">
      <summary>Returns a string representation of the current instance. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short2">
      <summary>Packed vector type containing two 16-bit signed integer values. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short2" /> structure. </summary>
      <param name="vector">A vector containing the initial values for the components of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short2" /> structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short2" /> structure. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.GetHashCode">
      <summary>Gets the hash code for the current instance. </summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same. </summary>
      <returns>true if the objects are the same; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different. </summary>
      <returns>true if the objects are different; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToString">
      <summary>Returns a string representation of the current instance. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToVector2">
      <summary>Expands the packed representation to a vector. </summary>
      <returns>The expanded <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short2" />.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4">
      <summary>Packed vector type containing four 16-bit signed integer values. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4" /> structure. </summary>
      <param name="vector">A vector containing the initial values for the components of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4" /> structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4" /> structure. </summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="other">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object. </summary>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
      <param name="obj">The object with which to make the comparison.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.GetHashCode">
      <summary>Gets the hash code for the current instance. </summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Microsoft#Xna#Framework#Graphics#PackedVector#IPackedVector#PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same. </summary>
      <returns>true if the objects are the same; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different. </summary>
      <returns>true if the objects are different; false otherwise.</returns>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value. </summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToString">
      <summary>Returns a string representation of the current instance. </summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToVector4">
      <summary>Expands the packed representation into a <see cref="T:Microsoft.Xna.Framework.Vector4" />. </summary>
      <returns>The expanded vector.</returns>
    </member>
  </members>
</doc>