/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : AssetsManager.cs
 * File Description : Manager for the assets of engine
 * Generated by     : Pooya Eimandar
 * Last modified by : By Pooya Eimandar 2.27.2014
 * Comment          : AssetTag added, some textures were disposed can not add again
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Linq;

struct AssetTag
{
    public int _ref;
    public string _path;

    public AssetTag(int Ref, string Path)
    {
        _ref = Ref;
        _path = Path;
    }
}

public static class AssetsManager
{
    #region Fields & Properties

    static Dictionary<string, Texture2D> Textures;
    static AssetsManager()
    {
        Textures = new Dictionary<string, Texture2D>();
    }

    #endregion

    #region Texture

    public static void DDSTextureFromFile(GraphicsDevice GDevice, string path, ref Texture2D texture2D)
    {
        //First search in textures
        texture2D = GetTexture(path);
        if (texture2D != null) return;

        if (System.IO.File.Exists(path))
        {
            try
            {
                DDSLib.DDSFromFile(path, GDevice, true, out texture2D);

                //Add ref count with path
                texture2D.Tag = new AssetTag(1, path);
                Textures.Add(path, texture2D);
            }
            catch (Exception ex)
            {
                Logger.WriteError("Could not load texture on following path : " + path);
            }
        }
        else
        {
            Logger.WriteWarning(string.Format("Texture on following path is not exist{0}", path));
        }
    }

    public static void Texture2DFromFile(GraphicsDevice GDevice, string path, ref Texture2D texture2D)
    {
        if (System.IO.File.Exists(path))
        {
            //First search in textures
            texture2D = GetTexture(path);
            if (texture2D != null) return;

            try
            {
                using (var stream = new System.IO.StreamReader(path))
                {
                    stream.BaseStream.Flush();
                    texture2D = Texture2D.FromStream(GDevice, stream.BaseStream);
                    stream.Close();
                };
                //Add ref count
                texture2D.Tag = new AssetTag(1, path);
                Textures.Add(path, texture2D);
            }
            catch(Exception ex)
            {
                Logger.WriteError(string.Format("Could not load texture on following path {0}", path));
            }
        }
        else
        {
            Logger.WriteWarning(string.Format("Texture on following path is not exist{0}", path));
        }
    }

    public static void RemoveTexture(string path)
    {
        Textures.Remove(path);
    }

    /// <summary>
    /// This textures will not support ref count
    /// </summary>
    /// <param name="color"></param>
    /// <param name="width"></param>
    /// <param name="height"></param>
    /// <param name="value"></param>
    public static void CreateTextureFromColor(GraphicsDevice GDevice, Color color, int width, int height, ref Texture2D value)
    {
        value = new Texture2D(GDevice, width, height);
        value.SetData(Enumerable.Repeat(color, width * height).ToArray());
    }

    /// <summary>
    /// Find textures and return if exist 
    /// </summary>
    private static Texture2D GetTexture(string path)
    {
        Texture2D t = null;
        var find = Textures.TryGetValue(path, out t);
        if (find)
        {
            //Plus ref count
            var tag = (AssetTag)t.Tag;
            tag._ref++;
            t.Tag = tag;
            return t;
        }
        return null;
    }

    #endregion
}
