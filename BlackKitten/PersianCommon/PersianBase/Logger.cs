/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Logger.cs
 * File Description : The logger
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 5/15/2013
 * Comment          : 
 */
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;


/// <summary>
/// for enabling this section just in debug tab, enable the visual Studio hosting process
/// </summary>
public class Logger
{
    #region Constanst

    public static string CompanyInfo = " (c) " + DateTime.Now.Year + " Bazipardaz - All rights reserved.";

    #endregion

#if SILVERLIGHT

    private static string ResolveLog()
    {
        string requestedLogLevel = null;
        System.Windows.Browser.HtmlPage.Document.QueryString.TryGetValue("log", out requestedLogLevel);
        return requestedLogLevel;
    }

    public static void WriteError(string Message)
    {
        string requestedLogLevel = ResolveLog();

        if (requestedLogLevel != null && requestedLogLevel.ToLower() == "debug")
        {
            System.Windows.Browser.HtmlPage.Window.Invoke("LogError", Message);
        }
    }

    public static void WriteWarning(string Message)
    {
        string requestedLogLevel = ResolveLog();

        if (requestedLogLevel != null && requestedLogLevel.ToLower() == "debug")
        {
            System.Windows.Browser.HtmlPage.Window.Invoke("LogWarning", Message);
        }
    }

    public static void WriteLine(string Message)
    {
        string requestedLogLevel = ResolveLog();

        if (requestedLogLevel != null && requestedLogLevel.ToLower() == "debug")
        {
            System.Windows.Browser.HtmlPage.Window.Invoke("LogInfo", Message);
        }
    }

#else

    #region Fields & Properties

    static bool _UseConsole = true;
    static ConsoleColor BaseColor = ConsoleColor.Gray;
    static ConsoleColor ErrorColor = ConsoleColor.Red;
    static ConsoleColor WarningColor = ConsoleColor.Yellow;
    static ConsoleColor NoticeColor = ConsoleColor.Cyan;
    static TextWriterTraceListener TextListener;

    /// <summary>
    /// Allocates a new console for current process.
    /// </summary>
    [DllImport("kernel32.dll")]
    public static extern Boolean AllocConsole();

    /// <summary>
    /// Frees the console.
    /// </summary>
    [DllImport("kernel32.dll")]
    public static extern Boolean FreeConsole();

    #endregion

    #region Public Methods

    /// <summary>
    /// Start logger
    /// </summary>
    /// <param name="UseConsole">Editor uses console but engine does not use it</param>
    /// <param name="Version"></param>
    /// <returns></returns>
    public static string Start(string CurrentDir, bool UseConsole, string Version)
    {
        string HResult = null;
        string LogPathFile = GenerateUniqueLogName(CurrentDir, UseConsole);
        _UseConsole = UseConsole;
        if (UseConsole)
        {
            //Use both file and Console
            AllocConsole();
        }
        HResult = BindConsoleToLoggerFile(LogPathFile, UseConsole);
        WriteProjectInfo(UseConsole, Version, LogPathFile);
        return HResult;
    }

    public static void WriteError(string Message)
    {
        if (_UseConsole)
        {
            Console.Beep();
            Console.ForegroundColor = ErrorColor;
        }
        WriteLine(Message);
        if (_UseConsole)
        {
            Console.ForegroundColor = BaseColor;
        }
    }

    public static void WriteWarning(string Message)
    {
        if (_UseConsole)
        {
            Console.ForegroundColor = WarningColor;
        }
        WriteLine(Message);
        if (_UseConsole)
        {
            Console.ForegroundColor = BaseColor;
        }
    }

    public static void WriteNotice(string Message)
    {
        if (_UseConsole)
        {
            Console.ForegroundColor = NoticeColor;
        }
        WriteLine(Message);
        if (_UseConsole)
        {
            Console.ForegroundColor = BaseColor;
        }
    }

    public static void WriteLine(string Message)
    {
        if (_UseConsole)
        {
            Console.WriteLine(Message);
        }
        Trace.WriteLine(Message);
    }

    public static void WriteLine(string Message, ConsoleColor Color)
    {
        if (_UseConsole)
        {
            Console.ForegroundColor = Color;
        }
        WriteLine(Message);
        if (_UseConsole)
        {
            Console.ForegroundColor = BaseColor;
        }
    }

    public static void ChangeColor(ConsoleColor Color)
    {
        if (_UseConsole)
        {
            BaseColor = Color;
            Console.ForegroundColor = BaseColor;
        }
    }

    public static void ResetColors()
    {
        if (_UseConsole)
        {
            ChangeColor(ConsoleColor.Gray);
        }
    }

    #endregion

    #region Private Methods

    private static string ToStandardFormat(int data)
    {
        return data < 10 ? "0" + data : data.ToString();
    }

    private static void WriteProjectInfo(bool CallFromEditor, string Version, string LogPathFile)
    {
        string Message = string.Empty;
        ConsoleColor consoleColor;
        if (CallFromEditor)
        {
            consoleColor = ConsoleColor.Cyan;
            Message = string.Format("Editor of Persian Engine {0}", Version);
            Logger.ChangeColor(consoleColor);
            //Console.Beep();
            Console.Title = "Persian Debugger";
        }
        else
        {
            consoleColor = ConsoleColor.Gray;
            Message = string.Format("Persian Engine (version {0})", Version);
        }

        Logger.WriteLine("+++++++++++++++++");
        Logger.WriteLine(Message);
        Logger.WriteLine("Pooya-Eimandar.com");
        Logger.WriteLine(CompanyInfo);
        Logger.WriteLine("+++++++++++++++++");
        Logger.ResetColors();
        Logger.WriteLine(string.Format("Log path : {0} ", LogPathFile));
    }

    private static string BindConsoleToLoggerFile(string path, bool CallFromEditor)
    {
        string HResult = null;

        try
        {
            System.IO.DirectoryInfo parent = System.IO.Directory.GetParent(path);
            if (!parent.Exists)
            {
                System.IO.Directory.CreateDirectory(parent.FullName);
            }
            Trace.Listeners.Clear();

            TextListener = new TextWriterTraceListener(path)
            {
                Name = string.Format("Logger of Persian {0}", CallFromEditor ? "Editor" : "Engine"),
                TraceOutputOptions = TraceOptions.None,
            };

            Trace.Listeners.Add(TextListener);
            Trace.AutoFlush = true;
        }
        catch (Exception ex)
        {
            HResult = string.Format("{0} with following inner exception : {1}",
                ex.Message, ex.InnerException == null || String.IsNullOrEmpty(ex.InnerException.ToString()) ? "NULL" : ex.InnerException.ToString());
        }
        return HResult;
    }

    private static string GenerateUniqueLogName(string CurrentDir, bool CallFromEditor)
    {
        return CurrentDir + @"\Logs\" +
                string.Format("{0}_Log_{1}_{2}_{3}_{4}_{5}_{6}.txt",
                CallFromEditor ? "Editor" : "Engine",
                ToStandardFormat(DateTime.Now.Month),
                ToStandardFormat(DateTime.Now.Day),
                ToStandardFormat(DateTime.Now.Year),
                ToStandardFormat(DateTime.Now.Hour),
                ToStandardFormat(DateTime.Now.Minute),
                ToStandardFormat(DateTime.Now.Second));
    }

    #endregion

    #region Dispose

    public static void Dispose()
    {
        TextListener.Flush();
        TextListener.Close();
        Console.In.Close();
        Console.Out.Close();
    }

    #endregion

#endif
}