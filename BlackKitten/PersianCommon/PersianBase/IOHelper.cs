/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : IOHelper.cs
 * File Description : The helper class for input/output
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 7/29/2013
 * Comment          : 
 */
using System;
using System.IO;
using System.Linq;

public static class IOHelper
{
    /// <summary>
    /// Create directory on specific path
    /// </summary>
    /// <param name="path">destination path</param>
    /// <param name="RemoveExisting">if true means remove existing directory</param>
    /// <returns>Exception</returns>
    public static string CreateDirectory(string path, bool RemoveExisting)
    {
        string HResult = null;

        if (Directory.Exists(path))
        {
            if (RemoveExisting)
            {
                HResult = DeleteDirectory(path);
                if (HResult != null) return HResult;
            }
            else
            {
                return HResult;
            }
        }

        try
        {
            Directory.CreateDirectory(path);
        }
        catch (Exception ex)
        {
            HResult = ToStandardException(ex);
        }

        return HResult;
    }
    /// <summary>
    /// Copy files of source directory to destination directory
    /// </summary>
    /// <param name="SourceDirectory">Path of source folder</param>
    /// <param name="DestinationDirectory">Path of destination folder</param>
    /// <param name="RemoveExisting">if true means remove existing directory</param>
    /// <returns>Exception</returns>
    public static string CopyFiles(string SourceDirectory, string DestinationDirectory, bool RemoveExisting)
    {
        string HResult = null;
        try
        {
            if (Directory.Exists(DestinationDirectory) && RemoveExisting)
            {
                DeleteDirectory(DestinationDirectory);
            }
            Directory.CreateDirectory(DestinationDirectory);
            string Extention = string.Empty;
            string Name = string.Empty;
            foreach (string file in Directory.GetFiles(SourceDirectory))
            {
                Name = Path.GetFileNameWithoutExtension(file);
                Extention = Path.GetExtension(file);
                if (File.Exists(String.Concat(DestinationDirectory, @"\", Name, Extention)))
                {
                    continue;
                }
                File.Copy(file, String.Concat(DestinationDirectory, @"\", Name, Extention));
            }
        }
        catch (Exception ex)
        {
            HResult = ToStandardException(ex);
        }

        return HResult;
    }

    /// <summary>
    /// Copy contains of source directory to destination directory
    /// </summary>
    /// <param name="SourceDirectory">Path of source folder</param>
    /// <param name="DestinationDirectory">Path of destination folder</param>
    /// <param name="RemoveExisting">if true means remove existing directory</param>
    /// <returns>Exception</returns>
    public static string CopyDirectory(string SourceDirectory, string DestinationDirectory, bool RemoveExisting)
    {
        string HResult = null;
        try
        {
            if (Directory.Exists(DestinationDirectory))
            {
                if (RemoveExisting)
                {
                    HResult = DeleteDirectory(DestinationDirectory);
                    if (HResult != null) return HResult;
                }
            }
            Directory.CreateDirectory(DestinationDirectory);

            string Extention = string.Empty;
            string Name = string.Empty;

            #region Copy Files

            foreach (string file in Directory.GetFiles(SourceDirectory))
            {
                Name = Path.GetFileNameWithoutExtension(file);
                Extention = Path.GetExtension(file);
                if (File.Exists(String.Concat(DestinationDirectory, @"\", Name, Extention)))
                {
                    continue;
                }
                File.Copy(file, String.Concat(DestinationDirectory, @"\", Name, Extention));
            }

            #endregion

            #region Copy Directories

            foreach (string dir in Directory.GetDirectories(SourceDirectory))
            {
                Name = Path.GetFileNameWithoutExtension(dir);
                CopyDirectory(String.Concat(SourceDirectory, @"\", Name), String.Concat(DestinationDirectory, @"\", Name), RemoveExisting);
            }

            #endregion
        }
        catch (Exception ex)
        {
            HResult = ToStandardException(ex);
        }

        return HResult;
    }

    /// <summary>
    /// Copy file from sourcePath to destination path
    /// </summary>
    /// <param name="SourcePath">Path of source file</param>
    /// <param name="DestinationPath">Path of destination file</param>
    /// <param name="RemoveExisting">if true means remove existing file</param>
    /// <returns>Exception</returns>
    public static string CopyFile(string SourcePath, string DestinationPath, bool RemoveExisting)
    {
        string HResult = null;
        try
        {
            if (File.Exists(DestinationPath))
            {
                if (RemoveExisting)
                {
                    File.Delete(DestinationPath);
                }
                else
                {
                    return HResult;
                }
            }
            File.Copy(SourcePath, DestinationPath);
        }
        catch (Exception ex)
        {
            HResult = ToStandardException(ex);
        }

        return HResult;
    }

    public static string DeleteDirectory(string path)
    {
        return DeleteDirectory(path, new string[] { });
    }

    /// <summary>
    /// Delete directory
    /// </summary>
    /// <param name="path">Path of source directory</param>
    /// <param name="DoNotDeleteThese">These folder or files are not deleted</param>
    /// <returns>Exception</returns>
    public static string DeleteDirectory(string path, string[] DoNotDeleteThese)
    {
        string HResult = null;
        try
        {
            //First Delete their SubDirectory
            foreach (string sub in Directory.GetDirectories(path))
            {
                HResult = DeleteDirectory(sub, DoNotDeleteThese);
                if (HResult != null) return HResult;
            }

            //Now Delete files
            foreach (string file in Directory.GetFiles(path))
            {
                if (DoNotDeleteThese.Length == 0 || !Search(file, DoNotDeleteThese))
                {
                    File.Delete(file);
                }
            }

            //Finally Delete Directory
            if (DoNotDeleteThese.Length == 0 || !Search(path, DoNotDeleteThese))
            {
                Directory.Delete(path);
            }
        }
        catch (Exception ex)
        {
            HResult = ToStandardException(ex);
        }
        return HResult;
    }

    public static bool Search(string Destination, string[] ToBeSearching)
    {
        var Q = from q in ToBeSearching where q == Destination select q;
        if (Q.ToList().Count > 0)
        {
            return true;
        }
        return false;
    }

    public static string ToStandardException(Exception ex)
    {
        return string.Format("{0} with following inner exception : {1}", ex.Message, ex.InnerException == null || String.IsNullOrEmpty(ex.InnerException.ToString()) ? "NULL" : ex.InnerException.ToString());
    }
}
