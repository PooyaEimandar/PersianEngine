/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : KinectSensorChooser.cs
 * File Description : The sensor manager 
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/17/2013
 * Comment          : 
 */
using System.IO;
using System.Linq;
using Microsoft.Kinect;

namespace KinectLibrary
{
    public class KinectSensorChooser
    {
        #region Fields & Properties

        public KinectSensor Sensor { get; private set; }
        public KinectStatus LastStatus { get; private set; }

        #endregion

        #region Constructor/Destructor

        public KinectSensorChooser()
        {
            KinectSensor.KinectSensors.StatusChanged += this.KinectSensors_StatusChanged;
            this.DiscoverSensor();
        }

        #endregion

        #region Methods

        private void DiscoverSensor()
        {
            this.Sensor = KinectSensor.KinectSensors.FirstOrDefault();
            if (this.Sensor != null)
            {
                this.LastStatus = this.Sensor.Status;
                // If this sensor is connected, then enable it
                if (this.LastStatus == KinectStatus.Connected)
                {
                    this.Sensor.SkeletonStream.Enable();
                    try
                    {
                        this.Sensor.Start();
                    }
                    catch (IOException)
                    {
                        // sensor is in use by another application
                        // will treat as disconnected for display purposes
                        this.Sensor = null;
                    }
                }
            }
            else
            {
                this.LastStatus = KinectStatus.Disconnected;
            }
        }

        #endregion

        #region Events

        /// <summary>
        /// This wires up the status changed event to monitor for 
        /// Kinect state changes.  It automatically stops the sensor
        /// if the device is no longer available.
        /// </summary>
        /// <param name="sender">The sending object.</param>
        /// <param name="e">The event args.</param>
        private void KinectSensors_StatusChanged(object sender, StatusChangedEventArgs e)
        {
            // If the status is not connected, try to stop it
            if (e.Status != KinectStatus.Connected)
            {
                e.Sensor.Stop();
            }
            this.LastStatus = e.Status;
            this.DiscoverSensor();
        }

        #endregion

        #region Dispose

        public void Dispose()
        {
            if (this.Sensor != null)
            {
                this.Sensor.Stop();
            }
        }

        #endregion
    }
}
