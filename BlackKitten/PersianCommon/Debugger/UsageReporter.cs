/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : UsageReporter.cs
 * File Description : The usage reporter
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/19/2013
 * Comment          : 
 */

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace Debugger
{
    public class UsageReporter : Disposable
    {
        #region Constant

        const byte ConstY = 19;

        #endregion

        #region Fields & Properties

        public static DebugInfo debugInfo = new DebugInfo();

        bool ActiveFPS;
        TimeSpan elapsedTime;
        PerformanceCounter cpuCounter;
        PerformanceCounter ramCounter;

        Color FpsColor;
        /// <summary>
        /// Get frame per second
        /// </summary>
        public float Fps { get; private set; }
        public TimeSpan SampleSpan { get; set; }
        Stopwatch stopwatch;
        short sampleFrames;

        Color RAMColor;
        float availableRAM;
        /// <summary>
        /// Get available random access memory
        /// </summary>
        public string AvailableRAM
        {
            get
            {
                return String.Concat(this.availableRAM, "MB");
            }
        }

        Color CpuColor;
        float cpu;
        /// <summary>
        /// Get Cpu percentage
        /// </summary>
        public string CPU
        {
            get
            {
                return String.Concat(this.cpu, "%");
            }
        }

        Stopwatch DrawWatch;
        /// <summary>
        /// Time slice of draw
        /// </summary>
        public double DrawTimeMs
        {
            get;
            set;
        }

        Stopwatch GPUWatch;
        /// <summary>
        /// Time slice from Draw till start of update
        /// </summary>
        public double GPUTimeMs
        {
            get;
            set;
        }

        Stopwatch UpdateWatch;
        /// <summary>
        /// Slice time of update
        /// </summary>
        public double UpdateTimeMs
        {
            get;
            set;
        }
        
        #endregion

        #region Constructor/Destructor

        public UsageReporter()
        {
            this.ActiveFPS = true;
            this.elapsedTime = new TimeSpan();
            this.DrawWatch = new Stopwatch();
            this.GPUWatch = new Stopwatch();
            this.UpdateWatch = new Stopwatch();
            SampleSpan = TimeSpan.FromSeconds(1);
            stopwatch = Stopwatch.StartNew();
            cpuCounter = new PerformanceCounter("Processor", "% Processor Time", "_Total", true);
            ramCounter = new PerformanceCounter("Memory", "Available MBytes", true);
        }

        ~UsageReporter()
        {
        }

        #endregion
        
        #region Command

        /// <summary>
        /// FPS command implementation.
        /// </summary>
        private void CommandExecute(IDebugCommandHost host, string command, IList<string> arguments)
        {
            if (arguments.Count == 0)
                this.ActiveFPS = !this.ActiveFPS;

            foreach (string arg in arguments)
            {
                switch (arg.ToLower())
                {
                    case "on":
                        this.ActiveFPS = true;
                        break;
                    case "off":
                        this.ActiveFPS = false;
                        break;
                }
            }
        }

        #endregion

        #region Methods

        public void BeginDraw()
        {
            DrawWatch.Restart();
        }

        public void EndUpdate()
        {
            this.UpdateTimeMs = this.UpdateWatch.Elapsed.TotalMilliseconds;
            this.UpdateWatch.Stop();
        }

        #endregion

        #region Update

        public void Update(GameTime pGameTime)
        {
            this.UpdateWatch.Restart();
            this.GPUWatch.Stop();
            this.GPUTimeMs = GPUWatch.Elapsed.TotalMilliseconds;
            this.elapsedTime += pGameTime.ElapsedGameTime;

            if (stopwatch.Elapsed > SampleSpan)
            {
                // Update FPS value and start next sampling period.
                Fps = (float)sampleFrames / (float)stopwatch.Elapsed.TotalSeconds;

                stopwatch.Reset();
                stopwatch.Start();
                sampleFrames = 0;

                this.cpu = cpuCounter.NextValue();
                this.availableRAM = this.ramCounter.NextValue();

                #region Set Fps Color

                if (this.Fps < 25.0f)
                {
                    this.FpsColor = Color.Red;
                }
                else if (this.Fps < 45.0f)
                {
                    this.FpsColor = Color.Yellow;
                }
                else
                {
                    this.FpsColor = Color.Lime;
                }

                #endregion

                #region Set Cpu Color

                if (this.cpu < 50)
                {
                    this.CpuColor = Color.Lime;
                }
                else if (this.cpu < 80)
                {
                    this.CpuColor = Color.Yellow;
                }
                else
                {
                    this.CpuColor = Color.Red;
                }

                #endregion

                #region Set Ram Color

                if (this.availableRAM < 300)
                {
                    this.RAMColor = Color.Red;
                }
                else if (this.availableRAM < 800)
                {
                    this.RAMColor = Color.Yellow;
                }
                else
                {
                    this.RAMColor = Color.Lime;
                }

                #endregion
            }
        }

        #endregion

        #region Draw

        public void DrawStatus(SpriteBatch spriteBatch, SpriteFont Font, Texture2D WhiteTexture)
        {
#if DEBUG
            this.sampleFrames++;

            UsageReporter.debugInfo.Add(string.Format("Update:{0 : 00.0 ms}, Draw:{2 : 00.0 ms}, GPU:{2 : 00.0 ms}",
                this.UpdateTimeMs, this.DrawTimeMs, this.GPUTimeMs));
            UsageReporter.debugInfo.Add(string.Format("Visible light(s) : {0}", UsageReporter.debugInfo.VisibleLights));
            UsageReporter.debugInfo.Add(string.Format("Draw Call(s) : {0}", UsageReporter.debugInfo.DrawCalls));
            UsageReporter.debugInfo.Add(string.Format("Shadow Light(s) : {0}", UsageReporter.debugInfo.ShadowCasterLights));
            UsageReporter.debugInfo.Add(string.Format("Shadow Meshe(s) : {0}", UsageReporter.debugInfo.ShadowCasterMeshes));
            UsageReporter.debugInfo.Add(string.Format("Visible Particle(s) Sys : {0}", UsageReporter.debugInfo.VisibleParticleSystems));
            UsageReporter.debugInfo.Add(string.Format("Visible Model(s) : {0}", UsageReporter.debugInfo.VisibleModels));

            #region Compute size of border area and place strings inside it

            var size = Font.MeasureString("X");
            var rectangle = new Rectangle(0, 0,
                (int)(size.X * UsageReporter.debugInfo.XLenght * 0.63f),
                (int)(size.Y * UsageReporter.debugInfo.YLenght * 1.7f));

            var layout = new Layout(spriteBatch.GraphicsDevice.Viewport);
            rectangle = layout.Place(rectangle, 0.01f, 0.01f, Alignment.TopLeft);
            layout.ClientArea = rectangle;
            var Position = layout.Place(Font.MeasureString(UsageReporter.debugInfo.Get), 0.01f, 0, Alignment.TopLeft);

            #endregion

            spriteBatch.Begin();
            {
                spriteBatch.Draw(WhiteTexture, rectangle, new Color(0, 0, 0, 128));
                spriteBatch.DrawString(Font, "Powered by Persian Engine", Position, Color.Lime);
                Position.Y += ConstY;
                spriteBatch.DrawString(Font, string.Concat("FPS : ", this.Fps), Position, this.FpsColor);
                Position.Y += ConstY;
                spriteBatch.DrawString(Font, string.Concat("CPU : ", this.CPU), Position, this.CpuColor);
                Position.Y += ConstY;
                spriteBatch.DrawString(Font, string.Concat("Available RAM : ", this.AvailableRAM), Position, this.RAMColor);
                Position.Y += ConstY;
                spriteBatch.DrawString(Font, UsageReporter.debugInfo.Get, Position, Color.Lime);
                //if (Base.Shared.AllowRiding != Base.Shared.RideMode.NOP)
                //{
                //    if (Base.Shared.AllowRiding == Base.Shared.RideMode.ReadyToRide)
                //    {
                //        spriteBatch.DrawString(Font, "Press X for riding",
                //           new Vector2(spriteBatch.GraphicsDevice.PresentationParameters.BackBufferWidth / 2.0f - 30.0f,
                //           spriteBatch.GraphicsDevice.PresentationParameters.BackBufferHeight / 2.0f - 100.0f), Color.Red);
                //    }
                //    else if (Base.Shared.AllowRiding == Base.Shared.RideMode.Riding)
                //    {
                //        spriteBatch.DrawString(Font, "Press E for exiting",
                //            new Vector2(spriteBatch.GraphicsDevice.PresentationParameters.BackBufferWidth / 2.0f - 30.0f,
                //                        spriteBatch.GraphicsDevice.PresentationParameters.BackBufferHeight / 2.0f - 100.0f), Color.Red);
                //    }
                //}
                spriteBatch.End();
            }
#endif
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            this.cpuCounter.Close();
            SystemMemory.SafeDispose(this.cpuCounter);

            this.ramCounter.Close();
            SystemMemory.SafeDispose(this.ramCounter);
            base.Dispose(disposing);
        }

        #endregion

        public void EndDraw()
        {
            this.DrawWatch.Stop();
            this.DrawTimeMs = DrawWatch.Elapsed.TotalMilliseconds;
            this.GPUWatch.Restart();
        }
    }
}
