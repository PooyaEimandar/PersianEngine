/*
 * Copyright (C) Microsoft Corporation. All rights reserved.
 * 
 * File Name        : DebugToolsManager.cs
 * File Description : Microsoft XNA Community Game Platform
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 7/30/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Globalization;

namespace Debugger
{
    public class DebugToolsManager
    {
        #region Fields & Properties

        SpriteBatch spriteBatch;
        Texture2D blank;
        DebugSystem debugSystem;
        Vector2 debugPos;

        public bool ShowStatus { get; set; }

        #endregion

        #region Constructor/Destructor

        public DebugToolsManager()
        {
            this.ShowStatus = true;
            this.debugPos = new Vector2(100, 100);
        }

        #endregion

        #region Load

        public void Load(GraphicsDevice GDevice, SpriteFont spriteFont)
        {
            this.spriteBatch = new SpriteBatch(GDevice);
            this.debugSystem = DebugSystem.Initialize(GDevice, spriteFont);
            this.debugSystem.DebugCommandUI.RegisterCommand(
                "pos",              // Name of command
                "set position",     // Description of command
                PosCommand          // Command execution delegate
                );

            // create our blank texture
            blank = new Texture2D(GDevice, 1, 1);
            blank.SetData(new[] { Color.White });
            
        }

        #endregion

        #region Methods

        private void PosCommand(IDebugCommandHost host, string command, IList<string> arguments)
        {
            // if we got two arguments from the command
            if (arguments.Count == 2)
            {
                // process text "pos xPos yPos" by parsing our two arguments
                debugPos.X = Single.Parse(arguments[0], CultureInfo.InvariantCulture);
                debugPos.Y = Single.Parse(arguments[1], CultureInfo.InvariantCulture);
            }
            else
            {
                // if we didn't get two arguments, we echo the current position of the cat
                host.Echo(String.Format("Pos={0},{1}", debugPos.X, debugPos.Y));
            }
        }

        public void BeginDraw()
        {
            this.debugSystem.BeginDraw();
        }

        public void StartFrame()
        {
            this.debugSystem.TimeRuler.StartFrame();
        }
                
        public delegate void DebugActionDelegate(object input);
        public void BeginMark(object input, DebugActionDelegate DebugAction, string MarkerName, Color color)
        {
            bool isUpdate = true;
            
            #region fetch type of input parameter

            if (MarkerName.StartsWith("D"))//Draw
            {
                isUpdate = false;
            }

            #endregion

            #region Begin Debugging
            
            debugSystem.TimeRuler.BeginMark(MarkerName, color);
            {
                DebugAction.Invoke(input);

                if (isUpdate)
                {
                    debugSystem.Update(input as GameTime);
                }
                else
                {
                    debugSystem.Draw(this.spriteBatch);
                    if (ShowStatus)
                    {
                        debugSystem.DrawStatus(spriteBatch);
                    }
                }

                debugSystem.TimeRuler.EndMark(MarkerName);
            }

            #endregion
        }

        public void EndDraw()
        {
            this.debugSystem.EndDraw();
        }

        #endregion
    }
}
