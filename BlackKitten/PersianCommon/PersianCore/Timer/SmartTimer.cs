/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : SmartTimer.cs
 * File Description : The smart timer based on time span
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 7/29/2013
 * Comment          : 
 */

using System;
using Microsoft.Xna.Framework;

namespace PersianCore.Timer
{
    public class SmartTimer
    {
        #region Fields & Proeprties

        TimeSpan timer;
        TimeSpan lifeTime;

        public enum TimerState { Idle, Active, Sleep, Disposed };
        TimerState state;
        public TimerState State
        {
            get
            {
                return this.state;
            }
        }

        /// <summary>
        /// Executing slice of timer that timer is active
        /// </summary>
        public TimeSpan ActiveSlice
        {
            get;
            set;
        }
        /// <summary>
        /// Sleep Slice of Timer
        /// </summary>
        public TimeSpan SleepSlice
        {
            get;
            set;
        }
        /// <summary>
        /// LifeTime of Timer, Assign TimeSpan.MaxValue for Infinity Looping
        /// </summary>  
        public TimeSpan MaxLifetime
        {
            get;
            set;
        }

        public bool UseActiveSleepMode
        {
            get;
            set;
        }

        #endregion

        #region Constructor

        public SmartTimer(TimeSpan MaxLifetime)
        {
            this.state = TimerState.Idle;
            this.MaxLifetime = MaxLifetime;
        }

        #endregion

        #region Methods

        public void Start()
        {
            Reset();
        }

        public void Start(TimerState FirstState)
        {
            if (FirstState == TimerState.Active)
            {
                timer = this.ActiveSlice;
            }
            else
            {
                timer = this.SleepSlice;
            }
            if (timer < TimeSpan.Zero)
            {
                this.state = TimerState.Idle;
                Logger.WriteError("SmartTimer with negative value is not valid");
            }
            this.state = FirstState;
            this.lifeTime = MaxLifetime;
        }

        internal void Reset()
        {
            this.state = TimerState.Active;
            this.lifeTime = MaxLifetime;
        }

        #endregion

        #region Update

        public void Update(GameTime gameTime)
        {
            if (this.state == TimerState.Idle || this.state == TimerState.Disposed)
            {
                return;
            }

            #region Update Timer

            TimeSpan slice = TimeSpan.FromMilliseconds(gameTime.ElapsedGameTime.Milliseconds);
            this.lifeTime -= slice;
            //if life time is not infinity and we reach the loop so goto dispose state
            if (this.lifeTime != TimeSpan.MaxValue && this.lifeTime <= TimeSpan.Zero)
            {
                this.state = TimerState.Disposed;
            }
            else
            {
                if (UseActiveSleepMode)
                {
                    UpdateActiveSleepMode(slice);
                }
            }

            #endregion
        }

        private void UpdateActiveSleepMode(TimeSpan Slice)
        {
            if (this.state == TimerState.Active)
            {
                timer -= Slice;
                if (timer <= TimeSpan.Zero)
                {
                    timer = SleepSlice - timer;
                    this.state = TimerState.Sleep;
                }
            }
            else
            {
                timer -= Slice;
                if (SleepSlice <= TimeSpan.Zero)
                {
                    timer = ActiveSlice - timer;
                    this.state = TimerState.Active;
                }
            }
        }

        #endregion
    }
}
