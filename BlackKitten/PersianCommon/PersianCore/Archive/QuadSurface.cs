/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : QuadSurface.cs
 * File Description : QuadSurface
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 5/19/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using System;

namespace PersianCore
{
    public class QuadSurface : IDisposable
    {
        #region Fields

        bool isDisposed;
        Texture2D texture;
        BasicEffect basicEffect;
        VertexPositionNormalTexture[] vertices;
        int[] indices;
        float size;

        #endregion

        #region Constructor/Destructor

        public QuadSurface(float size)
        {
            this.isDisposed = false;
            this.size = size;
            BuildVertices();
        }


        private void BuildVertices()
        {
            vertices = new VertexPositionNormalTexture[4];
            indices = new int[6];

            vertices[0].Position = Vector3.Forward + Vector3.Left;
            vertices[0].TextureCoordinate = new Vector2(0.0f, 1.0f);
            vertices[1].Position = Vector3.Backward + Vector3.Left;
            vertices[1].TextureCoordinate = new Vector2(0.0f, 0.0f);
            vertices[2].Position = Vector3.Forward + Vector3.Right;
            vertices[2].TextureCoordinate = new Vector2(1.0f, 1.0f);
            vertices[3].Position = Vector3.Backward + Vector3.Right;
            vertices[3].TextureCoordinate = new Vector2(1.0f, 0.0f);

            for (int i = 0; i < vertices.Length; i++)
            {
                vertices[i].Normal = Vector3.Up;
                vertices[i].Position *= size;
                vertices[i].TextureCoordinate *= size;
            }

            indices[5] = 0; indices[4] = 1; indices[3] = 2;
            indices[2] = 2; indices[1] = 1; indices[0] = 3;
        }

        ~QuadSurface()
        {
            this.Dispose(false);
        }

        #endregion

        #region Load

        public void Load(ContentManager Content, GraphicsDevice GDevice)
        {
            texture = Content.Load<Texture2D>("Grid");
            basicEffect = new BasicEffect(GDevice);
            basicEffect.EnableDefaultLighting();
            basicEffect.SpecularColor = new Vector3(0.1f, 0.1f, 0.1f);

            basicEffect.World = Matrix.Identity;
            basicEffect.TextureEnabled = true;

            basicEffect.Texture = texture;
        }

        #endregion

        #region Draw

        public void Draw(GraphicsDevice GDevice)
        {
            GDevice.SamplerStates[0] = SamplerState.AnisotropicWrap;
            RasterizerState rasterizerState = GDevice.RasterizerState;
            GDevice.RasterizerState = RasterizerState.CullNone;

            basicEffect.World = Matrix.Identity;
            basicEffect.View = Persian.Camera.View;
            basicEffect.Projection = Persian.Camera.Projection;

            basicEffect.CurrentTechnique.Passes[0].Apply();

            GDevice.DrawUserIndexedPrimitives<VertexPositionNormalTexture>(PrimitiveType.TriangleList, vertices, 0, 4, indices, 0, 2);

            GDevice.RasterizerState = rasterizerState;
        }

        #endregion

        #region Dispose

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!isDisposed)
            {
                isDisposed = true;
                SystemMemory.SafeDispose(this.basicEffect);
                SystemMemory.SafeDispose(this.texture);
            }
        }

        #endregion
    }
}
