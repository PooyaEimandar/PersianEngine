/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Curve3DMover.cs
 * File Description : Move based on path of curve
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 5/19/2013
 * Comment          : 
 */
using Core.Curves;
using Microsoft.Xna.Framework;

namespace Core.Curves
{
    public class Curve3DMover
    {
        #region Fields

        double Time;
        Curve3D CurvePositions;
        Curve3D CurveRotations;
        public Vector3 Position;
        public Vector3 Rotation;

        #endregion

        #region Constructors

        public Curve3DMover()
        {
            Time = 0;
            this.CurvePositions = new Curve3D();
            this.CurveRotations = new Curve3D();
        }

        #endregion

        public void Load(PersianSettings.CurvesSet[] Curves)
        {
            for (uint i = 0; i < Curves.Length; i++)
            {
                CurvePositions.AddPoint(Curves[i].Position, Curves[i].Time);
                if (CurveRotations.LastPoint != Curves[i].LookAt)
                {
                    CurveRotations.AddPoint(Curves[i].LookAt, Curves[i].Time);
                }
            }
            CurvePositions.SetTangents();
            CurveRotations.SetTangents();
        }

        #region Update

        public void Update(GameTime gameTime)
        {
            this.Position = CurvePositions.GetPointOnCurve((float)Time);
            this.Rotation = CurveRotations.GetPointOnCurve((float)Time);
            Time += gameTime.ElapsedGameTime.TotalMilliseconds;
        }

        public void Update(double TotalMilliseconds)
        {
            this.Position = CurvePositions.GetPointOnCurve((float)Time);
            this.Rotation = CurveRotations.GetPointOnCurve((float)Time);
            Time += TotalMilliseconds;
        }

        #endregion

    }
}
