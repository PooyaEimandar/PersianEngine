/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : CoreShared.cs
 * File Description : Shared properties on the solution
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/27/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace PersianCore
{
    using Graphics;

    public static class CoreShared
    {
        public static SupportedGraphicsData SupportedGraphics = new SupportedGraphicsData();
        
        public static string ConfigName = "PersianConfig.PEC";
        
        public static Random random = new Random();

        public static RasterizerState Wireframe = new RasterizerState()
        {
            FillMode = FillMode.WireFrame
        };
        public static RasterizerState Solid = new RasterizerState()
        {
            FillMode = FillMode.Solid
        };

        const float CinematicThreshold = 3.0f;
        public static bool ShowIntro = false;
        public static bool ActiveDemoMode = false;
        
        public static Stopwatch stopWatch = new Stopwatch();
        public static string DebuggerText = string.Empty;
        public static object ObjectHolder { get; set; }
        public static string ContentType = ".xnb";
        public static string PrePathContent
        {
            get
            {
                return Persian.RunningEngine ? string.Empty : @"EditorBrowser\";
            }
        }
        public static Dictionary<string, Vector3> PositionsOfCharacters = new Dictionary<string, Vector3>();

        public static Vector3 SelectionColor = new Vector3(0, 0, 0.3f);
        public static Vector3 DuplicationColor = new Vector3(0.3f, 0, 0);

        #region Math Helpers

        public static bool IsInNear(float Number, float AimNumber)
        {
            if (Number >= AimNumber - CinematicThreshold &&
                Number <= AimNumber + CinematicThreshold)
            {
                return true;
            }
            return false;
        }

        #endregion

        public static string PhysicVersion;

        public static Texture2D DefaultNormalMap, DefaultSpecularMap;

        public static Texture2D[] MuzzleTextures;
        
        public static void LoadShared()
        {
            var size = 4096;//64 * 64
            var pixels = new Color[size];
            for (int i = 0; i < size; ++i)
            {
                pixels[i] = new Color(0.50196f, 0.49803f, 1.0f);//Color of default normal map
            }
            DefaultNormalMap = new Texture2D(Persian.GDevice, 64, 64);
            DefaultNormalMap.SetData(pixels);

            for (int i = 0; i < size; ++i)
            {
                pixels[i] = Color.White;//Color of default default specular map
            }
            DefaultSpecularMap = new Texture2D(Persian.GDevice, 64, 64);
            DefaultSpecularMap.SetData(pixels);

            //soundsManager.LoadSong("Fire", @"Sounds\Utilities\Fire");
        }

        #region Methods
        
        #endregion

        #region Dispose

        public static void Dispose()
        {
            Bounding.Dispose();
        }

        #endregion
    }

    public struct SupportedGraphicsData
    {
        public SurfaceFormat surfaceFormat;
        public DepthFormat depthFormat;
        public int multiSampleCount;
    };
}
