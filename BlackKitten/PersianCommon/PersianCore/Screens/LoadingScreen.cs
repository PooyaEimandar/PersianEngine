/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : LoadingScreen.cs
 * File Description : The loading screen
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 12/26/2013
 * Comment          : 
 *                    Background texture has been added  
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using PersianSettings;

namespace PersianCore.Screens
{
    public class LoadingScreen : IScreen
    {
        #region Fields & Properties

        int index;
        float scale;
        string dots;
        SpriteFont Font;
        Vector2 startPosition;
        Texture2D[] textures;

        public ScreenState State { get; set; }
        public ScreenInfo Info { get; set; }

        public Texture2D BackgroundTexture { get; set; }
        public Color TextColor { get; set; }
        public bool IsLoaded { get; set; }

        #endregion

        #region Constructor/Destructor

        public LoadingScreen()
        {
            this.index = 0;
            this.dots = string.Empty;
            this.State = ScreenState.NotStarted;
            this.TextColor = Color.Cyan;
            this.Info = new ScreenInfo()
            {
                BlendState = BlendState.Opaque,
                Name = "LoadingScreen",
                UpdateState = UpdateState.Screen,
            };
        }

        #endregion

        #region Load

        public void Reset()
        {

        }

        public bool Load(CoreFrameWork CFrameWork)
        {
            this.textures = new Texture2D[2]
            {
                Persian.EngineContent.Load<Texture2D>(ScreenManager.LoadingOffTexturePath),
                Persian.EngineContent.Load<Texture2D>(ScreenManager.LoadingOnTexturePath),
            };
            //Load Font
            this.Font = Fonts.GetFont("Times14");
            OnPreparingDevice(null);
            this.IsLoaded = true;
            return true;
        }

        public bool Initialize()
        {
            return true;
        }

        #endregion

        #region Event

        public void OnPreparingDevice(PreparingDeviceSettingsEventArgs e)
        {
            var size = Persian.GDevice.Viewport;
            this.scale = (0.12f * size.Width) / 1088.0f; // scale for the width with 1088 value is 0.12f 
            this.startPosition = new Vector2(size.Width - (size.Width / 4) - 30, size.Height - (size.Height / 3) - 10);
        }

        #endregion

        #region Update

        public void Update()
        {
            var gameTime = Persian.gameTime;
            if (gameTime.TotalGameTime.Ticks % 30 == 0)
            {
                index = (index + 1) % this.textures.Length;
                //    this.dots += ".";
                //    if (this.dots == "....")
                //    {
                //        this.dots = string.Empty;
                //    }
            }
        }

        #endregion

        #region Draw

        public void Draw()
        {
            Persian.GDevice.Clear(Color.Black);

            var msg = string.Format("Loading {0}", this.dots);
            ScreenManager.spriteBatch.Begin(SpriteSortMode.Texture, null, SamplerState.PointClamp, null, null);
            {
                if (BackgroundTexture != null)
                {
                    ScreenManager.spriteBatch.Draw(
                        this.BackgroundTexture,
                        Vector2.Zero,
                        Color.White);
                }
                ScreenManager.spriteBatch.Draw(
                    this.textures[index],
                    this.startPosition,
                    null,
                    Color.White,
                    0,
                    Vector2.Zero,
                    index == 0 ? scale : scale + 0.01f,
                    SpriteEffects.None,
                    0);
                //ScreenManager.spriteBatch.DrawString(Font, msg, this.startPosition + new Vector2(5, 100), this.TextColor);
                ScreenManager.spriteBatch.End();
            };
        }

        #endregion

        #region Dispose

        public void Dispose()
        {
            for (int i = 0; i < textures.Length; i++)
            {
                textures[i].Dispose();
            }
        }

        #endregion
    }
}