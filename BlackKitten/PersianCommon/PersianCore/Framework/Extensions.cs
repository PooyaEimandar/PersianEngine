/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Extensions.cs
 * File Description : My Extensions
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 1/28/2014
 * Comment          : 
 */

using JitterPhysic.LinearMath;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

public static class Extensions
{

    #region Vector's Extensions

    public static JVector ToJVector(this Vector3 value)
    {
        return new JVector(value.X, value.Y, value.Z);
    }

    public static Vector3 ToXNAVector(this JVector value)
    {
        return new Vector3(value.X, value.Y, value.Z);
    }

    public static Matrix ToRotationMatrix(this Vector3 vector3)
    {
        return Matrix.CreateRotationX(vector3.X) * Matrix.CreateRotationY(vector3.Y) * Matrix.CreateRotationZ(vector3.Z);
    }

    /// <summary>
    /// Convert String to Vector4
    /// </summary>
    /// <param name="vector4"></param>
    /// <param name="StringFormat">Like this {W=0 X:0 Y:0 Z:0}</param>
    /// <returns></returns>
    public static Vector4 StringToVector(this Vector4 vector4, string StringFormat)
    {
        object Result = GetVectorData(StringFormat);
        return (Vector4)Result;
    }

    /// <summary>
    /// Convert String to Vector3
    /// </summary>
    /// <param name="vector3"></param>
    /// <param name="StringFormat">Like this {X:0 Y:0 Z:0}</param>
    /// <returns></returns>
    public static Vector3 StringToVector(this Vector3 vector3, string StringFormat)
    {
        object Result = GetVectorData(StringFormat);
        return (Vector3)Result;
    }

    /// <summary>
    /// Convert String to Vector2
    /// </summary>
    /// <param name="vector2"></param>
    /// <param name="StringFormat">Like this {X:0 Y:0}</param>
    /// <returns></returns>
    public static Vector2 StringToVector(this Vector2 vector2, string StringFormat)
    {
        object Result = GetVectorData(StringFormat);
        return (Vector2)Result;
    }

    private static object GetVectorData(string StringFormat)
    {
        float? W = null, X = null, Y = null, Z = null;

        StringFormat = StringFormat.Replace("{", "");
        StringFormat = StringFormat.Replace("}", "");

        string[] Datas = StringFormat.Split(new char[] { ' ' });
        foreach (string str in Datas)
        {
            string[] datas = str.Split(new char[] { ':' });
            if (datas[0].Equals("W"))
            {
                W = (float)Convert.ToDouble(datas[1]);
            }
            else if (datas[0].Equals("X"))
            {
                X = (float)Convert.ToDouble(datas[1]);
            }
            else if (datas[0].Equals("Y"))
            {
                Y = (float)Convert.ToDouble(datas[1]);
            }
            else
            {
                Z = (float)Convert.ToDouble(datas[1]);
            }
        }

        if (Z == null) return new Vector2(X == null ? 0 : (float)X, Y == null ? 0 : (float)Y);
        if (W == null) return new Vector3(X == null ? 0 : (float)X, Y == null ? 0 : (float)Y, Z == null ? 0 : (float)Z);
        return new Vector4(X == null ? 0 : (float)X, Y == null ? 0 : (float)Y, Z == null ? 0 : (float)Z, W == null ? 0 : (float)W);
    }

    public static Color ToColor(this Vector4 v)
    {
        return new Color(v.X, v.Y, v.Z, v.W);
    }

    public static Color ToColor(this Vector3 v)
    {
        return new Color(v.X, v.Y, v.Z, 1.0f);
    }

    #endregion

    #region SkinnedMeshData's Extensions

    public static BoundingSphere ToBoundingSphere(this SkinnedMeshRuntime.SkinnedSphere skinnedSphere)
    {
        return new BoundingSphere(skinnedSphere.Center, skinnedSphere.Radius);
    }

    #endregion

    #region Physic's Extension

    public static BoundingBox ToXnaBoundingBox(this JBBox jBBox)
    {
        return new BoundingBox(jBBox.Min.ToXNAVector(), jBBox.Max.ToXNAVector());
    }

    #endregion

    #region Exception's Extensions

    public static string ToStandardString(this Exception ex)
    {
        return string.Format("{0} with following inner exception : {1}",
            ex.Message, ex.InnerException == null || String.IsNullOrEmpty(ex.InnerException.ToString()) ? "NULL" : ex.InnerException.ToString());
    }

    #endregion

    #region Dictionary's Extensions

    public static IEnumerable<TKey> KeysFromValue<TKey, TValue>(this Dictionary<TKey, TValue> dict, TValue val)
    {
        if (dict == null) return null;
        return dict.Keys.Where(k => dict[k].Equals(val));
    }

    #endregion

    #region T's Extensions

    public static string CopyTo<T>(this T Source, ref T Destination)
    {
        string HResult = null;
        if (Object.ReferenceEquals(Destination, null))
        {
            HResult = "Can not copy to null object";
            return HResult;
        }

        try
        {
            object value = null;
            if (Destination == null)
            {
                Destination = Activator.CreateInstance<T>();
            }

            #region Set Properties

            PropertyInfo[] PropertyInfos = Source.GetType().GetProperties();
            foreach (PropertyInfo info in PropertyInfos)
            {
                if (info.CanRead && info.CanWrite)
                {
                    //Get value
                    value = info.GetValue(Source, new object[] { });
                    //Now set value
                    Destination.GetType().GetProperty(info.Name).SetValue(Destination, value, new object[] { });
                }
            }

            #endregion
        }
        catch (Exception ex)
        {
            HResult = ex.ToStandardString();
        }
        return HResult;
    }

    #endregion

    #region Array's Extensions

    public static Vector3 ToVector3(this float[] f)
    {
        if (f.Length == 0) return new Vector3();
        if (f.Length == 1) return new Vector3(f[0], 0, 0);
        if (f.Length == 2) return new Vector3(f[0], f[1], 0);
        if (f.Length == 3) return new Vector3(f[0], f[1], f[2]);
        return new Vector3();
    }

    #endregion

    #region BoundingBox's Extensions

    public static bool isZero(this BoundingBox value)
    {
        if (value.Max == Vector3.Zero && value.Min == Vector3.Zero)
        {
            return true;
        }
        return false;
    }

    #endregion

    #region Matrix's Extensions


    public static Matrix ToXNAMatrix(this JMatrix value)
    {
        return new Matrix(value.M11,
                        value.M12,
                        value.M13,
                        0.0f,
                        value.M21,
                        value.M22,
                        value.M23,
                        0.0f,
                        value.M31,
                        value.M32,
                        value.M33,
                        0.0f, 0.0f, 0.0f, 0.0f, 1.0f);
    }

    public static JMatrix ToJMatrix(this Matrix value)
    {
        return new JMatrix()
        {
            M11 = value.M11,
            M12 = value.M12,
            M13 = value.M13,
            M21 = value.M21,
            M22 = value.M22,
            M23 = value.M23,
            M31 = value.M31,
            M32 = value.M32,
            M33 = value.M33,
        };
    }

    #endregion

    #region Draw

    public static void DrawIndexedPrimitives(this ModelMeshPart modelMeshPart)
    {
        var GDevice = Persian.GDevice;

        GDevice.SetVertexBuffer(modelMeshPart.VertexBuffer, modelMeshPart.VertexOffset);
        GDevice.Indices = modelMeshPart.IndexBuffer;
        GDevice.DrawIndexedPrimitives(
            PrimitiveType.TriangleList,
            0,
            0,
            modelMeshPart.NumVertices,
            modelMeshPart.StartIndex,
            modelMeshPart.PrimitiveCount);
#if DEBUG
        Debugger.UsageReporter.debugInfo.DrawCalls++;
#endif
    }

    #endregion
}
