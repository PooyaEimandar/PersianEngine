/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : AnimatedCamera.cs
 * File Description : The animated camera
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 10/27/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using PersianCore.Framework.PA;
using System;
using System.Collections.Generic;

namespace PersianCore.Cameras
{
    public class AnimatedCamera : IAnimatedCameraData
    {
        #region Fields & Properties

        int index;
        TimeSpan time;
        PaCamera cameraData;
        List<Vector3> positions;

        public int LeaveFramesBeforeEnd { get; set; }

        public int Index
        {
            get
            {
                return this.index;
            }
        }
        
        public List<Vector3> Positions
        {
            get
            {
                return this.positions;
            }
            set
            {
                this.positions = value;
            }
        }

        List<Vector2> angles;
        public List<Vector2> Angles
        {
            get
            {
                return this.angles;
            }
            set
            {
                this.angles = value;
            }
        }

        public bool Loopable { get; set; }

        public float? AnimationDelayInMS { get; set; }

        public bool IsActive { get; set; }

        public bool isReverse { get; set; }

        public event EventHandler OnComplete;

        #endregion

        #region Constructor

        //Parse Json animated camera
        public AnimatedCamera()
        {
            this.index = 0;
            this.IsActive = true;
        }

        #endregion

        #region Load

        public void Load(string path)
        {
            cameraData = PaLoader.LoadCameraFromFile(path);
            this.Positions = new List<Vector3>();
            this.Angles = new List<Vector2>();

            for (int i = 0; i < cameraData.P.Length; i += 3)
            {
                this.positions.Add(new Vector3(
                    cameraData.P[i],
                    cameraData.P[i + 1],
                    cameraData.P[i + 2]));
            }
            for (int i = 0; i < cameraData.R.Length; i += 2)
            {
                this.angles.Add(new Vector2(
                    cameraData.R[i],
                    cameraData.R[i + 1]));
            }
        }

        #endregion

        #region Reset

        public void Reset()
        {
            this.IsActive = true;
            if (this.isReverse)
            {
                this.index = this.positions.Count - 1;
            }
            else
            {
                this.index = 0;
            }
        }

        #endregion

        #region Update

        private void UpdateAnimatedCamera()
        {
            if (this.positions != null)
            {
                Persian.Camera.Position = this.positions[index];
            }
            if (this.angles != null)
            {
                Persian.Camera.Angle = this.angles[index];
            }

            if (this.isReverse)
            {
                this.index = this.index - 1;
                if (this.index <= 0 + LeaveFramesBeforeEnd)
                {
                    if (this.Loopable)
                    {
                        this.index = this.positions.Count - 1;
                    }
                    else
                    {
                        this.IsActive = false;
                        if (OnComplete != null)
                        {
                            OnComplete(null, null);
                        }
                    }
                }
            }
            else
            {
                if (this.positions != null)
                {
                    this.index = this.index + 1;
                    if (this.index >= this.positions.Count - LeaveFramesBeforeEnd)
                    {
                        if (this.Loopable)
                        {
                            this.index = 0;
                        }
                        else
                        {
                            this.IsActive = false;
                            if (OnComplete != null)
                            {
                                OnComplete(null, null);
                            }
                        }
                    }
                }
            }
        }

        public bool Update()
        {
            if (!this.IsActive) return false;

            bool updated = false;
            if (AnimationDelayInMS.HasValue)
            {
                time += Persian.gameTime.ElapsedGameTime;
                if (time.TotalMilliseconds > this.AnimationDelayInMS.Value)
                {
                    time -= TimeSpan.FromMilliseconds(this.AnimationDelayInMS.Value);
                    UpdateAnimatedCamera();
                    updated = true;
                }
            }
            else
            {
                UpdateAnimatedCamera();
                updated = true;
            }

            return updated;
        }

        #endregion

        #region Dispose

        internal void Dispose()
        {
            this.positions.Clear();
            this.angles.Clear();
        }

        #endregion
    }
}
