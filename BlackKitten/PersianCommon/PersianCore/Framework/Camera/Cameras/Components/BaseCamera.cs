/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : BaseCamera.cs
 * File Description : The base class of camera
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 5/19/2013
 * Comment          : 
 */
using System;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Cameras
{
    public abstract class BaseCamera
    {
        #region Constants

        const float Near = 1.0f;
        const float Far = 1000.0f;

        #endregion

        #region Public Fields

        Viewport viewPort;

        public bool UseCustomeViewProjection { get; set; }

        float aspectRatio;
        /// <summary>
        /// Gets or sets camera aspect ratio.
        /// </summary>
        [DoNotSave]
        public float AspectRatio
        {
            get
            {
                return this.aspectRatio;
            }
            set
            {
                this.aspectRatio = value;
                UpdateProjection();
                this.frustum.Matrix = view * projection;
            }
        }

        protected Guid bindingGuid;
        public Guid BindingGuid
        {
            get
            {
                return bindingGuid;
            }
            set
            {
                bindingGuid = value;
            }
        }

        [DoNotSave]
        public Meshes.Mesh BindTo
        {
            get;
            set;
        }

        protected BoundingFrustum frustum;
        [DoNotSave]
        public BoundingFrustum Frustum
        {
            get
            {
                return frustum;
            }
        }

        protected Matrix world;
        [DoNotSave]
        public Matrix World
        {
            get
            {
                return this.world;
            }
            set
            {
                this.world = value;
            }
        }

        protected Matrix view;
        /// <summary>
        /// Gets camera view matrix.
        /// </summary>
        [DoNotSave]
        public Matrix View
        {
            get
            {
                return this.view;
            }
            set
            {
                this.view = value;
                if (!UseCustomeViewProjection)
                {
                    UpdateView();
                }
            }
        }

        protected Matrix projection;
        /// <summary>
        /// Gets or sets camera projection matrix.
        /// </summary>
        [DoNotSave]
        public Matrix Projection
        {
            get
            {
                return this.projection;
            }
            set
            {
                this.projection = value;
                if (!UseCustomeViewProjection)
                {
                    UpdateProjection();
                }
            }
        }

        /// <summary>
        /// Gets camera view matrix multiplied by projection matrix.
        /// </summary>
        [DoNotSave]
        public Matrix ViewProjection
        {
            get
            {
                return this.view * this.projection;
            }
        }

        protected Vector3 position;
        /// <summary>
        /// Gets or sets position of camera.
        /// </summary>
        public Vector3 Position
        {
            get
            {
                return this.position;
            }
            set
            {
                this.position = value;
                UpdateView();
            }
        }

        float nearClip;
        /// <summary>
        /// Gets or sets camera near plane distance.
        /// </summary>
        public float NearClip
        {
            get
            {
                return this.nearClip;
            }
            set
            {
                this.nearClip = value;
                UpdateProjection();
                this.frustum.Matrix = view * projection;
            }
        }

        float farClip;
        /// <summary>
        /// Gets or sets camera far plane distance.
        /// </summary>
        public float FarClip
        {
            get
            {
                return this.farClip;
            }
            set
            {
                this.farClip = value;
                UpdateProjection();
                this.frustum.Matrix = view * projection;
            }
        }

        float tanFieldOfView;
        [DoNotSave]
        public float TanFieldOfView
        {
            get
            {
                return this.tanFieldOfView;
            }
        }

        float fieldOfView;
        /// <summary>
        /// Gets or sets field of view of camera.
        /// </summary>
        [DoNotSave]
        public float FieldOfView
        {
            get
            {
                return this.fieldOfView;
            }
            set
            {
                this.fieldOfView = value;
                UpdateProjection();
                this.frustum.Matrix = view * projection;
            }
        }

        protected Vector3 target;
        [DoNotSave]
        public Vector3 Target
        {
            set
            {
                target = value;
                view = Matrix.CreateLookAt(position, target, Vector3.Up);
                this.frustum.Matrix = view * projection;
            }
            get
            {
                return this.target;
            }
        }

        protected bool needUpdate;
        [DoNotSave]
        public bool NeedUpdate
        {
            set
            {
                needUpdate = value;
            }
            get
            {
                return this.needUpdate;
            }
        }

        public Vector3 Up, Forward, Right;

        #endregion

        #region Constructor

        public BaseCamera(Viewport viewPort)
        {
            this.Up = Vector3.Up;
            this.Forward = Vector3.Forward;
            this.Right = Vector3.Right;
            this.world = Matrix.Identity;
            this.viewPort = viewPort;
            this.aspectRatio = viewPort.AspectRatio;
            this.fieldOfView = MathHelper.PiOver4;
            this.tanFieldOfView = (float)Math.Tan(MathHelper.ToRadians(45 * 0.5f));
            this.frustum = new BoundingFrustum(Matrix.Identity);
            this.nearClip = Near;
            this.farClip = Far;
        }

        #endregion

        #region Methods

        protected void BaseReset()
        {
            UpdateView();
        }

        protected virtual void UpdateView()
        {
            this.needUpdate = true;
            this.view = Matrix.CreateLookAt(this.position, this.target, Vector3.Up);
            this.frustum.Matrix = view * projection;
        }

        protected virtual void UpdateProjection()
        {
            this.needUpdate = true;
            this.projection = Matrix.CreatePerspectiveFieldOfView(fieldOfView, aspectRatio, nearClip, farClip);
            this.frustum.Matrix = view * projection;
        }
        
        #endregion

        #region Dispose

        public virtual void Dispose()
        {
            this.BindTo = null;
        }

        #endregion
    }
}
