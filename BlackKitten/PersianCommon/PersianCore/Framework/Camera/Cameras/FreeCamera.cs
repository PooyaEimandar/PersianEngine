/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : FreeCamera.cs
 * File Description : The first person camera
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 5/19/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;

namespace PersianCore.Cameras
{
    public class FreeCamera : BaseCamera
    {
        #region Fields & Properties

        static Vector3 InitialiPosition = new Vector3(0, 5, 15);
        static Vector2 InitialAngle = new Vector2(-0.1f, 0.0f);

        int widthOver2;
        int heightOver2;

        MouseState LastMouseState;
        public CameraHistoryManager CHistoryManager;
        
        Vector2 angles;
        /// <summary>
        /// Gets or sets angles of camera.
        /// </summary>
        public Vector2 Angles
        {
            get
            {
                return this.angles;
            }
            set
            {
                this.angles = value;
            }
        }

        public Vector3 Setting { get; set; }

        #endregion

        #region Constructor

        public FreeCamera(Viewport viewPort)
            : this(viewPort, InitialiPosition, InitialAngle)
        {
        }

        public FreeCamera(Viewport viewPort, Vector3 position, Vector2 angles)
            : base(viewPort)
        {
            this.widthOver2 = viewPort.Width / 2;
            this.heightOver2 = viewPort.Height / 2;
            this.position = position;
            this.angles = angles;
            this.LastMouseState = new MouseState();
            this.Setting = new Vector3(40.0f, 0.1f, 0.0f);
            UpdateView();
            UpdateProjection();
            Mouse.SetPosition(this.widthOver2, this.heightOver2);
            if (!Persian.RunningEngine)
            {
                this.CHistoryManager = new CameraHistoryManager();
            }
        }

        #endregion

        #region Methods

        protected override void UpdateView()
        {
            var cameraRotation = PMathHelper.CreateRotationMatrix(angles);
            this.target = position + Vector3.Transform(Vector3.Forward, cameraRotation);
            base.UpdateView();
        }

        internal void Reset()
        {
            this.position = InitialiPosition;
            this.angles = InitialAngle;
            this.Setting = new Vector3(40.0f, 0.1f, 0.0f);
            base.BaseReset();
        }

        #endregion

        #region Update

        /// <summary>
        /// Updates camera with input and updates view matrix.
        /// </summary>
        /// <param name="gameTime"></param>
        public void Update(GameTime gameTime)
        {
#if DEBUG
            var elapsedTime = (double)gameTime.ElapsedGameTime.Ticks / (double)TimeSpan.TicksPerSecond;
            ProcessInput((float)elapsedTime);
#endif
            //Disable ForceUpdate
            UpdateWorld(Vector3.Zero);
            UpdateView();
            UpdateProjection();
        }

        private void ProcessInput(float ElapsedTime)
        {
            bool ChangePosition = false;

            #region Camera Movement Command like Softimage

            var currentMouseState = Mouse.GetState();
            var moveVector = new Vector3();
            var keys = Keyboard.GetState();

            if (currentMouseState.LeftButton == ButtonState.Pressed)
            {
                if (currentMouseState.X - LastMouseState.X > 1)
                {
                    moveVector.X -= ElapsedTime * this.Setting.X;
                }
                else if (currentMouseState.X - LastMouseState.X < -1)
                {
                    moveVector.X += ElapsedTime * this.Setting.X;
                }
                else if (currentMouseState.Y - LastMouseState.Y > 1)
                {
                    moveVector.Y += ElapsedTime * this.Setting.X;
                }
                else if (currentMouseState.Y - LastMouseState.Y < -1)
                {
                    moveVector.Y -= ElapsedTime * this.Setting.X;
                }
                ChangePosition = true;
                //CursorType = "Move";
            }
            else if (currentMouseState.RightButton == ButtonState.Pressed)
            {
                if (LastMouseState.RightButton == ButtonState.Released)
                {
                    Mouse.SetPosition(widthOver2, heightOver2);
                }
                else
                {
                    if (currentMouseState.X != widthOver2)
                    {
                        angles.Y -= ElapsedTime * this.Setting.Y * (currentMouseState.X - widthOver2);
                    }
                    if (currentMouseState.Y != heightOver2)
                    {
                        angles.X -= ElapsedTime * this.Setting.Y * (currentMouseState.Y - heightOver2);
                    }
                    if (angles.X > 1.4) angles.X = 1.4f;
                    if (angles.X < -1.4) angles.X = -1.4f;
                    if (angles.Y > Math.PI) angles.Y -= 2 * (float)Math.PI;
                    if (angles.Y < -Math.PI) angles.Y += 2 * (float)Math.PI;

                    Mouse.SetPosition(widthOver2, heightOver2);
                    ChangePosition = true;
                }
            }
            else if (this.Setting.Z != 0)
            {
                if (this.Setting.Z > 0)
                {
                    moveVector.Z -= 4 * ElapsedTime * this.Setting.X;
                }
                else
                {
                    moveVector.Z += 4 * ElapsedTime * this.Setting.X;
                }
                ChangePosition = true;
            }
            if (ChangePosition)
            {
                UpdateWorld(moveVector);
            }
            LastMouseState = currentMouseState;

            #endregion
        }

        private void UpdateWorld(Vector3 MoveVector)
        {
            var cameraRotation = PMathHelper.CreateRotationMatrix(angles);
            position += Vector3.Transform(MoveVector, cameraRotation);
            this.world = cameraRotation * Matrix.CreateTranslation(position);
            this.Up = Vector3.Transform(Vector3.Up, cameraRotation);
            this.Forward = Vector3.Transform(Vector3.Forward, cameraRotation);
            this.Right = Vector3.Cross(this.Forward, this.Up);
        }

        #endregion
    }
}
