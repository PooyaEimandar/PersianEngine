/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Animation.cs
 * File Description : This class holds animation data in parsed fromat
 * Generated by     : Seyed Mahdi Hosseini
 * Last modified by : Seyed Mahdi Hosseini on 9/14/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using System;

namespace PersianCore.Framework.PA
{
    public struct Animation : ICloneable
    {
        public string Dimension { get; set; }
        public string TransformType { get; set; }
        public string InterpolationType { get; set; }
        public float[] Times { get; set; }
        public float[] Keys { get; set; }
        public BezierInfo OutTangent { get; set; }//IGNORE END ELEMENT
        public BezierInfo InTangent { get; set; }//IGNORE FIRST ELMENT
        public string Name { get; set; }
        public string Id { get; set; }
        public string Sid { get; set; }

        public float GetKey(float t, out bool hasAnim)
        {
            hasAnim = true;
            var k = 0.0f;
            switch (InterpolationType)
            {
                case "1":
                    k = GetLinearKey(t);
                    break;
                case "2":
                    k = GetBezierKey(t, out hasAnim);
                    break;
            }
            return k;
        }

        private float GetLinearKey(float t)
        {
            var timeInd = GetTimeIndex(t);
            var t1 = Times[timeInd];
            var t2 = Times[timeInd + 1];
            var tt = Math.Abs(t - t1) / t2;
            var k1 = Keys[timeInd];
            var k2 = Keys[timeInd + 1];
            return k1 * (1 - tt) + k2 * (tt);
        }

        private float GetBezierKey(float t, out bool hasAnim)
        {
            hasAnim = true;
            var T = t;
            var timeInd = GetTimeIndex(T);
            var t1 = Times[timeInd];
            var t2 = Times[timeInd + 1];
            var tt = Math.Abs(T - t1) / (t2 - t1);
            var s = new Vector4((float)Math.Pow(tt, 3), (float)Math.Pow(tt, 2), (float)Math.Pow(tt, 1), 1);
            var p0 = Keys[timeInd];
            var c0 = OutTangent.Array[timeInd * 2 + 1];
            var c1 = InTangent.Array[timeInd * 2 + 3];
            var p1 = Keys[timeInd + 1];
            var coff = Vector4.Transform(s, BezierInfo.BezierCoefficientsMatrix);
            var k = Vector4.Dot(coff, new Vector4(p0, c0, c1, p1));
            if (Math.Abs(p0 - c0) < 0.0001 && Math.Abs(p0 - c1) < 0.0001 && Math.Abs(p0 - p1) < 0.0001 && Keys.Length <= 2)
            {
                hasAnim = false;
            }
            if (Name == "Man_LHand")
            {

            }
            return k;
        }

        private int GetTimeIndex(float t)
        {
            for (int i = 0; i < Times.Length; i++)
            {
                if (i + 1 < Times.Length)
                    if (t >= Times[i] && t < Times[i + 1])
                    {
                        return i;
                    }
            }
            return 0;
        }

        #region Implementation of ICloneable

        public object Clone()
        {
            var times = new float[Times.Length];
            for (int i = 0; i < Times.Length; i++)
            {
                times[i] = Times[i];
            }

            var keys = new float[Keys.Length];
            for (int i = 0; i < Keys.Length; i++)
            {
                keys[i] = Keys[i];
            }

            var anim = new Animation
            {
                Dimension = Dimension,
                Name = Name,
                Times = times,
                Keys = keys,
                OutTangent = OutTangent,
                InTangent = InTangent,
                InterpolationType = InterpolationType,
                TransformType = TransformType,
                Sid = "COLONED",
                Id = Id
            };
            return anim;
        }

        #endregion
    }
}