/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Sky.cs
 * File Description : Sky of the game
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 2/18/2014
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Graphics.Environment
{
    public class Sky : Meshes.Mesh
    {
        #region Fields & Properties

        float time;
        Texture2D skyTexture;
        Texture2D cloudTexture;
        Effect effect;
        EffectParameter worldParam;
        EffectParameter timeParam;
        EffectParameter viewParam;
        EffectParameter projectionParam;
        EffectParameter viewProjectionParam;
        EffectParameter posParam;
        EffectParameter sunVectorParam;
        public bool UseSameTexture { get; set; }
        public bool AllowRotate { get; set; }
        public string TextureName { get; set; }
        public string CloudsName { get; set; }
        public Vector3 SunVector { get; set; }
        public float TexCoordScale { get; set; }

        #endregion

        #region Constructor

        public Sky()
            : base(@"Models\Skydome.xnb",
            Vector3.Zero,
            new Vector3(0, MathHelper.ToDegrees(10.003f), 0),
            new Vector3(900.0f))
        {
            this.time = 0;
            this.PhysicType = Physic.PhysicTypes.NoPhysic;
            this.UseSameTexture = false;
            this.TextureName = "Rainy.png";
            this.CloudsName = "Clouds.png";
            this.SunVector = Vector3.Zero;
        }

        #endregion

        #region Load

        public override string Load(Model model)
        {
            var Content = Persian.EngineContent;

            this.effect = Content.Load<Effect>(@"Shaders\Environments\Skydome");

            Initialize(true, true);

            LoadEffectParams();

            return base.Load(model);
        }

        public void Initialize(bool forceToLoadTexture, bool forceToLoadClouds)
        {
            var texturePath = Persian.EngineContentDir + @"\Textures\Environments\Sky\";

            if (forceToLoadTexture)
            {
                AssetsManager.Texture2DFromFile(Persian.GDevice, texturePath + this.TextureName, ref this.skyTexture);
                this.effect.Parameters["tNight"].SetValue(skyTexture);
            }

            if (!UseSameTexture && forceToLoadClouds)
            {
                AssetsManager.Texture2DFromFile(Persian.GDevice, texturePath + this.CloudsName, ref this.cloudTexture);
                this.effect.Parameters["tClouds"].SetValue(cloudTexture);
            }

            this.effect.Parameters["AllowRotate"].SetValue(this.AllowRotate);
            this.effect.Parameters["UseSameTexture"].SetValue(this.UseSameTexture);
            this.effect.Parameters["TexCoordScale"].SetValue(this.TexCoordScale);
        }

        private void LoadEffectParams()
        {
            this.worldParam = effect.Parameters["matWorld"];
            this.timeParam = effect.Parameters["fTime"];
            this.viewParam = effect.Parameters["matView"];
            this.projectionParam = effect.Parameters["matProjection"];
            this.viewProjectionParam = effect.Parameters["matViewProjection"];
            this.posParam = effect.Parameters["vCamPos"];
            this.sunVectorParam = effect.Parameters["vSunVector"];
        }

        #endregion

        #region Update

        public override void Update()
        {
            base.Update();

            var camPos = Persian.Camera.Position;
            this.PhysicData.World.Translation = camPos;

            this.time += Persian.gameTime.ElapsedGameTime.Milliseconds / 2.0f;
            this.worldParam.SetValue(this.World);
            this.timeParam.SetValue(this.time / 80000.0f);
            this.viewParam.SetValue(Persian.Camera.View);
            this.projectionParam.SetValue(Persian.Camera.Projection);
            this.viewProjectionParam.SetValue(Persian.Camera.ViewProjection);
            this.posParam.SetValue(camPos);
            this.sunVectorParam.SetValue(this.SunVector);
        }

        #endregion

        #region Draw

        public void Draw()
        {
            base.DrawWithCustomeEffect(this.effect, 0, 0);
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (!disposing || this.isDisposed) return;

            SystemMemory.SafeDispose(this.effect);
            SystemMemory.SafeDispose(this.worldParam);
            SystemMemory.SafeDispose(this.timeParam);
            SystemMemory.SafeDispose(this.viewParam);
            SystemMemory.SafeDispose(this.projectionParam);
            SystemMemory.SafeDispose(this.viewProjectionParam);
            SystemMemory.SafeDispose(this.posParam);
            SystemMemory.SafeDispose(this.skyTexture);
            SystemMemory.SafeDispose(this.cloudTexture);

            base.Dispose(disposing);
        }

        #endregion
    }
}