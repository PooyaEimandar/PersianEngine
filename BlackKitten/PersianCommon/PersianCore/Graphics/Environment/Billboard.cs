/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Billboard.cs
 * File Description : The class of Billboard
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 2/3/2014
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.ComponentModel;

namespace PersianCore.Environment
{
    public class Billboard : Disposable
    {
        #region Fields & Properties

        int i = 0;
        int j = 0;
        TimeSpan t;
        VertexPositionTexture[] billboardVertices;
        Effect effect;
        Texture2D texture;
        Vector3 position;
        bool isLoaded;
        float sqrDistanceToCam;

        bool enable;
        public bool Enable
        {
            get 
            {
                return this.enable;
            }
            set 
            {
                if (this.enable != value)
                {
                    this.enable = value;
                }
            }
        }

        [DoNotSave]
        [Browsable(false)]
        public float SqrDistanceToCam
        {
            get
            {
                return this.sqrDistanceToCam;
            }
        }

        public Vector2 Segments { get; set; }
        public TimeSpan Time { get; set; }

        float scale;
        public float Scale
        {
            get
            {
                return this.scale;
            }
            set
            {
                if (this.scale != value)
                {
                    this.scale = value;
                    if (this.ScaleParam != null)
                    {
                        this.ScaleParam.SetValue(value);
                    }
                }
            }
        }
        public Vector3 Position
        {
            get
            {
                return this.position;
            }
            set
            {
                if (this.position != value)
                {
                    this.position = value;
                    if (this.billboardVertices != null)
                    {
                        for (int i = 0; i < billboardVertices.Length; ++i)
                        {
                            billboardVertices[i].Position = position;
                        }
                        this.sqrDistanceToCam = Vector3.DistanceSquared(Persian.Camera.World.Translation, this.position);
                    }
                }
            }
        }

        bool useSprite;
        public bool UseSprite
        {
            get
            {
                return this.useSprite;
            }
            set
            {
                if (this.useSprite != value)
                {
                    this.useSprite = value;
                    if (this.effect != null)
                    {
                        this.effect.Parameters["UseSprite"].SetValue(value);
                    }
                }
            }
        }

        float intensity;
        public float Intensity
        {
            get
            {
                return this.intensity;
            }
            set
            {
                if (this.intensity != value)
                {
                    this.intensity = value;
                    if (this.effect != null)
                    {
                        this.effect.Parameters["Intensity"].SetValue(value);
                    }
                }
            }
        }

        public bool Done { get; set; }

        #region Bind Effect Parameters

        EffectParameter WorldParam, ViewProjectionParam, CameraPosParam;
        EffectParameter TextureParam, ScaleParam, OffsetParam, UseSpriteParam;
        EffectParameter UpParam, SideParam, IntensityParam;

        #endregion

        #endregion

        #region Constructor/Destructor

        public Billboard()
        {
            this.enable = true;
            this.position = new Vector3(0, 0, 0);
            this.scale = 10;
            this.Segments = new Vector2(4, 5);
            this.Time = TimeSpan.FromMilliseconds(50);
            this.intensity = 3.0f;
        }

        #endregion

        #region Load

        public void Load(string TexturesPath)
        {
            this.isLoaded = false;
            {
                var size = TexturesPath.Length;
                this.texture = null;
                AssetsManager.Texture2DFromFile(Persian.GDevice, TexturesPath, ref this.texture);
                LoadEffect();

                this.isLoaded = true;
            }
        }

        public void Load(Texture2D Texture)
        {
            this.isLoaded = false;
            {
                this.texture = Texture;
                LoadEffect();
                this.isLoaded = true;
            }
        }

        private void LoadEffect()
        {
            this.effect = ShadersManager.BillboardFX.Clone();
            this.effect.CurrentTechnique = this.effect.Techniques["SpheBillboard"];
            this.WorldParam = this.effect.Parameters["World"];
            this.ViewProjectionParam = this.effect.Parameters["ViewProjection"];
            this.CameraPosParam = this.effect.Parameters["CameraPos"];
            this.TextureParam = this.effect.Parameters["Texture"];
            this.ScaleParam = this.effect.Parameters["Scale"];
            this.OffsetParam = this.effect.Parameters["Offset"];
            this.UseSpriteParam =  this.effect.Parameters["UseSprite"];
            this.UpParam = this.effect.Parameters["CameraUp"];
            this.SideParam = this.effect.Parameters["CameraSide"];
            this.IntensityParam = this.effect.Parameters["Intensity"];

            this.ScaleParam.SetValue(this.scale);
            this.UseSpriteParam.SetValue(this.useSprite);
            this.IntensityParam.SetValue(this.intensity);

            this.TextureParam.SetValue(this.texture);

            float X = 0;
            float Y = 0;
            float W = 1;
            float H = 1;

            var topLeft = new Vector2(X, Y);
            var bottomLeft = new Vector2(X, H / this.Segments.Y);
            var topRight = new Vector2(W / this.Segments.X, Y);
            var bottomRight = new Vector2(W / this.Segments.X, H / this.Segments.Y);

            this.billboardVertices = new VertexPositionTexture[6]
                {
                     new VertexPositionTexture(this.position, bottomRight),
                     new VertexPositionTexture(this.position, topLeft),
                     new VertexPositionTexture(this.position, topRight),
                     new VertexPositionTexture(this.position, bottomRight),
                     new VertexPositionTexture(this.position, bottomLeft),
                     new VertexPositionTexture(this.position, topLeft),
                };
        }

        #endregion

        #region Methods

        public void Reset()
        {
            this.Done = false;
            this.i = 0;
            this.j = 0;
            this.t = TimeSpan.Zero;
        }

        #endregion

        #region Draw

        public void Draw()
        {
            if (!this.isLoaded || !this.enable) return;

            if (UseSprite)
            {
                t += Persian.gameTime.ElapsedGameTime;
                if (t >= this.Time)
                {
                    t -= this.Time;
                    if (i == this.Segments.X)
                    {
                        i = 0;
                        j++;
                        if (j >= this.Segments.Y)
                        {
                            j = 0;
                            this.Done = true;
                        }
                    }
                    this.OffsetParam.SetValue(new Vector2(i / this.Segments.X, j / this.Segments.Y));
                    i++;
                }
            }

            if (this.Done) return;

            this.UpParam.SetValue(Persian.Camera.Up);
            this.SideParam.SetValue(Persian.Camera.Right);

            this.WorldParam.SetValue(Matrix.Identity);
            this.ViewProjectionParam.SetValue(Persian.Camera.View * Persian.Camera.Projection);
            this.CameraPosParam.SetValue(Persian.Camera.Position);

            this.effect.CurrentTechnique.Passes[0].Apply();
            {
                Persian.GDevice.DrawUserPrimitives<VertexPositionTexture>(
                    PrimitiveType.TriangleList,
                    billboardVertices,
                    0,
                    2);
            }
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (!disposing || isDisposed) return;

            this.enable = false;

            SystemMemory.SafeDispose(this.texture);
            SystemMemory.SafeDispose(this.effect);
            SystemMemory.SafeDispose(this.WorldParam);
            SystemMemory.SafeDispose(this.ViewProjectionParam);
            SystemMemory.SafeDispose(this.CameraPosParam);
            SystemMemory.SafeDispose(this.TextureParam);
            SystemMemory.SafeDispose(this.ScaleParam);
            SystemMemory.SafeDispose(this.OffsetParam);
            SystemMemory.SafeDispose(this.UseSpriteParam);
            SystemMemory.SafeDispose(this.UpParam);
            SystemMemory.SafeDispose(this.SideParam);
            
            base.Dispose(disposing);
        }

        #endregion
    }
}