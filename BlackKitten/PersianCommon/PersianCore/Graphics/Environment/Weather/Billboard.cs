/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Billboard.cs
 * File Description : Billboard
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 5/19/2013
 * Comment          : 
 */
using System;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Enviroment
{
    class Billboard
    {
        #region Fields & Properties

        static Random random = new Random();
        bool forceUpdate;
        VertexPositionTexture[] billboardVertices;
        Effect effect;
        Texture2D[] textures;
        Vector3 position;
        public Vector3 Position
        {
            get
            {
                return this.position;
            }
            set
            {
                this.position = value;
                forceUpdate = true;
            }
        }

        #region Bind Effect Parameters

        EffectParameter WorldParam, ViewProjectionParam, CameraPosParam, TextureParam, TexCoordianteScaleParam;

        #endregion

        #endregion

        #region Constructor/Destructor

        public Billboard()
        {
            InitilizeFields();
        }

        private void InitilizeFields()
        {
            this.position = new Vector3(0, 0, 0);
            billboardVertices = new VertexPositionTexture[6]
            {
                 new VertexPositionTexture(this.position, new Vector2(1, 1)),
                 new VertexPositionTexture(this.position, new Vector2(0, 0)),
                 new VertexPositionTexture(this.position, new Vector2(1, 0)),
                 new VertexPositionTexture(this.position, new Vector2(1, 1)),
                 new VertexPositionTexture(this.position, new Vector2(0, 1)),
                 new VertexPositionTexture(this.position, new Vector2(0, 0)),
            };
        }

        #endregion

        #region Load

        internal void Load(string[] TexturesPath)
        {
            for (int i = 0; i < TexturesPath.Length; i++)
            {
                this.textures[i] = Persian.Content.Load<Texture2D>(TexturesPath[i]);
            }
        }

        internal void Load(Texture2D[] Textures)
        {
            this.textures = Textures;
            LoadEffect();
        }

        private void LoadEffect()
        {
            this.effect = Persian.Content.Load<Effect>(@"Shaders\Utilities\Billboard");
            this.effect.CurrentTechnique = this.effect.Techniques["SpheBillboard"];

            this.WorldParam = this.effect.Parameters["World"];
            this.ViewProjectionParam = this.effect.Parameters["ViewProjection"];
            this.CameraPosParam = this.effect.Parameters["CameraPos"];
            this.TextureParam = this.effect.Parameters["Texture"];
            this.TexCoordianteScaleParam = this.effect.Parameters["TexCoordianteScale"];

            this.effect.Parameters["CameraUp"].SetValue(Vector3.Up);
        }

        #endregion

        #region Update

        internal void Update()
        {
            if (this.forceUpdate)
            {
                for (int i = 0; i < billboardVertices.Length; i++)
                {
                    billboardVertices[i].Position = position;
                }
            }
        }

        #endregion

        #region Draw

        internal void Draw()
        {
            BlendState blendState = Persian.GDevice.BlendState;
            Persian.GDevice.BlendState = BlendState.AlphaBlend;

            this.WorldParam.SetValue(Matrix.Identity);
            this.ViewProjectionParam.SetValue(Persian.Camera.View * Persian.Camera.Projection);
            this.CameraPosParam.SetValue(Persian.Camera.Position);
            this.TextureParam.SetValue(this.textures[random.Next(0, 3)]);
            this.TexCoordianteScaleParam.SetValue(0.2f + (float)random.NextDouble() * 1.2f);

            this.effect.CurrentTechnique.Passes[0].Apply();
            {
                Persian.GDevice.DrawUserPrimitives<VertexPositionTexture>(PrimitiveType.TriangleList, billboardVertices, 0, 2);
            }

            Persian.GDevice.BlendState = blendState;

        }

        #endregion

        internal void Dispose()
        {
            MemoryManager.SafeDispose(this.textures);
        }
    }
}
