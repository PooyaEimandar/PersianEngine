/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Rain.cs
 * File Description : The class responsible to simulate the Rain
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 7/19/2013
 * Comment          : 
 *                    Speed for the Rain :  new Vector3(-1, -120, 3)
 *                    Speed for the Snow :  new Vector3(0, -20, 0)
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using PersianSettings;
using System;

namespace PersianCore.Environment
{
    public class Weather : BaseWeather
    {
        #region Fields & Properties

        static Random random = new Random();
        WeatherSet setting;
        VertexBillboard[] particles;
        public Vector3 Center
        {
            get
            {
                return this.setting.cubeArea.Center;
            }
            set
            {
                if (this.setting.cubeArea.Center != value)
                {
                    this.setting.cubeArea.Center = value;
                }
            }
        }
        
        #endregion

        #region Constructor/Destructor

        public Weather(WeatherSet setting)
        {
            this.WorldMatrix = Matrix.Identity;
            this.color = Color.White;
            this.setting = setting;
            this.progress = this.setting.InitialProgress;
            this.turbulence = this.setting.Turbulence;
            this.Enable = this.setting.Enable;
        }

        #endregion

        #region Load

        public void Load()
        {
            var Content = Persian.EngineContent;

            if (string.IsNullOrWhiteSpace(this.setting.TextureName))
            {
                Logger.WriteError("Texture of weather can not be null or ematy, the default one (Rain) used");
                this.setting.TextureName = "Rain";
            }
            try
            {
                if (this.texture == null)
                {
                    this.texture = Content.Load<Texture2D>(@"Textures\Environments\" + this.setting.TextureName);
                }
                this.effect = Content.Load<Effect>(@"Shaders\Environments\Weather").Clone();
            }
            catch (ContentLoadException ex)
            {
                Logger.WriteError("Could not load content of weather");
            }

            this.WorldParam = this.effect.Parameters["matWorld"];
            this.ProjectionParam = this.effect.Parameters["matProjection"];
            this.ViewParam = this.effect.Parameters["matView"];
            this.TimeParam = this.effect.Parameters["fTime"];
            this.HeightParam = this.effect.Parameters["fHeight"];
            this.WidthParam = this.effect.Parameters["fWidth"];
            this.LengthParam = this.effect.Parameters["fLength"];
            this.ColorParam = this.effect.Parameters["vColor"];
            this.VelocityParam = this.effect.Parameters["Velocity"];
            this.OriginParam = this.effect.Parameters["vOrigin"];
            this.ProgressParam = this.effect.Parameters["progress"];
            this.TurbulenceParam = this.effect.Parameters["fTurbulence"];
            this.TextureParam = this.effect.Parameters["RainTexture"];
            this.effect.Parameters["isRain"].SetValue(this.setting.IsRain);

            this.TurbulenceParam.SetValue(turbulence);
            this.ProgressParam.SetValue(this.progress);

            this.HeightParam.SetValue(this.setting.cubeArea.Height);
            this.WidthParam.SetValue(this.setting.cubeArea.Width);
            this.LengthParam.SetValue(this.setting.cubeArea.Lenght);
            this.ColorParam.SetValue(color.ToVector3());
            this.VelocityParam.SetValue(velocity);
            this.TextureParam.SetValue(this.texture);
            this.WorldParam.SetValue(WorldMatrix);

            Build();
        }

        #endregion

        #region Build

        private void Build()
        {
            uint numVertices = this.setting.NumberOfParticles * 4;// each billboard is a quad
            particles = new VertexBillboard[numVertices];

            int i = 0;
            while (i < numVertices)
            {
                Vector2 scale;
                if (this.setting.IsRain)
                {
                    scale = new Vector2(random.Next(1, 4) / 30.0f, random.Next(40, 80) / 70.0f);
                }
                else
                {
                    scale = Vector2.One * 0.5f;
                }

                var pos = new Vector3(random.Next((int)this.setting.cubeArea.Width),
                    random.Next((int)this.setting.cubeArea.Height),
                    random.Next((int)this.setting.cubeArea.Lenght));
                var randoms = new Vector2(random.Next(1000), random.Next(1000));
                particles[i++] = new VertexBillboard(pos, Vector3.Right, Vector3.One, new Vector2(0, 0), scale, randoms);

                randoms = new Vector2(random.Next(1000), random.Next(1000));
                particles[i++] = new VertexBillboard(pos, Vector3.Right, Vector3.One, new Vector2(1, 0), scale, randoms);

                randoms = new Vector2(random.Next(1000), random.Next(1000));
                particles[i++] = new VertexBillboard(pos, Vector3.Right, Vector3.One, new Vector2(1, 1), scale, randoms);

                randoms = new Vector2(random.Next(1000), random.Next(1000));
                particles[i++] = new VertexBillboard(pos, Vector3.Right, Vector3.One, new Vector2(0, 1), scale, randoms);
            }

            var indices = new int[this.setting.NumberOfParticles * 6];
            for (i = 0; i < this.setting.NumberOfParticles; i++)
            {
                indices[i * 6] = i * 4;
                indices[i * 6 + 1] = i * 4 + 1;
                indices[i * 6 + 2] = i * 4 + 2;
                indices[i * 6 + 3] = i * 4;
                indices[i * 6 + 4] = i * 4 + 2;
                indices[i * 6 + 5] = i * 4 + 3;
            }

            this.vBuffer = new DynamicVertexBuffer(
                Persian.GDevice,
                VertexBillboard.VertexDeclaration,
                particles.Length,
                BufferUsage.WriteOnly);

            this.vBuffer.SetData(particles);
            this.iBuffer = new IndexBuffer(
                Persian.GDevice,
                typeof(int),
                indices.Length,
                BufferUsage.WriteOnly);

            this.iBuffer.SetData(indices);
        }

        #endregion

        #region Update

        /// <summary>
        /// Update Rain
        /// </summary>
        /// <param name="gameTime"></param>
        public override void Update(float Time)
        {
            if (isDisposed || !this.Enable) return;

            if (this.setting.FadeIn && (int)Time % this.setting.FadeProgressTime == 0)
            {
                if (this.Progress > 1.0f)
                {
                    this.setting.FadeIn = false;
                }
                else
                {
                    this.Progress += this.setting.FadeProgressStep;
                }
            }

            if (this.setting.FromVelocity != this.setting.ToVelocity)
            {
                this.Velocity = PMathHelper.Lerp(
                    this.setting.FromVelocity, 
                    this.setting.ToVelocity, 
                    this.setting.VelocityStep);
            }

            this.ProjectionParam.SetValue(Persian.Camera.Projection);
            this.ViewParam.SetValue(Persian.Camera.View);
            this.TimeParam.SetValue(Time / 1500);

            //if (this.setting.ActiveDepending)
            //{
            //if (Persian.PositionsOfCharacters.TryGetValue(this.setting.DependsOnWho, out this.DependingPosition))
            //{
            //    this.OriginParam.SetValue(this.DependingPosition - new Vector3(this.setting.cubeArea.Width / 2, 0, this.setting.cubeArea.Lenght / 2));
            //}
            //else
            //{
            //    throw new Exception("You define rain to depends on " + this.setting.DependsOnWho + " which is not presented");
            //}
            //}
            //else
            //{
            this.OriginParam.SetValue(this.setting.cubeArea.Center);
            //}
        }

        #endregion

        #region Draw

        public override void Draw()
        {
            if (isDisposed || !this.Enable) return;
            
            Persian.GDevice.RasterizerState = RasterizerState.CullNone;
            Persian.GDevice.Indices = iBuffer;
            Persian.GDevice.SetVertexBuffer(vBuffer);

            this.effect.CurrentTechnique.Passes[0].Apply();
            {
                Persian.GDevice.DrawIndexedPrimitives(
                    PrimitiveType.TriangleList, 
                    0, 
                    0, 
                    particles.Length, 
                    0, 
                    particles.Length / 3);
                Persian.GDevice.RasterizerState = RasterizerState.CullCounterClockwise;
            }
        }

        #endregion
    }
}
