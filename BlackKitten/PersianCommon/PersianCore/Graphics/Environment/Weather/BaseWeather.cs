/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : BaseWeather.cs
 * File Description : The base weather class
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 3/30/2014
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore
{
    public abstract class BaseWeather : Disposable
    {
        protected EffectParameter WorldParam, ProjectionParam, ViewParam, TimeParam, HeightParam,
             WidthParam, LengthParam, ColorParam, VelocityParam, OriginParam, ProgressParam, TurbulenceParam, TextureParam;

        protected float progress;
        public float Progress
        {
            get 
            {
                return this.progress;
            }
            set
            {
                if (this.progress != value)
                {
                    this.progress = value;
                    if (this.ProgressParam != null)
                    {
                        this.ProgressParam.SetValue(value);
                    }
                }
            }
        }

        protected bool loadingDone;
        protected Matrix WorldMatrix;
        protected Effect effect;

        protected Vector3 velocity;
        public Vector3 Velocity
        {
            get
            {
                return this.velocity;
            }
            set
            {
                this.velocity = value;
                if (this.VelocityParam != null)
                {
                    this.VelocityParam.SetValue(this.velocity);
                }
            }
        }
        
        protected float turbulence;
        public float Turbulence
        {
            get
            {
                return this.turbulence;
            }
            set
            {
                if (this.turbulence != value)
                {
                    this.turbulence = value;
                    if (this.TurbulenceParam != null)
                    {
                        this.TurbulenceParam.SetValue(this.turbulence);
                    }
                }
            }
        }

        protected Color color;
        public Color Color
        {
            get
            {
                return this.color;
            }
            set
            {
                if (this.color != value)
                {
                    this.color = value;
                    if (this.ColorParam != null)
                    {
                        this.ColorParam.SetValue(this.color.ToVector3());
                    }
                }
            }
        }
        
        protected Texture2D texture;
        public Texture2D Texture
        {
            get
            {
                return this.texture;
            }
            set
            {
                if (this.texture != value)
                {
                    this.texture = value;
                    if (this.TextureParam != null)
                    {
                        this.TextureParam.SetValue(this.texture);
                    }
                }
            }
        }
        
        protected VertexBuffer vBuffer;
        protected IndexBuffer iBuffer;

        public bool Enable;

        public abstract void Update(float gameTime);
        public abstract void Draw();

        protected override void Dispose(bool disposing)
        {
            if (isDisposed || !disposing) return;

            this.Enable = false;

            SystemMemory.SafeDispose(this.effect);
            SystemMemory.SafeDispose(this.vBuffer);
            SystemMemory.SafeDispose(this.iBuffer);

            SystemMemory.SafeDispose(this.WorldParam);
            SystemMemory.SafeDispose(this.ProjectionParam);
            SystemMemory.SafeDispose(this.ViewParam);
            SystemMemory.SafeDispose(this.TimeParam);
            SystemMemory.SafeDispose(this.HeightParam);
            SystemMemory.SafeDispose(this.WidthParam);
            SystemMemory.SafeDispose(this.WidthParam);
            SystemMemory.SafeDispose(this.LengthParam);
            SystemMemory.SafeDispose(this.ColorParam);
            SystemMemory.SafeDispose(this.VelocityParam);
            SystemMemory.SafeDispose(this.OriginParam);
            SystemMemory.SafeDispose(this.ProgressParam);
            SystemMemory.SafeDispose(this.TextureParam);

            base.Dispose(disposing);
        }

        public void DisposeAll()
        {
            SystemMemory.SafeDispose(this.texture);
        }
    }
}
