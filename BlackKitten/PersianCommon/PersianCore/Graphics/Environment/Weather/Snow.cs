/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Snow.cs
 * File Description : The class responsible to simulate the snow
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 3/31/2014
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using PersianSettings;
using System;

namespace PersianCore.Environment
{
    public struct VertexPointSpriteParticle
    {
        public Vector3 Position;
        public float Size;
        public Vector2 Rand;

        public static int SizeInBytes = sizeof(float) * 6;

        public VertexPointSpriteParticle(Vector3 position, float size, Vector2 rand)
        {
            this.Position = position;
            this.Size = size;
            this.Rand = rand;
        }

        public static readonly VertexDeclaration _VertexDeclaration = new VertexDeclaration(
            new VertexElement(0, VertexElementFormat.Vector3, VertexElementUsage.Position, 0),
            new VertexElement(sizeof(float) * 3, VertexElementFormat.Single, VertexElementUsage.PointSize, 0),
            new VertexElement(sizeof(float) * 4, VertexElementFormat.Vector2, VertexElementUsage.TextureCoordinate, 0));


    }

    public class Snow : BaseWeather
    {
        #region Fields & Properties

        static Random random = new Random();
        WeatherSet setting;
        VertexPointSpriteParticle[] particles;

        #endregion

        #region Constructor

        public Snow(WeatherSet setting)
        {
            this.setting = setting;
            color = Color.White;
            velocity = new Vector3(10, -20, 0);
            turbulence = 1;
            this.progress = setting.InitialProgress;
        }

        #endregion

        #region Load

        public void Load()
        {
            var Content = Persian.EngineContent;

            texture = Content.Load<Texture2D>(@"Textures\Environments\Snow");
            effect = Content.Load<Effect>(@"Shaders\Environments\Snow").Clone();
            effect.Parameters["t0"].SetValue(texture);
            Build();
        }

        #endregion

        #region Build

        private void Build()
        {
            var numberOfParticles = this.setting.NumberOfParticles;
            this.particles = new VertexPointSpriteParticle[numberOfParticles];

            var width = this.setting.cubeArea.Width;
            var height = this.setting.cubeArea.Height;
            var lenght = this.setting.cubeArea.Lenght;
            var center = this.setting.cubeArea.Center;

            for (int i = 0; i < numberOfParticles; i++)
            {
                var pos = new Vector3(
                    random.Next((int)width),
                    random.Next((int)height),
                    random.Next((int)lenght));

                var randoms = new Vector2(random.Next(1000), random.Next(1000));
                float pSize = random.Next(5, 20) / 100.0f;
                particles[i] = new VertexPointSpriteParticle(pos, pSize, randoms);
            }

            this.vBuffer = new VertexBuffer(
                Persian.GDevice,
                VertexPointSpriteParticle._VertexDeclaration,
                particles.Length,
                BufferUsage.WriteOnly | BufferUsage.None);

            this.vBuffer.SetData(particles);

            this.effect.Parameters["vOrigin"].SetValue(center);
            this.effect.Parameters["fHeight"].SetValue(height);
            this.effect.Parameters["fWidth"].SetValue(width);
            this.effect.Parameters["fLength"].SetValue(lenght);
            this.effect.Parameters["progress"].SetValue(this.progress);
        }

        #endregion

        #region Update

        public override void Update(float Time)
        {
            if (isDisposed) return;

            effect.Parameters["matWorld"].SetValue(WorldMatrix);
            effect.Parameters["matProjection"].SetValue(Persian.Camera.Projection);
            effect.Parameters["matView"].SetValue(Persian.Camera.View);
            effect.Parameters["fTime"].SetValue(Time / 500);
            effect.Parameters["vColor"].SetValue(color.ToVector3());
            effect.Parameters["vVelocity"].SetValue(velocity);
            effect.Parameters["fTurbulence"].SetValue(turbulence);
        }

        #endregion

        #region Draw

        public override void Draw()
        {
            Persian.GDevice.SetVertexBuffer(vBuffer);

            effect.CurrentTechnique.Passes[0].Apply();
            Persian.GDevice.DrawPrimitives(PrimitiveType.TriangleList, 0, particles.Length);
        }

        #endregion
    }
}
