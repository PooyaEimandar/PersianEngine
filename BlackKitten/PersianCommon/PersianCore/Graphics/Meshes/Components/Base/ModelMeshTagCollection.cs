/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : ModelMeshTagCollection.cs
 * File Description : The base object
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/25/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework.Graphics;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace PersianCore.Meshes
{
    public class ModelMeshTagCollection : Collection<ModelMeshTag>
    {
        #region Constructor

        public ModelMeshTagCollection(Model model, Dictionary<string, List<string>> DiffisePaths, Effect effect, bool environmentMap, ref bool hasGlow)
        {
            var diffuse = new List<string>();
            ModelMeshTag modelMeshTag;
            for (int i = 0; i < model.Meshes.Count; ++i)
            {
                //Effect will clone on assigning
                if (DiffisePaths != null)
                {
                    DiffisePaths.TryGetValue(model.Meshes[i].Name, out diffuse);
                }
                modelMeshTag = new ModelMeshTag(model.Meshes[i], diffuse);
                modelMeshTag.Load(effect, environmentMap, ref hasGlow);
                this.Add(modelMeshTag);
            }
        }

        #endregion

        #region Methods

        internal void OnChangeRenderTechnique(Effect effect, bool environmentMap, ref bool hasGlow)
        {
            for (int i = 0; i < this.Count; ++i)
            {
                this[i].OnChangeRenderTechnique(effect, environmentMap, ref hasGlow);
            }
        }

        internal void ChangeTexture(Texture texture, Mesh.TextureToBeChangedInfo textureToBeChangedInfo)
        {
            foreach (var meshTag in this.Items)
            {
                if (meshTag.Name == textureToBeChangedInfo.MeshName)
                {
                    meshTag.SetMap(texture, textureToBeChangedInfo.textureToBeChanged);
                    break;
                }
            }
        }

        #endregion
    }
}
