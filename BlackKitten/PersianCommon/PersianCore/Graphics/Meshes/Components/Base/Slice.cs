/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Slice.cs
 * File Description : This class perform slice of mesh
 * Generated by     : Seyed Mahdi Hosseini
 * Last modified by : Pooya Eimandar on 9/24/2013
 * Comment          : 
 */

using Debugger;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using PersianCore.Graphics.VertexType;
using System;
using System.Collections.Generic;

namespace PersianCore.Meshes.Components.Base
{
    public class Slice : Disposable
    {
        int CurrentTechniqueIndex, CurrentPassIndex, WorldParamIndex;

        public List<ushort> Indices;
        public List<VertexMesh> Vertices;

        public List<ushort> ibro = new List<ushort>();
        public List<VertexMesh> vbro = new List<VertexMesh>();
        public VertexBuffer _vbro;
        public IndexBuffer _ibro;

        public VertexBuffer _vbro1;
        public IndexBuffer _ibro1;

        public List<ushort> ib_1 = new List<ushort>();
        public IndexBuffer _ib_1;
        public List<VertexMesh> vb_1 = new List<VertexMesh>();
        public VertexBuffer _vb_1;

        public List<ushort> ib1 = new List<ushort>();
        public IndexBuffer _ib1;
        public List<VertexMesh> vb1 = new List<VertexMesh>();
        public VertexBuffer _vb1;

        public VertexMesh[] _modelVdata;
        public bool IsSliced { get; internal set; }

        public int NumVertices { get; set; }
        public int VertexOffset { get; set; }
        public int StartIndex { get; set; }
        public int PrimitiveCount { get; set; }

        public Matrix _world_1 = Matrix.Identity;
        public Matrix _world1 = Matrix.Identity;

        public Slice(Model model, int WorldParamIndex)
        {
            this.WorldParamIndex = WorldParamIndex;
            this.Indices = new List<ushort>();
            this.Vertices = new List<VertexMesh>();

            for (int i = 0; i < model.Meshes.Count; ++i)
            {
                for (int j = 0; j < model.Meshes[i].MeshParts.Count; ++j)
                {
                    var meshPart = model.Meshes[i].MeshParts[j];

                    AddIndices(
                        meshPart.IndexBuffer,
                        meshPart.VertexBuffer,
                        meshPart.NumVertices,
                        meshPart.VertexOffset,
                        meshPart.StartIndex,
                        meshPart.PrimitiveCount);
                }
            }
        }

        private void AddIndices(IndexBuffer indexBuffer, VertexBuffer vertexBuffer,
            int NumVertices, int VertexOffset, int StartIndex, int PrimitiveCount)
        {
            if (indexBuffer.IndexElementSize != IndexElementSize.SixteenBits)
            {
                throw new Exception(string.Format("Model uses 32-bit indices, which are not supported."));
            }

            this.NumVertices = NumVertices;
            this.VertexOffset = VertexOffset;
            this.StartIndex = StartIndex;
            this.PrimitiveCount = PrimitiveCount;

            var vertices = new VertexMesh[NumVertices];
            vertexBuffer.GetData<VertexMesh>(
                VertexOffset * vertexBuffer.VertexDeclaration.VertexStride,
                vertices, 0, NumVertices, vertexBuffer.VertexDeclaration.VertexStride);
            this.Vertices.AddRange(vertices);

            var indices = new ushort[PrimitiveCount * 3];
            indexBuffer.GetData<ushort>(StartIndex * 2, indices, 0, PrimitiveCount * 3);
            this.Indices.AddRange(indices);
        }

        public void DrawToGBuffer(Matrix[] SkinTransforms, Effect effect)
        {
            this.CurrentTechniqueIndex = 1;
            this.CurrentPassIndex = 0;

            if (SkinTransforms != null)
            {
                effect.Parameters[0].SetValue(SkinTransforms);
            }
            effect.Parameters[this.WorldParamIndex].SetValue(_world1);//World
            effect.Parameters[this.WorldParamIndex + 1].SetValue(Persian.Camera.View);//View
            effect.Parameters[this.WorldParamIndex + 2].SetValue(Persian.Camera.Projection);//Projection
            effect.Parameters[this.WorldParamIndex + 4].SetValue(Persian.Camera.FarClip);//Farclip

            //var raster = Persian.GDevice.RasterizerState;
            //Persian.GDevice.RasterizerState = RasterizerState.CullNone;

            effect.Parameters[this.WorldParamIndex].SetValue(_world1);
            DrawPrimitives(effect, _vbro, _ibro);
            DrawPrimitives(effect, _vb1, _ib1);

            effect.Parameters[this.WorldParamIndex].SetValue(_world_1);
            DrawPrimitives(effect, _vb_1, _ib_1);
            DrawPrimitives(effect, _vbro1, _ibro1);

            //Persian.GDevice.RasterizerState = raster;
        }

        public void DrawShadowMap(Matrix[] SkinTransforms, Effect effect, ref Matrix LightViewProj)
        {
            this.CurrentTechniqueIndex = 1;
            this.CurrentPassIndex = 2;
            if (SkinTransforms != null)
            {
                effect.Parameters[0].SetValue(SkinTransforms);
            }
            effect.Parameters[this.WorldParamIndex].SetValue(_world1);//World
            effect.Parameters[this.WorldParamIndex + 3].SetValue(LightViewProj);

            effect.Parameters[this.WorldParamIndex].SetValue(_world1);
            DrawPrimitives(effect, _vbro, _ibro);
            DrawPrimitives(effect, _vb1, _ib1);

            effect.Parameters[this.WorldParamIndex].SetValue(_world_1);
            DrawPrimitives(effect, _vb_1, _ib_1);
            DrawPrimitives(effect, _vbro1, _ibro1);
        }

        public void ReConstructShading(Matrix[] SkinTransforms, Effect effect, Texture2D LightMap)
        {
            this.CurrentTechniqueIndex = 1;
            this.CurrentPassIndex = 1;
            if (SkinTransforms != null)
            {
                effect.Parameters[0].SetValue(SkinTransforms);
            }

            effect.Parameters[this.WorldParamIndex + 1].SetValue(Persian.Camera.View);//Set view
            effect.Parameters[this.WorldParamIndex + 2].SetValue(Persian.Camera.Projection);
            effect.Parameters[this.WorldParamIndex + 5].SetValue(new Vector2(0.5f / LightMap.Width, 0.5f / LightMap.Height));
            effect.Parameters[this.WorldParamIndex + 17].SetValue(LightMap);

            effect.Parameters[this.WorldParamIndex].SetValue(_world1);
            DrawPrimitives(effect, _vbro, _ibro);
            DrawPrimitives(effect, _vb1, _ib1);

            effect.Parameters[this.WorldParamIndex].SetValue(_world_1);
            DrawPrimitives(effect, _vb_1, _ib_1);
            DrawPrimitives(effect, _vbro1, _ibro1);
        }

        private void DrawPrimitives(Effect effect, VertexBuffer vertexBuffer, IndexBuffer indexBuffer)
        {
            //Set current technique
            effect.CurrentTechnique = effect.Techniques[this.CurrentTechniqueIndex];
            effect.Techniques[this.CurrentTechniqueIndex].Passes[this.CurrentPassIndex].Apply();
            {
                Persian.GDevice.SetVertexBuffer(vertexBuffer, this.VertexOffset);
                Persian.GDevice.DrawPrimitives(
                    PrimitiveType.TriangleList,
                    0,
                    vertexBuffer.VertexCount);
            }
#if DEBUG
            UsageReporter.debugInfo.DrawCalls++;
#endif
        }

        public void DrawBlended(GraphicsDevice GDevice)
        {
            
        }
        protected override void Dispose(bool disposing)
        {
            if (!disposing || isDisposed) return;

            this._ib_1 = null;

            this.ib1.Clear();
            this.ib_1.Clear();
            this.ibro.Clear();
            this.Indices.Clear();
            this.vb_1.Clear();
            this.vb1.Clear();
            this.vbro.Clear();
            this.Vertices.Clear();

            this.ib1 = null;
            this.ib_1 = null;
            this.ibro = null;
            this.Indices = null;
            this.vb_1 = null;
            this.vb1 = null;
            this.vbro = null;
            this.Vertices = null;

            SystemMemory.SafeDispose(this._ib1);
            SystemMemory.SafeDispose(this._ibro);
            SystemMemory.SafeDispose(this._ibro1);
            SystemMemory.SafeDispose(this._vb_1);
            SystemMemory.SafeDispose(this._vb1);
            SystemMemory.SafeDispose(this._vbro);
            SystemMemory.SafeDispose(this._vbro1);
            
            base.Dispose(disposing);
        }
    }
}
