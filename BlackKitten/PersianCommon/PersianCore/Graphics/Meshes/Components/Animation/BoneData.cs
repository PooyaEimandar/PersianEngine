/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : BoneData.cs
 * File Description : The data of bone 
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/27/2013
 * Comment          : 
 */

using System;
using System.ComponentModel;
using Microsoft.Xna.Framework;
using PersianCore.Physic;
using JitterPhysic.Collision.Shapes;
using JitterPhysic.Dynamics;
using SkinnedMeshRuntime;

namespace PersianCore.Meshes.Components
{
    public class BoneData : INotifyPropertyChanged, ICloneable
    {
        #region Fields & Properties

        static Vector4 SelectedColor = new Vector4(1, 0, 0, 0.7f);
        static Vector4 DeSelectedColor = Vector4.One;

        public event PropertyChangedEventHandler PropertyChanged;
        public event EventHandler<CmdEventArgs> NotifyBoneInheritChanged;
        bool ForceUpdate;
        public SkinnedSphere skinnedSphere;
        bool isSelected;
        public bool IsSelected
        {
            get
            {
                return this.isSelected;
            }
            set
            {
                this.isSelected = value;
                if (isSelected)
                {
                    this.rigidBody.Shape.Color = new Vector3(SelectedColor.X, SelectedColor.Y, SelectedColor.Z).ToJVector();
                    this.rigidBody.Shape.Opacity = SelectedColor.W;
                }
                else
                {
                    this.rigidBody.Shape.Color = new Vector3(DeSelectedColor.X, DeSelectedColor.Y, DeSelectedColor.Z).ToJVector();
                    this.rigidBody.Shape.Opacity = DeSelectedColor.W;
                }
            }
        }

        public string Name
        {
            get
            {
                return this.skinnedSphere.BoneName;
            }
        }
        int _Index;
        public int Index
        {
            get
            {
                return this._Index;
            }
        }

        /// <summary>
        /// World of Bone
        /// </summary>
        Matrix _World;
        public Matrix World
        {
            get
            {
                return this._World;
            }
        }

        Vector3 _Position;
        public Vector3 Position
        {
            get
            {
                return this._Position;
            }
            set
            {
                if (this._Position != value)
                {
                    this.ForceUpdate = true;
                    this._Position = value;
                }
            }
        }

        Vector3 _Rotation;
        public Vector3 Rotation
        {
            get
            {
                return this._Rotation;
            }
            set
            {
                if (this._Rotation != value)
                {
                    this.ForceUpdate = true;
                    this._Rotation = value;
                }
            }
        }

        /// <summary>
        /// Show == 1 , Else 0
        /// </summary>
        int _Visibility;
        [Browsable(false)]
        public int Visibility
        {
            get
            {
                return this._Visibility;
            }
            set
            {
                this._Visibility = value;
                NotifyPropertyChanged("Show");
            }
        }

        [Browsable(false)]
        public Guid Parent
        {
            get;
            set;
        }

        int _BoneInherit;
        public int BoneInherit
        {
            get
            {
                return this._BoneInherit;
            }
            set
            {
                if (this._BoneInherit != value)
                {
                    this._BoneInherit = value;
                    NotifyBoneInheritChanged(this, new CmdEventArgs(new object[] { _Index, value }));
                }
            }
        }

        [Browsable(false)]
        public RigidBody rigidBody;
        [Browsable(false)]
        public float Radius
        {
            get
            {
                return (this.rigidBody.Shape as SphereShape).Radius;
            }
            set
            {
                (this.rigidBody.Shape as SphereShape).Radius = value;
            }
        }

        [Browsable(false)]
        public Vector3 Center
        {
            get
            {
                return this.rigidBody.Position.ToXNAVector();
            }
            set
            {
                this.rigidBody.Position = value.ToJVector();
            }
        }

        #endregion

        #region Constructor/Destructor

        public BoneData(Guid GUID)
            : this(GUID, new SkinnedSphere(), -1)
        {
        }

        public BoneData(Guid GUID, SkinnedSphere skinnedSphere, int BoneIndex)
        {
            this._Position = new Vector3();
            this._Rotation = new Vector3();
            this.skinnedSphere = skinnedSphere;
            this._Index = BoneIndex;
            this._Visibility = 1;
            this.ForceUpdate = false;
            this.Parent = GUID;
            this._BoneInherit = -1;
            this.PropertyChanged += new PropertyChangedEventHandler(OnPropertyChanged);
            
            #region Assign Physic Sphere to it
            var boundingSphere = skinnedSphere.ToBoundingSphere();
            this.rigidBody = new RigidBody(new SphereShape(boundingSphere.Radius / 10))
            {
                Position = boundingSphere.Center.ToJVector(),
                IsActive = Persian.RunningEngine ? true : false,
                drawType = DrawType.DoNotDraw
            };
            #endregion

            if (!Persian.RunningEngine)
            {
                PhysicManager.physicWorld.AddBody(this.rigidBody);
            }
        }

        #endregion

        #region Events

        private void NotifyPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void OnPropertyChanged(object sender, PropertyChangedEventArgs e)
        {

        }

        #endregion

        #region Update

        internal void Update(ref AnimationPlayer animationPlayer)
        {
            if (this.ForceUpdate)
            {
                var WorldTrans = PMathHelper.CreateRotationMatrix(this._Rotation) * Matrix.CreateTranslation(this._Position);
                animationPlayer.AddedTransformState(true, _Index);
                animationPlayer.SetAddedTransform(ref WorldTrans, _Index);
                ForceUpdate = false;
            }
            animationPlayer.GetWorldSpaceTransform(ref this._World, this._Index);
        }

        /// <summary>
        /// An Pointer must be send to here so do not use ref
        /// </summary>
        /// <param name="animationMixer"></param>
        internal void Update(AnimationMixer animationMixer)
        {
            if (this.ForceUpdate)
            {
                Matrix WorldTrans = PMathHelper.CreateRotationMatrix(this._Rotation) * Matrix.CreateTranslation(this._Position);
                animationMixer.AddedTransformState(true, _Index);
                animationMixer.SetAddedTransform(ref WorldTrans, _Index);
                ForceUpdate = false;
            }
            animationMixer.GetWorldSpaceTransform(ref this._World, this._Index);
        }

        #endregion

        #region Clone

        public object Clone()
        {
            BoneData _clone = new BoneData(this.Parent);
            this.CopyTo<BoneData>(ref _clone);
            return _clone;
        }

        #endregion
    }
}
