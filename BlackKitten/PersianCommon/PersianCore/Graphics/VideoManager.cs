/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : VideoManager.cs
 * File Description : The video manager
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 9/28/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Media;
using System;

namespace PersianCore.Graphics
{
    public class VideoManager : Node
    {
        #region Fields & Properties

        TimeSpan time;
        Video video;
        VideoPlayer videoPlayer;
        Vector2 viewSize;
        bool done;

        bool loop;
        public bool Loop
        {
            get
            {
                return this.loop;
            }
            set
            {
                if (this.loop != value)
                {
                    this.loop = value;
                    this.videoPlayer.IsLooped = value;
                }
            }
        }
        public bool Enable { get; set; }
        public event EventHandler OnComplete; 

        #endregion

        #region Constructor/Destructor

        public VideoManager()
        {
            this.Enable = true;
        }

        ~VideoManager()
        { 
        }

        #endregion

        #region Load

        public void Load(string videPath = @"Videos\BaziPardaz")
        {
            this.video = Persian.EngineContent.Load<Video>(videPath);
            this.videoPlayer = new VideoPlayer();
            OnPreparingDevice(null);
        }

        #endregion

        #region Events

        public override void OnPreparingDevice(PreparingDeviceSettingsEventArgs e)
        {
            this.viewSize = new Vector2(Persian.GDevice.Viewport.Width, Persian.GDevice.Viewport.Height);
            base.OnPreparingDevice(e);
        }

        #endregion

        #region Update

        public void Update()
        {
            if (!this.Enable) return;

            if (this.videoPlayer.State == MediaState.Stopped)
            {
                if (!done)
                {
                    done = true;
                    PlayIt();
                }
                else
                {
                    if (!this.loop)
                    {
                        if (OnComplete != null)
                        {
                            OnComplete(null, null);
                        }
                    }
                    else
                    {
                        PlayIt();
                    }
                }
            }
        }

        private void PlayIt()
        {
            this.time = TimeSpan.Zero;
            this.videoPlayer.Play(video);
        }

        #endregion

        #region Draw

        public void Draw(SpriteBatch spriteBatch, BlendState blendState)
        {
            if (!this.Enable) return;

            var texture = videoPlayer.GetTexture();

            if (texture != null)
            {
                spriteBatch.Begin(SpriteSortMode.Immediate, blendState);
                {
                    spriteBatch.Draw(
                        texture,
                        new Rectangle(0, 0, (int)this.viewSize.X, (int)this.viewSize.Y),
                        Color.White);
                    spriteBatch.End();
                }
            }


            //spriteBatch.Begin();
            //{
            //    spriteBatch.Draw(
            //        videoPlayer.GetTexture(), 
            //        0.5f * screenDim - 0.5f * new Vector2(this.video.Width, this.video.Height), 
            //        Color.White);
            //    spriteBatch.End();
            //}

            //    

            //    switch (mode)
            //    {
            //        case 0:
            //            spriteBatch.Begin();
            //            {
            //                spriteBatch.Draw(videoPlayer.GetTexture(), 0.5f * screenDim - 0.5f * videoDimensions, Color.White);
            //                spriteBatch.End();
            //            }
            //            break;
            //        case 1:
            //           
            //            break;
            //        case 2:
            //            spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.NonPremultiplied);
            //            {
            //                postProcessEffect.CurrentTechnique.Passes[0].Apply();
            //                {
            //                    postProcessEffect.Parameters["fTimer"].SetValue((float)gameTime.TotalGameTime.TotalSeconds * 3.0f);
            //                    spriteBatch.Draw(videoPlayer.GetTexture(), new Rectangle(0, 0, (int)screenDim.X, (int)screenDim.Y), Color.White);
            //                }
            //                spriteBatch.End();
            //            }
            //            break;
            //        case 3:
            //            float time = 0.5f * (float)gameTime.TotalGameTime.TotalSeconds;
            //            Vector3 cameraPosition = new Vector3((float)Math.Sin(time), 0, (float)Math.Cos(time)) * 15.0f;

            //            Matrix view = Matrix.CreateLookAt(cameraPosition, Vector3.Zero, Vector3.Up);
            //            Matrix projection = Matrix.CreatePerspectiveFieldOfView(MathHelper.PiOver4, GDevice.Viewport.AspectRatio, 1.0f, 1000.0f);
            //            foreach (ModelMesh m in sphereModel.Meshes)
            //            {
            //                foreach (BasicEffect be in m.Effects)
            //                {
            //                    be.World = Matrix.Identity;
            //                    be.View = view;
            //                    be.Projection = projection;

            //                    be.Texture = videoPlayer.GetTexture();
            //                    be.EnableDefaultLighting();
            //                    be.PreferPerPixelLighting = true;
            //                }
            //                m.Draw();
            //            }
            //            break;
            //        default:
            //            break;
            //    }
            //}
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (!disposing || isDisposed) return;
            SystemMemory.SafeDispose(this.videoPlayer); 
            base.Dispose(disposing);
        }

        #endregion
    }
}
