/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : ParticlesManager.cs
 * File Description : The manager of particle systems base on sample of Microsoft 3D Particles
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 5/15/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework.Graphics;
using PersianCore.Environment;
using PersianCore.Graphics.Particles;
using System;
using System.Collections.Generic;

namespace PersianCore.Graphics
{
    public class ParticlesManager : Node
    {
        #region Fields & Properties

        GraphicsDevice GDevice;
        List<ParticleSystem> particleSystems;
        public List<ParticleSystem> ParticleSystems
        {
            get
            {
                return this.particleSystems;
            }
        }

        List<Billboard> billboardSystems;
        public List<Billboard> BillboardSystems
        {
            get
            {
                return this.billboardSystems;
            }
        }

        static event EventHandler OnAddingParticle;
        public static ParticleSystem[] ParticleSystemsToBeAdding
        {
            set
            {
                OnAddingParticle(value, new EventArgs());
            }
        }

        static event EventHandler OnRemovingParticle;
        public static ParticleSystem ParticleSystemToBeOnRemove
        {
            set
            {
                OnRemovingParticle(value, new EventArgs());
            }
        }

        #endregion

        #region Constructor/Destructor

        public ParticlesManager()
        {
            this.GDevice = Persian.GDevice;
            this.particleSystems = new List<ParticleSystem>();
            this.billboardSystems = new List<Billboard>();
            OnAddingParticle += new EventHandler(OnAddingEvent);
            OnRemovingParticle += new EventHandler(OnRemovingEvent);
        }

        #endregion

        #region Methods

        public ParticleSystem GetParticleByID(string ID)
        {
            ParticleSystem result = null;
            foreach (var item in this.particleSystems)
            {
                if (item.ID == ID)
                {
                    result = item;
                    break;
                }
            }
            return result;
        }

        public string AddParticle(ParticleSystem particleSystem)
        {
            string HResult = null;
            particleSystem.Load(GDevice, ref HResult);
            if (HResult != null) return HResult;

            this.particleSystems.Add(particleSystem);
            SortParticles();
            return HResult;
        }

        public string AddBillboard(Billboard billboard, string TexturesPath)
        {
            string HResult = null;
            billboard.Load(TexturesPath);
            if (HResult != null) return HResult;
            this.billboardSystems.Add(billboard);
            SortBillboards();

            return HResult;
        }

        private void SortParticles()
        {
            //Sort particles by their distance and then draw
            this.particleSystems.Sort(delegate(ParticleSystem p1, ParticleSystem p2)
            {
                return (int)(p2.SqrDistanceToCam - p1.SqrDistanceToCam);
            });
        }

        private void SortBillboards()
        {
            //Sort particles by their distance and then draw
            this.billboardSystems.Sort(delegate(Billboard p1, Billboard p2)
            {
                return (int)(p2.SqrDistanceToCam - p1.SqrDistanceToCam);
            });
        }

        public void RemoveParticle(ParticleSystem particleSystem)
        {
            this.particleSystems.Remove(particleSystem);
        }

        public void RemoveBillboard(Billboard billboard)
        {
            this.billboardSystems.Remove(billboard);
        }

        public void RemoveAll()
        {
            foreach (var item in this.billboardSystems)
            {
                SystemMemory.SafeDispose(item);
            }
            foreach (var item in this.particleSystems)
            {
                SystemMemory.SafeDispose(item);
            }
            this.billboardSystems.Clear();
            this.particleSystems.Clear();
        }

        #endregion

        #region Events

        private void OnAddingEvent(object sender, EventArgs e)
        {
            string HResult = null;
            var systems = (sender as ParticleSystem[]);
            for (int i = 0; i < systems.Length; i++)
            {
                HResult = AddParticle(systems[i]);
                if (HResult != null)
                {
                    Logger.WriteError(HResult);
                    break;
                }
            }
        }

        private void OnRemovingEvent(object sender, EventArgs e)
        {
            var systems = (sender as ParticleSystem[]);
            for (int i = 0; i < systems.Length; i++)
            {
                RemoveParticle(systems[i]);
            }
        }

        #endregion

        #region Update

        internal void Update()
        {
            float deltaTimeSeconds = (float)Persian.gameTime.ElapsedGameTime.TotalSeconds;
            //update the particle systems
            foreach (var iter in this.particleSystems)
            {
                iter.Update(deltaTimeSeconds);
            }
        }

        #endregion

        #region Draw

        internal void Draw()
        {
            foreach (var iter in particleSystems)
            {
                iter.Draw();
            }
            foreach (var iter in billboardSystems)
            {
                iter.Draw();
            }
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                foreach (var item in this.particleSystems)
                {
                    SystemMemory.SafeDispose(item);
                }
                foreach (var item in this.billboardSystems)
                {
                    SystemMemory.SafeDispose(item);
                }
            }
            base.Dispose(disposing);
        }

        #endregion
    }
}
