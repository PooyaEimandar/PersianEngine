/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : RadialBlur.cs
 * File Description : The radial blur post process
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 4/15/2014
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Graphics.PostProcessing
{
    public class RadialBlur : Disposable
    {
        #region Fields & Properties

        RenderTarget renderTarget;
        Effect effect;
        EffectParameter blurStartParameter;
        EffectParameter blurWidthParameter;
        EffectParameter centerXParameter;
        EffectParameter centerYParameter;
        EffectParameter offsetsParameter;

        float blurStart;
        public float BlurStart
        {
            get
            {
                return this.blurStart;
            }
            set
            {
                if (this.blurStart != value)
	            {
                    this.blurStart = value;
		            this.blurStartParameter.SetValue(value);
	            }
            }
        }

        float blurWidth;
        public float BlurWidth
        {
            get
            {
                return this.blurWidth;
            }
            set
            {
                if (this.blurWidth != value)
	            {
                    this.blurWidth = value;
		            this.blurWidthParameter.SetValue(value);
	            }
            }
        }

        float centerX;
        public float CenterX
        {
            get
            {
                return this.centerX;
            }
            set
            {
                if (this.centerX != value)
	            {
                    this.centerX = value;
		            this.centerXParameter.SetValue(value);
	            }
            }
        }
        
        float centerY;
        public float CenterY
        {
            get
            {
                return this.centerY;
            }
            set
            {
                if (this.centerY != value)
	            {
                    this.centerY = value;
		            this.centerYParameter.SetValue(value);
	            }
            }
        }

        Vector2 offsets;
        public Vector2 Offsets
        {
            get
            {
                return this.offsets;
            }
            set
            {
                if (this.offsets != value)
	            {
                    this.offsets = value;
		            this.offsetsParameter.SetValue(value);
	            }
            }
        }
        
        #endregion

        #region Constructor

        public RadialBlur()
        {
            this.blurStart = 1.0f;
            this.blurWidth = -0.2f;
            this.centerX = 0.5f;
            this.centerY = 0.5f;
            this.offsets = Vector2.Zero;
        }

        #endregion

        #region Load

        public void Load(ContentManager Content)
        {
            var path = @"Shaders\PostProcessing\";

            if (!Persian.RunningEngine)
            {
                path = @"EditorBrowser\" + path;
            }

            this.effect = Content.Load<Effect>(path + @"RadialBlur");
            this.blurStartParameter = effect.Parameters["BlurStart"];
            this.blurWidthParameter = effect.Parameters["BlurWidth"];
            this.centerXParameter = effect.Parameters["CenterX"];
            this.centerYParameter = effect.Parameters["CenterY"];
            this.offsetsParameter = effect.Parameters["Offsets"];

            this.blurStartParameter.SetValue(this.blurStart);
            this.blurWidthParameter.SetValue(this.blurWidth);
            this.centerXParameter.SetValue(this.centerX);
            this.centerYParameter.SetValue(this.centerY);
            this.offsetsParameter.SetValue(this.offsets);

            var pp = Persian.GDevice.PresentationParameters;
            int width = pp.BackBufferWidth;
            int height = pp.BackBufferHeight;
            SurfaceFormat format = pp.BackBufferFormat;
            // Create two rendertargets for the bloom processing. These are half the
            // size of the backbuffer, in order to minimize fillrate costs. Reducing
            // the resolution in this way doesn't hurt quality, because we are going
            // to be blurring the bloom images in any case.
            width /= 2;
            height /= 2;

            this.renderTarget = new RenderTarget(
                width,
                height,
                false,
                format,
                DepthFormat.None,
                0,
                RenderTargetUsage.DiscardContents);
        }

        #endregion

        #region Draw

        /// <summary>
        /// This is where it all happens. Grabs a scene that has already been rendered,
        /// and uses postprocess magic to add a glowing bloom effect over the top of it.
        /// </summary>
        public Texture2D RenderToFX(Texture2D Input)
        {
            return RenderToFX(Input, null);
        }

        /// <summary>
        /// This is where it all happens. Grabs a scene that has already been rendered,
        /// and uses postprocess magic to add a glowing bloom effect over the top of it.
        /// </summary>
        /// <param name="Input"></param>
        /// <param name="samplerState"></param>
        /// <returns></returns>
        public Texture2D RenderToFX(Texture2D Input, SamplerState samplerState)
        {
            //Pass 2 : Apply horizental gaussian blur
            this.renderTarget.Begin();
            {
                this.effect.CurrentTechnique.Passes[0].Apply();
                {
                    //Set sampler
                    Persian.GDevice.Textures[0] = Input;
                    if (samplerState != null)
                    {
                        Persian.GDevice.SamplerStates[0] = samplerState;
                    }
                    Persian.Quad.Draw(-Vector2.One, Vector2.One);
                }
                this.renderTarget.End();
            }


            return this.renderTarget.Texture2D;
        }

        #endregion

        #region Dispose

        /// <summary>
        /// Unload your graphics content.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (!disposing || isDisposed) return;

            SystemMemory.SafeDispose(this.effect);
            SystemMemory.SafeDispose(this.blurStartParameter);
            SystemMemory.SafeDispose(this.blurWidthParameter);
            SystemMemory.SafeDispose(this.centerXParameter);
            SystemMemory.SafeDispose(this.centerYParameter);
            SystemMemory.SafeDispose(this.offsetsParameter);
            SystemMemory.SafeDispose(this.renderTarget);
            
            base.Dispose(disposing);
        }

        #endregion
    }
}
