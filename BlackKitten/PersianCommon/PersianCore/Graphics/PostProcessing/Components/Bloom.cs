/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Bloom.cs
 * File Description : The bloom post process
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 12/15/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Graphics.PostProcessing
{
    /// <summary>
    /// Name           Thresh  Blur Bloom  Base  BloomSat BaseSat
    //  "Default",     0.25f,  4,   1.25f, 1,    1,       1,
    //  "Soft",        0,      3,   1,     1,    1,       1,
    //  "Desaturated", 0.5f,   8,   2,     1,    0,       1,
    //  "Saturated",   0.25f,  4,   2,     0,    1,       0,
    //  "Blurry",      0,      2,   1,     0.1f, 1,       1,
    //  "Subtle",      0.5f,   2,   1,     1,    1,       1,
    /// </summary>
    public class Bloom : Disposable
    {
        #region Fields & Properties

        public bool Enable { get; set; }

        float bloomThreshold;
        public float BloomThreshold 
        {
            get
            {
                return this.bloomThreshold;
            }
            set
            {
                if (this.bloomThreshold != value)
                {
                    this.bloomThreshold = value;
                    if (this.BloomThresholdParam != null)
                    {
                        this.BloomThresholdParam.SetValue(this.bloomThreshold);
                    }
                }
            }
        }

        float blurAmount;
        public float BlurAmount
        {
            get
            {
                return this.blurAmount;
            }
            set
            {
                if(this.blurAmount != value)
                {
                    this.blurAmount = value;
                    this.blur.VAmount = value;
                }
            }
        }

        float bloomIntensity;
        public float BloomIntensity
        {
            get
            {
                return this.bloomIntensity;
            }
            set
            {
                if (this.bloomIntensity != value)
                {
                    this.bloomIntensity = value;
                    if (this.BloomIntensityParam != null)
                    {
                        this.BloomIntensityParam.SetValue(this.bloomIntensity);
                    }
                }
            }
        }

        float baseIntensity;
        public float BaseIntensity
        {
            get
            {
                return this.baseIntensity;
            }
            set
            {
                this.baseIntensity = value;
                if (this.baseIntensity != value)
                {
                    this.baseIntensity = value;
                    if (this.BaseIntensityParam != null)
                    {
                        this.BaseIntensityParam.SetValue(this.baseIntensity);
                    }
                }
            }
        }

        float bloomSaturation;
        public float BloomSaturation
        {
            get
            {
                return this.bloomSaturation;
            }
            set
            {
                this.bloomSaturation = value;
                if (this.bloomSaturation != value)
                {
                    this.bloomSaturation = value;
                    if (this.BloomSaturationParam != null)
                    {
                        this.BloomSaturationParam.SetValue(this.bloomSaturation);
                    }
                }
            }
        }

        float baseSaturation;
        public float BaseSaturation
        {
            get
            {
                return this.baseSaturation;
            }
            set
            {
                this.baseSaturation = value;
                if (this.baseSaturation != value)
                {
                    this.baseSaturation = value;
                    if (this.BaseSaturationParam != null)
                    {
                        this.BaseSaturationParam.SetValue(this.baseSaturation);
                    }
                }
            }
        }


        Effect bloomExtractEffect;
        Effect bloomCombineEffect;

        EffectParameter BloomThresholdParam;
        EffectParameter BloomIntensityParam;
        EffectParameter BaseIntensityParam;
        EffectParameter BloomSaturationParam;
        EffectParameter BaseSaturationParam;

        RenderTarget bloomTarget;
        RenderTarget extractBrightestTarget;

        GaussianBlur blur;

        #endregion

        #region Constructor

        public Bloom()
        {
            this.bloomThreshold = 0.25f;
            this.blurAmount = 4.0f;
            this.bloomIntensity = 1.25f;
            this.baseIntensity = 1.0f;
            this.bloomSaturation = 1.0f;
            this.baseSaturation = 1.0f;
        }

        #endregion

        #region Load

        public void Load(ContentManager Content)
        {
            var path = @"EditorBrowser\Shaders\PostProcessing\Bloom\";

            this.bloomExtractEffect = Content.Load<Effect>(path + @"BloomExtract");
            this.BloomThresholdParam = bloomExtractEffect.Parameters["BloomThreshold"];

            this.bloomCombineEffect = Content.Load<Effect>(path + @"BloomCombine");
            this.BloomIntensityParam = bloomCombineEffect.Parameters["BloomIntensity"];
            this.BaseIntensityParam = bloomCombineEffect.Parameters["BaseIntensity"];
            this.BloomSaturationParam = bloomCombineEffect.Parameters["BloomSaturation"];
            this.BaseSaturationParam = bloomCombineEffect.Parameters["BaseSaturation"];

            this.BloomThresholdParam.SetValue(this.bloomThreshold);
            this.BloomIntensityParam.SetValue(this.bloomIntensity);
            this.BaseIntensityParam.SetValue(this.baseIntensity);
            this.BloomSaturationParam.SetValue(this.bloomSaturation);
            this.BaseSaturationParam.SetValue(this.baseSaturation);

            // Create a texture for rendering the main scene, prior to applying bloom.
            this.bloomTarget = new RenderTarget();


            var pp = Persian.GDevice.PresentationParameters;
            int width = pp.BackBufferWidth;
            int height = pp.BackBufferHeight;
            SurfaceFormat format = pp.BackBufferFormat;
            // Create two rendertargets for the bloom processing. These are half the
            // size of the backbuffer, in order to minimize fillrate costs. Reducing
            // the resolution in this way doesn't hurt quality, because we are going
            // to be blurring the bloom images in any case.
            width /= 2;
            height /= 2;

            this.extractBrightestTarget = new RenderTarget(
                width,
                height,
                false,
                format,
                DepthFormat.None,
                0,
                RenderTargetUsage.DiscardContents);

            //Load blur
            this.blur = new GaussianBlur();
            this.blur.Load(Content);
        }

        #endregion

        #region Draw

        /// <summary>
        /// This is where it all happens. Grabs a scene that has already been rendered,
        /// and uses postprocess magic to add a glowing bloom effect over the top of it.
        /// </summary>
        public Texture2D RenderToFX(Texture2D Input)
        {
            //Pass 1 : extracts only the brightest parts of the image.
            this.extractBrightestTarget.Begin();
            {
                //Persian.GDevice.SamplerStates[0] = SamplerState.LinearClamp;
                Persian.GDevice.Textures[0] = Input;
                this.bloomExtractEffect.CurrentTechnique.Passes[0].Apply();
                {
                    Persian.Quad.Draw(-Vector2.One, Vector2.One);
                }
                this.extractBrightestTarget.End();
            }

            var bluredResult = this.blur.RenderToFX(extractBrightestTarget.Texture2D);

            //Pass 4 : combine them
            this.bloomTarget.Begin();
            {
                Persian.GDevice.Textures[0] = Input;
                Persian.GDevice.Textures[1] = bluredResult;

                this.bloomCombineEffect.CurrentTechnique.Passes[0].Apply();
                {
                    Persian.Quad.Draw(-Vector2.One, Vector2.One);
                }

                this.bloomTarget.End();
            }
            return this.bloomTarget.Texture2D;
        }

        #endregion

        #region Dispose

        /// <summary>
        /// Unload your graphics content.
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (!disposing || isDisposed) return;

            SystemMemory.SafeDispose(this.bloomExtractEffect);
            SystemMemory.SafeDispose(this.bloomCombineEffect);

            SystemMemory.SafeDispose(this.BloomThresholdParam);
            SystemMemory.SafeDispose(this.BloomIntensityParam);
            SystemMemory.SafeDispose(this.BaseIntensityParam);
            SystemMemory.SafeDispose(this.BloomSaturationParam);
            SystemMemory.SafeDispose(this.BaseSaturationParam);

            SystemMemory.SafeDispose(this.bloomTarget);
            SystemMemory.SafeDispose(this.extractBrightestTarget);
            SystemMemory.SafeDispose(this.blur);

            base.Dispose(disposing);
        }

        #endregion
    }
}
