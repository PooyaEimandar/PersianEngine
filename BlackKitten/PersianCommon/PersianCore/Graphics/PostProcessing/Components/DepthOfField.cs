/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : DepthOfField.cs
 * File Description : Depth of field
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 12/8/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Graphics.PostProcessing
{
    public class DepthOfField : Disposable
    {
        #region Fields & Properties

        Effect effect;
        RenderTarget renderTarget;

        #endregion

        #region Constructor

        public DepthOfField()
        {
        }

        static DepthOfField()
        {
        }

        #endregion

        #region Load

        public void Load(ContentManager Content)
        {
            var screenSize = new Vector2(Persian.GDevice.PresentationParameters.BackBufferWidth,
                    Persian.GDevice.PresentationParameters.BackBufferHeight);
            this.renderTarget = new RenderTarget();
            this.effect = Content.Load<Effect>(@"EditorBrowser\Shaders\PostProcessing\Toon");
            //this.effect.Parameters["Thickness"].SetValue(Thickness);
            //this.effect.Parameters["Threshold"].SetValue(Threshold);
            this.effect.Parameters["ScreenSize"].SetValue(screenSize);
        }

        #endregion

        #region Render

        public Texture2D RenderToFX(Texture2D Input)
        {
            this.renderTarget.Begin();
            {
                Persian.GDevice.Textures[0] = Input;
                this.effect.CurrentTechnique.Passes[0].Apply();
                {
                    Persian.Quad.Draw(-Vector2.One, Vector2.One);
                }
                this.renderTarget.End();
            }
            return this.renderTarget.Texture2D;
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (!disposing || isDisposed) return;

            SystemMemory.SafeDispose(this.effect);
            SystemMemory.SafeDispose(this.renderTarget);

            base.Dispose(disposing);
        }

        #endregion
    }
}
