/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Toon.cs
 * File Description : The Toon post process
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 12/8/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Graphics.PostProcessing
{
    public class Toon : Disposable
    {
        #region Fields & Properties

        static Color whiteNoAlpha;
        Effect toonShader;
        RenderTarget renderTarget;

        float thickness; 
        public float Thickness 
        { 
            get
            {
                return this.thickness;
            }
            set
            {
                if (this.thickness != value)
	            {
		            this.thickness = value;
                    if (this.toonShader != null)
	                {
                        this.toonShader.Parameters[2].SetValue(this.thickness);
	                }
                }
            }
        }
        
        float threshold;
        public float Threshold
        {
            get
            {
                return this.threshold;
            }
            set
            {
                if (this.threshold != value)
                {
                    this.threshold = value;
                    if (this.toonShader != null)
                    {
                        this.toonShader.Parameters[3].SetValue(this.threshold);
                    }
                }
            }
        }

        #endregion

        #region Constructor

        public Toon()
        {
            this.thickness = 0.2f;
            this.threshold = 0.1f; 
        }

        static Toon()
        {
            whiteNoAlpha = new Color(255, 255, 255, 0);
        }

        #endregion

        #region Load

        public void Load(ContentManager Content)
        {
            var screenSize = new Vector2(Persian.GDevice.PresentationParameters.BackBufferWidth,
                    Persian.GDevice.PresentationParameters.BackBufferHeight);
            this.renderTarget = new RenderTarget();
            this.toonShader = Content.Load<Effect>(@"EditorBrowser\Shaders\PostProcessing\Toon");
            this.toonShader.Parameters["Thickness"].SetValue(Thickness);
            this.toonShader.Parameters["Threshold"].SetValue(Threshold);
            this.toonShader.Parameters["ScreenSize"].SetValue(screenSize);
        }

        #endregion

        #region Render

        public Texture2D RenderToFX(Texture2D Input)
        {
            this.renderTarget.Begin();
            {
                Persian.GDevice.Textures[0] = Input;
                this.toonShader.CurrentTechnique.Passes[0].Apply();
                {
                    Persian.Quad.Draw(-Vector2.One, Vector2.One);
                }
                this.renderTarget.End();
            }
            return this.renderTarget.Texture2D;
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (!disposing || isDisposed) return;

            SystemMemory.SafeDispose(toonShader);
            SystemMemory.SafeDispose(renderTarget);

            base.Dispose(disposing);
        }

        #endregion
    }
}
