/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : PostProcessor.cs
 * File Description : The post processor
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/9/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using PersianCore.Graphics.Lights;
using System;

namespace PersianCore.Graphics.PostProcessing
{
    [Flags]
    public enum PostProcessType
    {
         /// <summary>
        /// Apply GodRay
        /// </summary>
        GODRAY = (1 << 0),

        /// <summary>
        /// Apply Bloom
        /// </summary>
        BLOOM = (1 << 1),

        /// <summary>
        /// Apply Guassian Blur
        /// </summary>
        GAUSSIAN_BLUR = (1 << 2),

        /// <summary>
        /// Apply Radial Blur
        /// </summary>
        RADIAL_BLUR = (1 << 3),

        /// <summary>
        /// Apply Blackwhite
        /// </summary>
        BLACKWHITE = (1 << 4),

        /// <summary>
        /// Apply Negative
        /// </summary>
        NEGATIVE = (1 << 5),

        /// <summary>
        /// Apply GLOW
        /// </summary>
        GLOW = (1 << 6),

        /// <summary>
        /// Apply Toon
        /// </summary>
        TOON = (1 << 7),
    }

    public class PostProcessor : Node
    {
        #region Fields & Properties

        public bool Enable { get; set; }
        public static PostProcessType PostType { get; set; }
        ContentManager content;
        RenderTarget2D postTarget;
        GodRay godRay;
        public GodRay GodRay 
        { 
            get
            {
                return this.godRay;
            }
        }

        Toon toon;
        public Toon Toon
        {
            get
            {
                return this.toon;
            }
        }

        Glow glow;
        public Glow Glow
        {
            get
            {
                return this.glow;
            }
        }

        Bloom bloom;
        public Bloom Bloom
        {
            get
            {
                return this.bloom;
            }
        }

        GaussianBlur gaussianBlur;
        public GaussianBlur GaussianBlur
        {
            get
            {
                return this.gaussianBlur;
            }
        }

        RadialBlur radialBlur;
        public RadialBlur RadialBlur
        {
            get
            {
                return this.radialBlur;
            }
        }

        #endregion

        #region Constructor/Destructor

        public PostProcessor()
        {
            this.Enable = false;
        }

        ~PostProcessor()
        {
        }

        #endregion

        #region Events

        public override void OnPreparingDevice(PreparingDeviceSettingsEventArgs e)
        {
            if (this.godRay != null)
            {
                this.godRay.OnPreparingDevice(e);
            }
            base.OnPreparingDevice(e);
        }

        #endregion

        #region Methods

        public void Load(ContentManager Content)
        {
            this.content = Content;

            var multiSampleCount = CoreShared.SupportedGraphics.multiSampleCount;
            var width = Persian.GDevice.PresentationParameters.BackBufferWidth;
            var height = Persian.GDevice.PresentationParameters.BackBufferHeight;
            this.postTarget = new RenderTarget2D(
                Persian.GDevice,
                width,
                height,
                false,
                SurfaceFormat.Color,
                DepthFormat.None,
                multiSampleCount,
                RenderTargetUsage.DiscardContents);
        }

        public void AddFlags(params PostProcessType[] flags)
        {
            for (int i = 0; i < flags.Length; i++)
            {
                PostType |= flags[i];
                switch (flags[i])
                {
                    case PostProcessType.GODRAY:
                        if (this.godRay == null)
                        {
                            this.godRay = new GodRay();
                            this.godRay.Load(this.content);
                        }
                        break;
                    case PostProcessType.TOON:
                        if (this.toon == null)
                        {
                            this.toon = new Toon();
                            this.toon.Load(this.content);
                        }
                        break;
                    case PostProcessType.GLOW:
                        if (this.glow == null)
                        {
                            this.glow = new Glow();
                            this.glow.Load(this.content);
                        }
                        break;
                    case PostProcessType.BLOOM:
                        if (this.bloom == null)
                        {
                            this.bloom = new Bloom();
                            this.bloom.Load(this.content);
                        }
                        break;
                    case PostProcessType.GAUSSIAN_BLUR:
                        if (this.gaussianBlur == null)
                        {
                            this.gaussianBlur = new GaussianBlur();
                            this.gaussianBlur.Load(this.content);
                        }
                        break;
                    case PostProcessType.RADIAL_BLUR:
                        if (this.radialBlur == null)
                        {
                            this.radialBlur = new RadialBlur();
                            this.radialBlur.Load(this.content);
                        }
                        break;
                    case PostProcessType.BLACKWHITE:
                    case PostProcessType.NEGATIVE:
                        //if (this.negative == null)
                        //{
                        //    this.negative = new Negative();
                        //    this.negative.Load(this.PostToScreenTrans);
                        //}
                        break;
                }
            }
        }

        /// <summary>
        /// Clear all flags
        /// </summary>
        /// <param name="DisposeAll">After clearing dispose them or not?</param>
        public void ClearFlags(bool DisposeAll)
        {
            if (DisposeAll)
            {
                RemoveFlags(PostProcessType.GODRAY, true);
                RemoveFlags(PostProcessType.BLOOM, true);
                RemoveFlags(PostProcessType.GLOW, true);
                RemoveFlags(PostProcessType.GAUSSIAN_BLUR, true);
                RemoveFlags(PostProcessType.RADIAL_BLUR, true);
                RemoveFlags(PostProcessType.BLACKWHITE, true);
                RemoveFlags(PostProcessType.NEGATIVE, true);
                RemoveFlags(PostProcessType.TOON, true);
            }
        }

        /// <summary>
        /// On Removing Flag, Resource is automatically disposed
        /// </summary>
        /// <param name="flag"></param>
        /// <param name="DisposeIt"></param>
        public void RemoveFlags(PostProcessType type, bool DisposeIt)
        {
            PostType &= ~type;
            if (PostType == 0) this.Enable = false; 
            if (DisposeIt)
            {
                switch (type)
                {
                    case PostProcessType.GODRAY:
                        SystemMemory.SafeDispose(this.godRay);
                        break;
                    case PostProcessType.TOON:
                        SystemMemory.SafeDispose(this.toon);
                        break;
                    case PostProcessType.GAUSSIAN_BLUR:
                        SystemMemory.SafeDispose(this.gaussianBlur);
                        break;
                    case PostProcessType.RADIAL_BLUR:
                        SystemMemory.SafeDispose(this.radialBlur);
                        break;
                    case PostProcessType.GLOW:
                        SystemMemory.SafeDispose(this.glow);
                        break;
                    case PostProcessType.BLOOM:
                        SystemMemory.SafeDispose(this.bloom);
                        break;
                }
            }
        }

        #endregion

        #region Render

        internal Texture2D Render(Lights.PrepassTechnique.LBuffers lBuffers, RenderTarget2D halfDepth)
        {
            var Result = lBuffers.resultTexture as Texture2D;
            bool needPointSample = true;
            SamplerState samplerState = SamplerState.LinearClamp; 
            if (PostType.HasFlag(PostProcessType.GODRAY))
            {
                if (LightManager.MainDirLight != null)
                {
                    Result = this.godRay.RenderPostFx(LightManager.MainDirLight, Result, lBuffers, halfDepth);
                    needPointSample = false;    
                }
            }
            if (needPointSample)
            {
                samplerState = SamplerState.PointClamp;
            }

            if (PostType.HasFlag(PostProcessType.TOON))
            {
                Result = this.toon.RenderToFX(Result);
            }
            if (PostType.HasFlag(PostProcessType.GAUSSIAN_BLUR))
            {
                Result = this.gaussianBlur.RenderToFX(Result);
            }
            if (PostType.HasFlag(PostProcessType.RADIAL_BLUR))
            {
                Result = this.radialBlur.RenderToFX(Result);
            }
            if (PostType.HasFlag(PostProcessType.GLOW))
            {
                Result = this.glow.RenderToFX(lBuffers, Result, samplerState);
            }
            if (PostType.HasFlag(PostProcessType.BLOOM))
            {
                Result = this.bloom.RenderToFX(Result);
            }

            return Result;
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (!disposing || isDisposed) return;
            ClearFlags(true);
            base.Dispose(disposing);
        }

        #endregion
    }
}
