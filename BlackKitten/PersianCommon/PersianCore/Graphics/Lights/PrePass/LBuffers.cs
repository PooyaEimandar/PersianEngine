/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : LBuffers.cs
 * File Description : The light buffers
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/9/2013
 * Comment          : 
 */
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Graphics.Lights.PrepassTechnique
{
    public class LBuffers : Node
    {
        #region Fields & Properties

        public RenderTargetBinding[] lightAccumBinding;
        public RenderTargetBinding[] NormalDepthGlowBinding;
        public RenderTarget2D halfBuffer0;
        public RenderTarget2D halfBuffer1;
        public RenderTarget2D depthBuffer;
        public RenderTarget2D normalBuffer;
        public RenderTarget2D glowBuffer;
        public RenderTarget2D downSampleDepthBuffer;
        public RenderTarget2D lightBuffer;
        public RenderTarget2D lightSpecularMap;
        public RenderTarget2D resultTexture;
        public RenderTarget2D quarterBuffer0;
        public RenderTarget2D quarterBuffer1;
   
        #endregion

        #region Constructor/Destructor

        public LBuffers()
        {
            var multiSampleCount = CoreShared.SupportedGraphics.multiSampleCount;
            var width = Persian.GDevice.PresentationParameters.BackBufferWidth;
            var height = Persian.GDevice.PresentationParameters.BackBufferHeight;
            
            var widthOver2 = width / 2;
            var heightOver2 = height / 2;

            var widthOver4 = width / 4;
            var heightOver4 = height / 4;

            this.depthBuffer = new RenderTarget2D(
                Persian.GDevice,
                width,
                height,
                false,
                SurfaceFormat.Single,
                DepthFormat.None,
                0,
                RenderTargetUsage.DiscardContents);

            //the down sampled depth buffer must have the same format as the main one
            this.downSampleDepthBuffer = new RenderTarget2D(
                Persian.GDevice,
                widthOver2,
                heightOver2,
                false,
                SurfaceFormat.Single,
                DepthFormat.None,
                0,
                RenderTargetUsage.DiscardContents);


            //Our normal buffer stores encoded view-space normal into RG (10bit each) and the specular power in B.
            //Some engines encode the specular power with some log or ln functions. We will output 
            //only the normal texture's alpha channel multiplied by a const value (100),
            //so we have specular power in the range [1..100].
            //Currently, A is not used (2bit).
            this.normalBuffer = new RenderTarget2D(
                Persian.GDevice,
                width,
                height,
                false,
                SurfaceFormat.Rgba1010102,
                DepthFormat.Depth24Stencil8,
                0,
                RenderTargetUsage.DiscardContents);

            //Our glow buffer stores Glow in rgb
            this.glowBuffer = new RenderTarget2D(
                Persian.GDevice,
                width,
                height,
                false,
                SurfaceFormat.Color,
                DepthFormat.Depth24Stencil8,
                0,
                RenderTargetUsage.DiscardContents);

            //This buffer stores all the "pure" lighting on the scene, no albedo applied to it. We use an floating
            //point format to allow us "overbright" some areas. Read the blog for more information. We use a depth buffer
            //to optimize light rendering.
            this.lightBuffer = new RenderTarget2D(
                Persian.GDevice,
                width,
                height,
                false,
                SurfaceFormat.Color,
                DepthFormat.Depth24Stencil8,
                0,
                RenderTargetUsage.DiscardContents);

            //we need a separate texture for the specular, since the xbox doesnt allow a RGBA64 buffer
            this.lightSpecularMap = new RenderTarget2D(
                Persian.GDevice,
                width,
                height,
                false,
                SurfaceFormat.Color,
                DepthFormat.None,
                0,
                RenderTargetUsage.DiscardContents);

            //We need another depth here because we need to render all objects again, to reconstruct their shading 
            //using our light texture.
            this.resultTexture = new RenderTarget2D(
                Persian.GDevice,
                width,
                height,
                false,
                SurfaceFormat.Color,
                DepthFormat.Depth24Stencil8,
                multiSampleCount,
                RenderTargetUsage.DiscardContents);

            const int halfRes = 2;
            this.halfBuffer0 = new RenderTarget2D(
                Persian.GDevice, width / halfRes,
                height / halfRes,
                false,
                SurfaceFormat.Color,
                DepthFormat.None,
                0,
                RenderTargetUsage.DiscardContents);

            this.halfBuffer1 = new RenderTarget2D(
                Persian.GDevice,
                width / halfRes,
                height / halfRes,
                false,
                SurfaceFormat.Color,
                DepthFormat.None,
                0,
                RenderTargetUsage.DiscardContents);

            this.quarterBuffer0 = new RenderTarget2D(
                Persian.GDevice,
                widthOver4,
                heightOver4,
                false,
                SurfaceFormat.Color,
                DepthFormat.None,
                0,
                RenderTargetUsage.DiscardContents);

            this.quarterBuffer1 = new RenderTarget2D(
                Persian.GDevice,
                widthOver4,
                heightOver4,
                false,
                SurfaceFormat.Color,
                DepthFormat.None,
                0,
                RenderTargetUsage.DiscardContents);

            this.NormalDepthGlowBinding = new RenderTargetBinding[3]
            {
                new RenderTargetBinding(normalBuffer),
                new RenderTargetBinding(depthBuffer),
                new RenderTargetBinding(glowBuffer),
            };

            this.lightAccumBinding = new RenderTargetBinding[2]
            {
                new RenderTargetBinding(lightBuffer),
                new RenderTargetBinding(lightSpecularMap),
            };
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (!disposing && isDisposed) return;

            SystemMemory.SafeDispose(this.lightAccumBinding);
            SystemMemory.SafeDispose(this.NormalDepthGlowBinding);
            SystemMemory.SafeDispose(this.halfBuffer0);
            SystemMemory.SafeDispose(this.halfBuffer1);
            SystemMemory.SafeDispose(this.depthBuffer);
            SystemMemory.SafeDispose(this.downSampleDepthBuffer);
            SystemMemory.SafeDispose(this.normalBuffer);
            SystemMemory.SafeDispose(this.lightBuffer);
            SystemMemory.SafeDispose(this.lightSpecularMap);
            SystemMemory.SafeDispose(this.resultTexture);
            SystemMemory.SafeDispose(this.quarterBuffer0);
            SystemMemory.SafeDispose(this.quarterBuffer1);
            SystemMemory.SafeDispose(this.glowBuffer);

            base.Dispose(disposing);
        }

        #endregion
    }
}
