/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : DownSampling.cs
 * File Description : The down sampling
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/9/2013
 * Comment          : 
 */
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Graphics.Lights.PrepassTechnique
{
    public class DownSampling : Node
    {
        #region Fields & Properties

        Effect effect;
        EffectParameter pixelSizeParam;
        EffectParameter depthBufferParam;
        EffectParameter halfPixelParam;
        public bool isDownSampleThisFrame { get; set; }

        #endregion

        #region Constructor/Destructor

        public DownSampling()
        { 
        }

        ~DownSampling()
        {
        }

        #endregion

        #region Load

        public void Load(ContentManager Content, RenderTarget2D DepthMap)
        {
            #region Bind Params

            this.effect = Content.Load<Effect>(
                string.Format(@"{0}Shaders\PrePassRendering\DownsampleDepth", CoreShared.PrePathContent));
            this.pixelSizeParam = effect.Parameters["PixelSize"];
            this.depthBufferParam = effect.Parameters["DepthBuffer"];
            this.halfPixelParam = effect.Parameters["HalfPixel"];

            #endregion

            Vector2 pixelSize = new Vector2(1.0f / (float)DepthMap.Width, 1.0f / (float)DepthMap.Height);
            pixelSizeParam.SetValue(pixelSize);
            halfPixelParam.SetValue(pixelSize * 0.5f);
            depthBufferParam.SetValue(DepthMap);
        }
        
        #endregion

        #region Draw

        public void Draw(RenderTarget2D downSampleDepthBuffer)
        {
            var GDevice = Persian.GDevice;

            GDevice.SetRenderTarget(downSampleDepthBuffer);
            {
                GDevice.BlendState = BlendState.Opaque;
                GDevice.DepthStencilState = DepthStencilState.None;
                effect.CurrentTechnique.Passes[0].Apply();
                {
                    Persian.Quad.Draw();
                }
                this.isDownSampleThisFrame = true;
            }
        }

        public void RenderEffect(RenderTarget2D HalfDepth)
        {
            var GDevice = Persian.GDevice;

            var half0 = HalfDepth;
            //render to a half-res buffer
            GDevice.SetRenderTarget(half0);

            this.effect.CurrentTechnique.Passes[0].Apply();
            {
                GDevice.BlendState = BlendState.Opaque;
                GDevice.DepthStencilState = DepthStencilState.None;
            }
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            SystemMemory.SafeDispose(this.pixelSizeParam);
            SystemMemory.SafeDispose(this.depthBufferParam);
            SystemMemory.SafeDispose(this.halfPixelParam);
            SystemMemory.SafeDispose(this.effect);
            base.Dispose(disposing);
        }

        #endregion
    }
}
