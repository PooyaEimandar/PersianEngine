/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : GBuffer.cs
 * File Description : The geometry buffers
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 8/9/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;

namespace PersianCore.Graphics.Lights.PrepassTechnique
{
    internal class GBuffer : Node
    {
        #region Fields & Properties

        Effect effect;

        #endregion

        #region Constructor/Destructor

        #endregion

        #region Load

        public void Load(ContentManager Content)
        {
            this.effect = Content.Load<Effect>(
                string.Format(@"{0}{1}ClrGBuffer",
                CoreShared.PrePathContent, @"Shaders\PrePassRendering\"));
        }

        #endregion

        #region Methods

        /// <summary>
        /// Clear GBuffer
        /// </summary>
        /// <param name="GDevice"></param>
        /// <param name="quadRenderer"></param>
        /// <param name="NormalDepthGlowBinding"></param>
        public void Draw(RenderTargetBinding[] NormalDepthGlowBinding)
        {
            var GDevice = Persian.GDevice;

            GDevice.SetRenderTargets(NormalDepthGlowBinding);
            {
                GDevice.Clear(ClearOptions.DepthBuffer | ClearOptions.Stencil, Color.Black, 1.0f, 0);
                GDevice.BlendState = BlendState.Opaque;
                GDevice.DepthStencilState = DepthStencilState.None;
                GDevice.RasterizerState = RasterizerState.CullNone;
                this.effect.CurrentTechnique.Passes[0].Apply();
                {
                    Persian.Quad.Draw();
                }
                GDevice.DepthStencilState = DepthStencilState.Default;
                GDevice.RasterizerState = RasterizerState.CullCounterClockwise;
            }
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            SystemMemory.SafeDispose(this.effect);
            base.Dispose(disposing);
        }

        #endregion
    }
}
