///*
// * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
// * 
// * File Name        : DeferredRendering.cs
// * File Description : The deferred shading
// * Generated by     : Pooya Eimandar 
// * Last modified by : Pooya Eimandar on 11/9/2013
// * Comment          : 
// */

//using Microsoft.Xna.Framework;
//using Microsoft.Xna.Framework.Content;
//using Microsoft.Xna.Framework.Graphics;
//using PersianCore.Meshes;
//using System.Collections.Generic;

//namespace PersianCore.Graphics.Lights
//{
//    public class DeferredRendering
//    {
//        #region Fields & Properties

//        Effect clrGBufferFX;
//        Effect finalFX;
//        Effect depthFX;
//        RenderTargetBinding[] rtBinding;

//        public bool EnableShadows { get; set; }
//        public Texture2D Depth
//        {
//            get
//            {
//                return this.rtBinding[0].RenderTarget as Texture2D;
//            }
//        }
//        public Texture2D Albedo
//        {
//            get
//            {
//                return this.rtBinding[1].RenderTarget as Texture2D;
//            }
//        }
//        public Texture2D Normal
//        {
//            get
//            {
//                return this.rtBinding[2].RenderTarget as Texture2D;
//            }
//        }

//        #endregion

//        #region Constructor/Destructor

//        public DeferredRendering()
//        {
//        }

//        #endregion

//        #region Load

//        public void Load(ContentManager Content)
//        {
//            var GDevice = Persian.GDevice;

//            var width = GDevice.PresentationParameters.BackBufferWidth;
//            var height = GDevice.PresentationParameters.BackBufferHeight;

//            this.rtBinding = new RenderTargetBinding[3]
//            {
//                // Depth : 24-bit depth and 8-bit stencil
//                new RenderTarget2D(GDevice, width, height, false, SurfaceFormat.Rg32, DepthFormat.Depth24Stencil8, 0, RenderTargetUsage.DiscardContents),

//                //Albedo : RGB for the Color and A for the Specular Intensity
//                new RenderTarget2D(GDevice, width, height, false, SurfaceFormat.Color, DepthFormat.Depth24, 0, RenderTargetUsage.DiscardContents),

//                //Normal : RGB for Normal and A for Specular Power
//                new RenderTarget2D(GDevice, width, height, false, SurfaceFormat.Rgba1010102, DepthFormat.None, 0, RenderTargetUsage.DiscardContents)
//            };

//            LoadLightManager(Content, width, height);
//            LoadShaders(Content);
//        }

//        private void LoadLightManager(ContentManager Content, int width, int height)
//        {
//            var path = @"EditorBrowser\Textures\Light";
//            var spotAttenuationTexture = Content.Load<Texture2D>(string.Format(@"{0}\SpotCookie", path));
//            var squareCookie = Content.Load<Texture2D>(string.Format(@"{0}\SquareCookie", path));

 

//            //this.lightManager.AddLight(new PointLight(
//            //    new Vector3(80, 5.0f, -30),
//            //    100.0f,
//            //    Color.Blue,
//            //    1.0f,
//            //    true,
//            //    2048));

//            //this.lightManager.AddLight(new SpotLight(
//            //    new Vector3(80, 30.0f, -30),
//            //    new Vector3(0, -1, 0),
//            //    Color.Red,
//            //    3.0f,
//            //    true,
//            //    2048,
//            //    spotAttenuationTexture));
//        }

//        private void LoadShaders(ContentManager Content)
//        {
//            var path = @"EditorBrowser\Shaders\DeferredRendering";

//            this.depthFX = Content.Load<Effect>(@"EditorBrowser\Shaders\DepthBufferFX");
//            this.clrGBufferFX = Content.Load<Effect>(string.Format(@"{0}\ClrGBufferFX", path));
//            this.finalFX = Content.Load<Effect>(string.Format(@"{0}\FinalFX", path));
//        }

//        #endregion

//        #region Events

//        internal void OnPreparingDevice(PreparingDeviceSettingsEventArgs e)
//        {

//        }

//        #endregion

//        #region Draw

//        public void Draw(SpriteBatch spriteBatch, ObjectsManager objectsManager,
//            Vector3[] currentFrustumCorners, LightManager lightManager, Texture2D shadowOcclusion, 
//            ref RenderTarget renderTarget)
//        {
//            var GDevice = Persian.GDevice;

//            lightManager.DrawShadowMaps(objectsManager.Meshes, this.depthFX);

//            GDevice.BlendState = BlendState.Opaque;
//            GDevice.DepthStencilState = DepthStencilState.Default;
//            GDevice.RasterizerState = RasterizerState.CullCounterClockwise;

//            //Clear GBuffer and pack all data in to it 
//            GDevice.SetRenderTargets(this.rtBinding);
//            {
//                ClearGBuffer();
//                PackGBuffer(objectsManager.Meshes);
//                GDevice.SetRenderTargets(null);
//            }

//            //DrawDepth(models);
//            //shadowOcclusion = shadowRenderer.Render(depthTexture, lightManager.DirectionalLights[0], models);

//            //Draw lights to light buffer
//            lightManager.DrawToLightBuffer(this.rtBinding, currentFrustumCorners);

//            FinalComposition(lightManager, shadowOcclusion, ref renderTarget);
//        }

//        private void ClearGBuffer()
//        {
//            Persian.GDevice.DepthStencilState = DepthStencilState.DepthRead;

//            this.clrGBufferFX.CurrentTechnique.Passes[0].Apply();
//            {
//                Persian.Quad.Draw();
//            }
//        }

//        private void PackGBuffer(List<Mesh> meshes)
//        {
//            var GDevice = Persian.GDevice;

//            GDevice.DepthStencilState = DepthStencilState.Default;

//            GDevice.Clear(Color.CornflowerBlue);

//            foreach (var mesh in meshes)
//            {
//                mesh.DrawToGBuffer();
//            }
//        }

//        private void FinalComposition(LightManager lightManager, Texture2D shadowOcclusion, ref RenderTarget renderTarget)
//        {
//            renderTarget.Begin();
//            {
//                this.finalFX.Parameters["AlbedoBuffer"].SetValue(this.Albedo);
//                this.finalFX.Parameters["LightBuffer"].SetValue(lightManager.LightBuffer);
//                this.finalFX.Parameters["HalfScreenSize"].SetValue(Persian.HalfScreenSize);
//                this.finalFX.Parameters["ShadowMap"].SetValue(shadowOcclusion);
//                this.finalFX.Techniques[0].Passes[0].Apply();
//                {
//                    Persian.Quad.Draw();
//                }
//                renderTarget.End();
//            }
//        }

//        internal void ShowDebug(SpriteBatch spriteBatch, Texture2D LightBuffer)
//        {
//            var smallWidth = Persian.GDevice.Viewport.Width / 5;
//            var smallHeigth = Persian.GDevice.Viewport.Height / 3;

//            //Show depth
//            spriteBatch.Draw(
//                this.Depth,
//                new Rectangle(0, 0, smallWidth, smallHeigth),
//                Color.White);

//            //Show albedo
//            spriteBatch.Draw(
//                this.Albedo as Texture2D,
//                new Rectangle(smallWidth, 0, smallWidth, smallHeigth),
//                Color.White);

//            //Show Normal
//            spriteBatch.Draw(
//                this.Normal as Texture2D,
//                new Rectangle(smallWidth * 2, 0, smallWidth, smallHeigth),
//                Color.White);

//            //Show light buffer
//            spriteBatch.Draw(
//                LightBuffer,
//                new Rectangle(smallWidth * 3, 0, smallWidth, smallHeigth),
//                Color.White);

//            //Show first shadow cascaded
//            spriteBatch.Draw(
//                LightBuffer,
//                new Rectangle(smallWidth * 3, 0, smallWidth, smallHeigth),
//                Color.White);
//        }

//        #endregion

//        #region Dispose

//        public void Dispose()
//        {
//            SystemMemory.SafeDispose(depthFX);
//        }

//        #endregion
//    }
//}
