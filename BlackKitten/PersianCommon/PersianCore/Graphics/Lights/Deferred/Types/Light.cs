/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : Light.cs
 * File Description : The base light
 * Generated by     : Pooya Eimandar 
 * Last modified by : Pooya Eimandar on 11/8/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework;
using System;
using System.ComponentModel;

namespace PersianCore.Graphics.Lights.Deferred
{
    public enum LightType { Directional, Point, Spot };

    public class Light
    {
        #region Fields & Properties

        public static float DepthBias = 0.005f;
        protected const short MaxShadowResolution = 2048;

        protected Guid id;

        /// <summary>
        /// Get the guid of light
        /// </summary>
        [DoNotSave]
        public Guid ID
        {
            get
            {
                return this.id;
            }
        }

        [DoNotSave]
        public int Priority {get; set;}

        public string Name {get; set;}

        public bool Enable {get; set;}

        protected LightType lightType;
        /// <summary>
        /// Get the type of the light
        /// </summary>
        public LightType LightType
        {
            get
            {
                return this.lightType;
            }
        }

        protected Vector3 position;

        /// <summary>
        /// Position of the light
        /// </summary>
        public Vector3 Position
        {
            get
            {
                return this.position;
            }
            set
            {
                if (this.position != value)
                {
                    this.position = value;
                    //Update position of the light
                    this.World.Translation = this.position;
                }
            }
        }

        protected Vector3 rotation;
        /// <summary>
        /// Rotation of the light
        /// </summary>
        public Vector3 Rotation
        {
            get
            {
                return this.rotation;
            }
            set
            {
                if (this.rotation != value)
                {
                    this.rotation = value;
                    //Update position and rotation of the light
                    this.World = this.rotation.ToRotationMatrix();
                    this.World.Translation = this.position;
                }
            }
        }

        /// <summary>
        /// Color of the spot light
        /// </summary>
        public Vector4 Color { get; set; }

        /// <summary>
        /// Intensity of the spot light
        /// </summary>
        public float Intensity { get; set; }

        public bool EnableShadow { get; set; }
        
        public float ShadowDistance { get; set; }

        protected short shadowMapResoloution;
        public short ShadowMapResoloution
        {
            get
            {
                return this.shadowMapResoloution;
            }
            set
            {
                this.shadowMapResoloution = value <= MaxShadowResolution ? value : MaxShadowResolution;
            }
        }

        [DoNotSave]
        [Browsable(false)]
        public Shadow.CascadeShadowMapEntry cascadeShadowMap { get; set; }

        public Matrix World;

        [DoNotSave]
        [Browsable(false)]
        public float DistanceFromCamera { get; set; }

        protected float radius;
        public float Radius
        {
            get
            {
                return radius;
            }
            set
            {
                //if (this.lightType == Lights.LightType.Spot)
                //{
                //    this.radius = value;
                //    //this.boundingSphere.Radius = radius;
                //    //if (this.type == LightType.Spot)
                //    //{
                //    //    UpdateSpotValues();
                //    //}
                //}
            }
        }

        public Matrix ViewProjection;

        #endregion

        #region Constructor/Destructor

        public Light()
        {
            this.id = Guid.NewGuid();
            this.Name = "Simple Light";
            this.Enable = true;
            this.ShadowDistance = 70;
            this.EnableShadow = true;
            this.World = Matrix.Identity;
            this.ViewProjection = Matrix.Identity;
        }

        #endregion
    }
}
