/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : EnvironmentManager.cs
 * File Description : The class responsible to manage all environment's elements
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 7/19/2013
 * Comment          : 
 */

namespace PersianCore.Graphics
{
    using Environment;
    using PersianCore.Environment;
    using PersianSettings;
    using System.Collections.Generic;

    public class EnvironmentManager : Node
    {
        #region Fields

        Sky sky;
        public Sky Sky
        {
            get
            {
                return this.sky;
            }
            set
            {
                this.sky = value;
            }
        }

        List<Weather> weathers;
        public List<Weather> Weathers
        {
            get 
            {
                return this.weathers;
            }
        }
        //List<Fire> Fires;

        #endregion

        #region Constructor/Destructor

        public EnvironmentManager()
        {
            this.weathers = new List<Weather>();
            //this.Fires = new List<Fire>();
        }

        #endregion

        #region Load

        public void LoadSky(PersianSettings.SkySet setting)
        {
            if (this.sky == null)
            {
                this.sky = new Sky()
                {
                    UseSameTexture = setting.UseSameTexture,
                    AllowRotate = setting.AllowRotate,
                    TextureName = setting.TextureName,
                    CloudsName = setting.CloudsName,
                    SunVector = setting.SunVector,
                    TexCoordScale = setting.TexCoordScale,
                };
                this.sky.Load(null);
            }
            else
            {
                var forceToLoadTexture = this.sky.TextureName == setting.TextureName ? false : true;
                var forceToLoadCloud = this.sky.CloudsName == setting.CloudsName ? false : true;

                this.sky.UseSameTexture = setting.UseSameTexture;
                this.sky.AllowRotate = setting.AllowRotate;
                this.sky.TextureName = setting.TextureName;
                this.sky.CloudsName = setting.CloudsName;
                this.sky.SunVector = setting.SunVector;
                this.sky.Initialize(forceToLoadTexture, forceToLoadCloud);
            }
        }

        public void LoadWeather(WeatherSet setting)
        {
            var _weather = new Weather(setting);
            _weather.Load();
            this.weathers.Add(_weather);
        }

        //public void CreateFire(Settings.EnvSetting setting)
        //{
        //Fire fire = new Fire(setting);
        //fire.Load();
        //Fires.Add(fire);
        //}

        #endregion

        #region Methods

        /// <summary>
        /// Enable the weather
        /// </summary>
        /// <param name="index">index of cube area</param>
        /// <param name="value">value for enable</param>
        /// <returns>HResult, true means successfully done</returns>
        public bool EnableWeather(int index, bool value)
        {
            if (this.weathers.Count > index)
            {
                this.weathers[index].Enable = value;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Set the progress for the weather
        /// </summary>
        /// <param name="index">index of cube area</param>
        /// <param name="value">value for progress</param>
        /// <returns>HResult, true means successfully done</returns>
        public bool SetProgress(int index, float value)
        {
            if (this.weathers.Count > index)
            {
                this.weathers[index].Progress = value;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Set the enable for the weather
        /// </summary>
        /// <param name="index">index of cube area</param>
        /// <param name="value">value for enable</param>
        /// <returns>HResult, true means successfully done</returns>
        public bool SetEnable(bool value, int index)
        {
            if (this.weathers.Count > index)
            {
                this.weathers[index].Enable = value;
                return true;
            }
            return false;
        }


        public void DisableAll()
        {
            foreach (var item in this.weathers)
            {
                item.Enable = false;
            }
        }

        internal void RemoveAll()
        {
            foreach (var iter in this.weathers)
            {
                SystemMemory.SafeDispose(iter);
            }
            this.weathers.Clear();
        }

        #endregion

        #region Update

        public void Update()
        {
            var time = (float)Persian.gameTime.TotalGameTime.TotalMilliseconds;

            this.sky.Update();
            foreach (var iter in this.weathers)
            {
                iter.Update(time);
            }
            //foreach (Fire iter in Fires)
            //{
            //    iter.Update(Time);
            //}
        }

        #endregion

        #region Draw
        
        public void DrawSky()
        {
            this.sky.Draw();
        }

        public void DrawParticles()
        {
            //foreach (var iter in Fires)
            //{
            //    iter.Draw(GDevice);
            //}
            foreach (var iter in weathers)
            {
                iter.Draw();
            }
        }

        #endregion

        #region Dispose

        protected override void Dispose(bool disposing)
        {
            if (!disposing || this.isDisposed) return;

            SystemMemory.SafeDispose(this.sky);
            RemoveAll();

            base.Dispose(disposing);
        }

        #endregion

    }
}
