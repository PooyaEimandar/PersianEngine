/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : EffectsManager.cs
 * File Description : Cursor class
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 10/06/2013
 * Comment          : 
 */

using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using System;

public struct PrePassRenderingFX
{
    public Effect StaticMaterialFX;
    public Effect SkinnedMaterialFX;
    public Effect StaticAlphaMaterialFX;
    public Effect SkinnedAlphaMaterialFX;
    public Effect StaticEnvMaterialFX;
}

public struct DeferredRenderingFX
{
    public Effect StaticGBufferFX;
    public Effect SkinnedGBufferFX;
}

public static class ShadersManager
{
    #region Fields & Properties

    static Effect vPColor3EffectFX;

    /// <summary>
    /// Vertex Position Color 3 Effect
    /// </summary>
    public static Effect VPColor3EffectFX
    {
        get
        {
            return vPColor3EffectFX.Clone();
        }
    }

    #region Enviroment

    static Effect billboardFX;

    /// <summary>
    /// The billboard effect
    /// </summary>
    public static Effect BillboardFX
    {
        get
        {
            return billboardFX.Clone();
        }
    }

    #endregion

    #region PrePass

    static PrePassRenderingFX prePassFX;
    
    /// <summary>
    /// Static Material Effect
    /// </summary>
    public static Effect PStaticMaterialFX
    {
        get
        {
            return prePassFX.StaticMaterialFX.Clone();
        }
    }

    /// <summary>
    /// Skinned Material Effect
    /// </summary>
    public static Effect PSkinnedMaterialFX
    {
        get
        {
            return prePassFX.SkinnedMaterialFX.Clone();
        }
    }

    /// <summary>
    /// Alpha Static Material Effect
    /// </summary>
    public static Effect PStaticAlphaMaterialFX
    {
        get
        {
            return prePassFX.StaticAlphaMaterialFX.Clone();
        }
    }

    /// <summary>
    /// Alpha Skinned Material Effect
    /// </summary>
    public static Effect PSkinnedAlphaMaterialFX
    {
        get
        {
            return prePassFX.SkinnedAlphaMaterialFX.Clone();
        }
    }

    public static Effect StaticEnvMaterialFX
    {
        get
        {
            return prePassFX.StaticEnvMaterialFX.Clone();
        }
    }

    #endregion

    #region Deferred

    //static DeferredRenderingFX deferredRenderingFX;

    /// <summary>
    /// Static GBuffer effect for deferred shading
    /// </summary>
    //public static Effect DStaticGBufferFX
    //{
    //    get
    //    {
    //        return deferredRenderingFX.StaticGBufferFX.Clone();
    //    }
    //}

    /// <summary>
    /// Skinned GBuffer effect for deferred shading
    /// </summary>
    //public static Effect DSkinnedGBufferFX
    //{
    //    get
    //    {
    //        return deferredRenderingFX.SkinnedGBufferFX.Clone();
    //    }
    //}

    #endregion

    #endregion

    #region Constructor/Destructor

    static ShadersManager()
    {
    }

    #endregion

    #region Load

    public static bool Load(ContentManager editorContent)
    {
#if DEBUG
        var path = @"Shaders\Base\VertexPositionColor3";
        if (Persian.RunningEngine)
        {
            vPColor3EffectFX = editorContent.Load<Effect>(path);
        }
        else
        {
            vPColor3EffectFX = editorContent.Load<Effect>(@"EditorBrowser\" + path);
        }
#endif

        if (!LoadPrePass(@"Shaders\PrePassRendering\")) return false;
        if (!LoadEnvironment()) return false;

        //if (!LoadDeferred(@"Shaders\DeferredRendering\")) return false;

        return true;
    }

    private static bool LoadPrePass(string path)
    {
        bool HR = true;

        try
        {
            prePassFX = new PrePassRenderingFX();
            prePassFX.StaticMaterialFX = Persian.EngineContent.Load<Effect>(string.Format(@"{0}StaticMaterialFX", path));
            prePassFX.StaticAlphaMaterialFX = Persian.EngineContent.Load<Effect>(string.Format(@"{0}StaticAlphaMaterialFX", path));
            prePassFX.StaticEnvMaterialFX = Persian.EngineContent.Load<Effect>(string.Format(@"{0}StaticEnvMaterialFX", path));

            prePassFX.SkinnedMaterialFX = Persian.EngineContent.Load<Effect>(string.Format(@"{0}SkinnedMaterialFX", path));
            prePassFX.SkinnedAlphaMaterialFX = Persian.EngineContent.Load<Effect>(string.Format(@"{0}SkinnedAlphaMaterialFX", path));
            prePassFX.SkinnedAlphaMaterialFX = Persian.EngineContent.Load<Effect>(string.Format(@"{0}SkinnedAlphaMaterialFX", path));
            
            //Set Shared parameters
            //Load ToonMap
            var toonMap = Persian.EngineContent.Load<Texture2D>(string.Format(@"Textures\Utilities\ToonMap", path));
            prePassFX.StaticMaterialFX.Parameters["ToonMap"].SetValue(toonMap);
            prePassFX.StaticAlphaMaterialFX.Parameters["ToonMap"].SetValue(toonMap);
            prePassFX.SkinnedMaterialFX.Parameters["ToonMap"].SetValue(toonMap);
            prePassFX.SkinnedAlphaMaterialFX.Parameters["ToonMap"].SetValue(toonMap);
        }
        catch (Exception ex)
        {
            HR = false;
            Logger.WriteError(string.Format("Could not load pre pass shaders : {0}", ex.ToStandardString()));
        }

        return HR;
    }

    private static bool LoadDeferred(string path)
    {
        bool HR = true;

        //try
        //{
        //    deferredRenderingFX = new DeferredRenderingFX();
        //    deferredRenderingFX.StaticGBufferFX = Persian.EngineContent.Load<Effect>(string.Format(@"{0}StaticGBufferFX", path));
        //    deferredRenderingFX.SkinnedGBufferFX = Persian.EngineContent.Load<Effect>(string.Format(@"{0}SkinnedGBufferFX", path));
        //}
        //catch (Exception ex)
        //{
        //    HR = false;
        //    Logger.WriteError(string.Format("Could not load deferred shaders : {0}", ex.ToStandardString()));
        //}

        return HR;
    }

    private static bool LoadEnvironment()
    {
        bool HR = true;

        try
        {
            billboardFX = Persian.EngineContent.Load<Effect>(@"Shaders\Environments\Billboard");
        }
        catch (Exception ex)
        {
            HR = false;
            Logger.WriteError(string.Format("Could not load enviroment shaders : {0}", ex.ToStandardString()));
        }

        return HR;
    }

    #endregion

    #region Dispose

    public static void Dispose()
    {
        SystemMemory.SafeDispose(vPColor3EffectFX);

        //Dispose prepass shaders
        SystemMemory.SafeDispose(prePassFX.StaticMaterialFX);
        SystemMemory.SafeDispose(prePassFX.SkinnedMaterialFX);
        SystemMemory.SafeDispose(prePassFX.SkinnedAlphaMaterialFX);
        SystemMemory.SafeDispose(prePassFX.StaticAlphaMaterialFX);
        SystemMemory.SafeDispose(prePassFX.StaticEnvMaterialFX);


        //Dispose environment
        SystemMemory.SafeDispose(billboardFX);
    }

    #endregion
}
