///*
// * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
// * 
// * File Name        : MenuWindow.cs
// * File Description : The window of menu
// * Generated by     : Pooya Eimandar
// * Last modified by : Pooya Eimandar on 7/24/2013
// * Comment          : 
// */
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using Microsoft.Xna.Framework.Graphics;
//using Microsoft.Xna.Framework.Input;
//using Microsoft.Xna.Framework;

//namespace PersianCore.Graphics.UI
//{
//    public enum WindowState { Starting, Active, Ending, Inactive }

//    public class MenuWindow
//    {
//        #region Fields & Properties

//        struct MenuItem
//        {
//            public string Text;
//            public MenuWindow Link;

//            public MenuItem(string text, MenuWindow link)
//            {
//                this.Text = text;
//                this.Link = link;
//            }
//        }

//        TimeSpan changeSpan;
//        WindowState windowState;
//        List<MenuItem> itemList;
//        int selectedItem;
//        double changeProgress;
//        SpriteFont spriteFont;
//        Texture2D backgroundImage;
//        QuadRenderer quadRenderer;
//        BasicEffect e;
        
//        string title;
//        public string Title
//        {
//            get
//            {
//                return this.title;
//            }
//            set
//            {
//                this.title = value;
//            }
//        }
//        Matrix world;

//        #endregion

//        #region Constructor/Destructor

//        public MenuWindow(string title, Texture2D backgroundImage, SpriteFont spriteFont)
//        {
//            this.itemList = new List<MenuItem>();
//            this.changeSpan = TimeSpan.FromMilliseconds(800);
//            this.selectedItem = 0;
//            this.changeProgress = 0;
//            this.windowState = WindowState.Inactive;
//            this.title = title;
//            this.spriteFont = spriteFont;
//            this.backgroundImage = backgroundImage;
//            this.quadRenderer = new QuadRenderer(true, Vector2.One, Vector3.Zero);
//            this.world = Matrix.Identity;
//            this.e = new BasicEffect(Persian.GDevice)
//            {
//                TextureEnabled = true,
//                LightingEnabled = true,
//                PreferPerPixelLighting = true,
//                AmbientLightColor = Color.White.ToVector3(),
//            };
//            this.e.DirectionalLight0.Enabled = true;
//            this.e.DirectionalLight0.DiffuseColor = Color.Yellow.ToVector3();
//            this.e.DirectionalLight0.Direction = new Vector3(1, -1, 1);
//        }

//        ~MenuWindow()
//        {
//        }

//        #endregion
        
//        #region Methods

//        public void AddMenuItem(string text, MenuWindow link)
//        {
//            itemList.Add(new MenuItem(text, link));
//        }

//        public void Start()
//        {
//            windowState = WindowState.Starting;
//        }

//        #endregion

//        #region Update

//        public void Update(Matrix world, double timePassedSinceLastFrame)
//        {
//            this.world = world;

//            if ((windowState == WindowState.Starting) || (windowState == WindowState.Ending))
//            {
//                changeProgress += timePassedSinceLastFrame / changeSpan.TotalMilliseconds;
//            }

//            if (changeProgress >= 1.0f)
//            {
//                changeProgress = 0.0f;
//                if (windowState == WindowState.Starting)
//                {
//                    windowState = WindowState.Active;
//                }
//                else if (windowState == WindowState.Ending)
//                {
//                    windowState = WindowState.Inactive;
//                }
//            }
//        }

//        public MenuWindow ProcessInput(KeyboardState lastKeybState, KeyboardState currentKeybState, GamePadState lastGamePadState, GamePadState currentGamePadState)
//        {
//            var gamePadConnected = InputManager.IsGamePadConnected();

//            if (InputManager.IsKeyPressed(Keys.Down) ||
//                (gamePadConnected && InputManager.IsGamePadKeyPressed(Buttons.DPadDown)))
//            {
//                selectedItem++;
//            }
//            else if (InputManager.IsKeyPressed(Keys.Up) ||
//                (gamePadConnected && InputManager.IsGamePadKeyPressed(Buttons.DPadUp)))
//            {
//                selectedItem--;
//            }

//            if (selectedItem < 0)
//            {
//                selectedItem = 0;
//            }
//            else if (selectedItem >= itemList.Count)
//            {
//                selectedItem = itemList.Count - 1;
//            }

//            if (InputManager.IsKeyPressed(Keys.Enter) ||
//                gamePadConnected && InputManager.IsGamePadKeyPressed(Buttons.A))
//            {
//                windowState = WindowState.Ending;
//                return itemList[selectedItem].Link;
//            }

//            if (InputManager.Last.keyState.IsKeyDown(Keys.Escape)) return null;

//            return this;
//        }

//        #endregion

//        public void Draw(SpriteBatch spriteBatch)
//        {
//            if (windowState == WindowState.Inactive) return;

//            float smoothedProgress = MathHelper.SmoothStep(0, 1, (float)changeProgress);

//            int verPosition = 300;
//            float horPosition = 300;
//            float alphaValue;
//            float bgLayerDepth;
//            Color bgColor;

//            switch (windowState)
//            {
//                case WindowState.Starting:
//                    horPosition -= 200 * (1.0f - (float)smoothedProgress);
//                    alphaValue = smoothedProgress;
//                    bgLayerDepth = 0.5f;
//                    bgColor = new Color(new Vector4(1, 1, 1, alphaValue));
//                    break;
//                case WindowState.Ending:
//                    horPosition += 200 * (float)smoothedProgress;
//                    alphaValue = 1.0f - smoothedProgress;
//                    bgLayerDepth = 1;
//                    bgColor = Color.White;
//                    break;
//                default:
//                    alphaValue = 1;
//                    bgLayerDepth = 1;
//                    bgColor = Color.White;
//                    break;
//            }

//            var titleColor = new Color(new Vector4(1, 1, 1, alphaValue));

//            //Draw background image
//            this.e.CurrentTechnique.Passes[0].Apply();
//            {
//                this.e.World = Matrix.Identity;// this.world;
//                this.e.Texture = backgroundImage;
//                this.e.DiffuseColor = bgColor.ToVector3();
//                this.e.Alpha = alphaValue;
//                this.quadRenderer.DrawQuad(GDevice, -Vector2.One, Vector2.One);
//            }

//            //Draw strings
//            spriteBatch.Begin();
//            {
//                spriteBatch.DrawString(spriteFont, this.title, new Vector2(horPosition, 200), titleColor, 0, Vector2.Zero, 1.5f, SpriteEffects.None, 0);
//                for (int itemID = 0; itemID < itemList.Count; itemID++)
//                {
//                    var itemPostition = new Vector2(horPosition, verPosition);
//                    var itemColor = Color.White;

//                    if (itemID == selectedItem)
//                    {
//                        itemColor = new Color(new Vector4(1, 0, 0, alphaValue));
//                    }
//                    else
//                    {
//                        itemColor = new Color(new Vector4(1, 1, 1, alphaValue));
//                    }
//                    spriteBatch.DrawString(spriteFont, itemList[itemID].Text, itemPostition, itemColor,
//                        0, Vector2.Zero, 1, SpriteEffects.None, 0);
//                    verPosition += 30;
//                }
//                spriteBatch.End();
//            }
//        }
//    }
//}
