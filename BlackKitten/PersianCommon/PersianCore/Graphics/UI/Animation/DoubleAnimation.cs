/*
 * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
 * 
 * File Name        : DoubleAnimation.cs
 * File Description : The animation for double
 * Generated by     : Pooya Eimandar
 * Last modified by : Pooya Eimandar on 7/27/2013
 * Comment          : 
 */
using System;
using Microsoft.Xna.Framework;

namespace PersianCore.Graphics.UI.Animation
{
    public enum AnimationState { NotStarted, Running, Finished };
    public class DoubleAnimation
    {
        #region Fields & Properties

        string name;
        float elapsedTimeMS;
        public bool enable;
        public float current;
        public float from;
        public float to;
        public TimeSpan duration;
        public string Name
        {
            get
            {
                return this.name;
            }
        }
        public AnimationState animationState { get; set; }        
        public event EventHandler OnFinished;

        #endregion

        #region Constructor/Destructor

        public DoubleAnimation()
            : this(0, 0, TimeSpan.Zero, "Storyboard")
        {
        }

        public DoubleAnimation(float from, float to, TimeSpan duration, string name)
        {
            this.enable = true;
            this.from = from;
            this.to = to;
            this.duration = duration;
            this.name = name;
        }

        #endregion

        #region Methods

        public void Reset()
        {
            current = from;
            this.elapsedTimeMS = 0;
        }

        #endregion

        #region Update

        public float Update()
        {
            if (!enable) return from;

            this.elapsedTimeMS += (float)Persian.gameTime.ElapsedGameTime.TotalMilliseconds;
            float amount = MathHelper.Clamp(this.elapsedTimeMS / (float)this.duration.TotalMilliseconds, 0, 1);
            this.current = MathHelper.Lerp(from, to, amount);

            if (this.elapsedTimeMS > this.duration.TotalMilliseconds)
            {
                if (OnFinished != null)
                {
                    OnFinished(this, new EventArgs());
                }
            }

            return current;
        }

        #endregion
    }
}
