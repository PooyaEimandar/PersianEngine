///*
// * Copyright (c) BaziPardaz.Co Ltd. All rights reserved.
// * 
// * File Name        : UIControl.cs
// * File Description : The user interface control
// * Generated by     : Pooya Eimandar
// * Last modified by : Pooya Eimandar on 7/29/2013
// * Comment          : 
// */
//using System;
//using System.Collections.Generic;
//using Microsoft.Xna.Framework;
//using Microsoft.Xna.Framework.Graphics;
//using PersianCore.Graphics.UI.Animation;

//namespace PersianCore.Graphics.UI.Components
//{
//    public enum UIPropertyPath { LeaveColor, EnterColor }

//    public class UIControl : QuadRenderer
//    {
//        #region Fields & Properties

//        Matrix world;
//        int order;
//        Color color;
//        BasicEffect basicEffect;
//        Storyboard storyboard;
//        string text;
//        RenderTarget2D textRenderTarget;
//        List<UIControl> userControls;

//        public bool Enable { get; set; }
//        public string Text { get; set; }
//        public SpriteFont Font { get; set; }
//        public Color FontColor { get; set; }
//        public Color Color
//        {
//            get
//            {
//                return this.color;
//            }
//            set
//            {
//                if (this.color != value)
//                {
//                    this.color = value;
//                    if (basicEffect != null)
//                    {
//                        this.basicEffect.DiffuseColor = value.ToVector3();
//                    }
//                }
//            }
//        }
//        public Texture2D texture
//        {
//            get
//            {
//                if (this.basicEffect != null)
//                {
//                    return this.basicEffect.Texture;
//                }
//                return null; 
//            }
//            set
//            {
//                if (this.basicEffect != null)
//                {
//                    if (this.basicEffect.Texture != value)
//                    {
//                        this.basicEffect.TextureEnabled = value == null ? false : true;
//                    }
//                    this.basicEffect.Texture = value;
//                }
//            }
//        }
//        //public Color OnEnterColor
//        //{
//        //    get
//        //    {
//        //        return this.onEnterColor;
//        //    }
//        //    set
//        //    {
//        //        if (this.onEnterColor != value)
//        //        {
//        //            this.onEnterColor = value;
//        //        }
//        //    }
//        //}
//        public int Order
//        {
//            get
//            {
//                return this.order;
//            }
//            set
//            {
//                if (this.order != value)
//                {
//                    this.order = value;
//                }
//            }
//        }
        
//        public event EventHandler OnMouseEnter;
//        //public event EventHandler OnMouseLeave;
//        public event EventHandler OnMouseClicked;
        
//        #endregion

//        #region Constructor/Destructor

//        public UIControl(Vector2 size, Vector3 position)
//            : base(true, size, position)
//        {
//            var viewport = Persian.GDevice.Viewport;
//            this.Enable = true;
//            this.world = Matrix.Identity;
//            this.FontColor = Color.White;
//            this.textRenderTarget = new RenderTarget2D(
//                Persian.GDevice,
//                (int)(this.Size.X * viewport.Width), 
//                (int)(this.Size.Y * viewport.Height));
//            //this.onLeaveColor = Color.White;
//            //this.onEnterColor = Color.Cyan;
//            this.basicEffect = new BasicEffect(Persian.GDevice);
//            this.userControls = new List<UIControl>();
//            this.storyboard = new Storyboard()
//            {
//                Enable = true,
//            };
//        }

//        ~UIControl()
//        {
//        }

//        #endregion

//        #region Methods

//        public void SetText(SpriteBatch spriteBatch, string value)
//        {
//            if (this.text == value || String.IsNullOrWhiteSpace(value)) return;

//            this.text = value;
//            Persian.GDevice.SetRenderTarget(this.textRenderTarget);
//            {
//                Persian.GDevice.Clear(Color.Transparent);
//                spriteBatch.Begin();
//                {
//                    spriteBatch.DrawString(this.Font, this.text, Vector2.Zero, FontColor);
//                    spriteBatch.End();
//                }
//                Persian.GDevice.SetRenderTarget(null);
//            }
//            this.basicEffect.Texture = this.textRenderTarget as Texture2D;
//            this.basicEffect.TextureEnabled = true;
//        }

//        public void StoryboardSetTarget(VectorAnimation vectorAnimation, UIPropertyPath uiPropertyPath)
//        {
//            storyboard.SetTarget(vectorAnimation, this, uiPropertyPath);
//        }

//        public void StopStoryboard()
//        {
//            this.storyboard.Enable = false;
//        }

//        public void AddUserControl(UIControl ui)
//        {
//            this.userControls.Add(ui);
//            this.userControls.Sort(delegate(UIControl b1, UIControl b2)
//            {
//                return b1.Order.CompareTo(b2.Order);
//            });
//        }

//        private void RiseMouseEnter()
//        {
//            if (OnMouseEnter != null)
//            {
//                OnMouseEnter(this, new EventArgs());
//            }
//        }

//        private void RiseMouseClicked()
//        {
//            if (OnMouseClicked != null)
//            {
//                OnMouseClicked(this, new EventArgs());
//            }
//        }

//        #endregion

//        #region Update

//        private bool RayIntersects(Ray ray, BoundingBox bBox, ref float selectedDistance)
//        {
//            float? result = ray.Intersects(bBox);

//            if (result.HasValue == true)
//            {
//                if (result.Value < selectedDistance)
//                {
//                    selectedDistance = result.Value;
//                    return true;
//                }
//            }
//            return false;
//        }

//        public void Update(bool CatchedByMouse)
//        {
//            //Check for catching by mouse
//            var ray = InputManager.xCursor.CalculateCursorRay(Persian.GDevice.Viewport, Matrix.Identity, Matrix.Identity);
//            float closestIntersection = float.MaxValue;

//            bool Catched = false;
//            foreach (var ui in this.userControls)
//            {
//                if (RayIntersects(ray, ui.bBox, ref closestIntersection))
//                {
//                    Catched = true;
//                    ui.storyboard.Start();
//                    if (InputManager.IsLeftMouseBtnClicked())
//                    {
//                        ui.RiseMouseClicked();
//                    }
//                    ui.RiseMouseEnter();
//                }
//                ui.Update(Catched);
//            }

//            if (Enable && !Catched)
//            {
//                if (RayIntersects(ray, this.bBox, ref closestIntersection))
//                {
//                    this.storyboard.Start();
//                }
//            }
//            this.storyboard.Update();
//        }

//        #endregion

//        #region Draw

//        public void Draw(SpriteBatch spriteBatch)
//        {
//            //Draw itself
//            this.basicEffect.World = this.world;
//            this.basicEffect.CurrentTechnique.Passes[0].Apply();
//            {
//                DrawQuad(-Vector2.One, Vector2.One);
//            }
//            //Draw childs
//            foreach (var ui in this.userControls)
//            {
//                ui.Draw(spriteBatch);
//            }
//        }

//        #endregion

//        #region Dispose

//        //protected override void Dispose(bool disposing)
//        //{
//        //    if (!disposing || isDisposed) return;
            
//        //    this.basicEffect.Dispose();

//        //    foreach (var uc in this.userControls)
//        //    {
//        //        uc.Dispose();
//        //    }
//        //    this.userControls.Clear();
//        //    base.Dispose(disposing);
//        //}

//        #endregion
//    }
//}
